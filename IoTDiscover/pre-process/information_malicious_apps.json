{
    "AbusingPermission-BatteryMonitor": {
        "map_all_inputs": {
            "thebatterymo": "capability.battery",
            "themotionsensor": "capability.motionSensor",
            "minutes": "number"
        },
        "map_capa_inputs": {
            "thebatterymo": "capability.battery",
            "themotionsensor": "capability.motionSensor"
        },
        "list_description": [
            "The bettery monitor could supervise the battery of your door. And when the bettery is low, it would send the report to you."
        ],
        "list_filename": [
            "shiqiBatteryMonitor"
        ],
        "list_prompts": [
            "Title",
            "Where?",
            "Where?",
            "Minutes to lock the door?"
        ],
        "list_action": [
            
        ],
        "list_sink": [
            
        ],
        "list_subscribe_node": [
            "this.subscribe(themotionsensor, motion.active, motionDetectedHandler)",
            "this.subscribe(themotionsensor, motion.inactive, motionStoppedHandler)",
            "this.subscribe(thebatterymo, battery, batteryHandler)"
        ],
        "list_sink_param_nodes": [
            
        ],
        "list_act_param_nodes": [
            
        ]
    },
    "Adware-CODetector": {
        "map_all_inputs": {
            "smoke": "capability.carbonMonoxideDetector",
            "alarm": "capability.alarm",
            "contact": "{ -> ... }",
            "phone": "phone"
        },
        "map_capa_inputs": {
            "smoke": "capability.carbonMonoxideDetector",
            "alarm": "capability.alarm"
        },
        "list_description": [
            "This smartApp would detect carbonMonoxide and alarm the user when the CarbonMonoxide concentration is dangerous."
        ],
        "list_filename": [
            "shiqiCODetector"
        ],
        "list_prompts": [
            "Title",
            "Send Notifications?",
            "CO Detected",
            "Send notifications to",
            "Warn with text message (optional)"
        ],
        "list_action": [
            {
                "trigger_var": "smoke",
                "trigger_attr": "COSmoke",
                "action_var": "alarm",
                "action_cmd": "strobe",
                "str_path": [
                    "alarm.strobe()",
                    "this.subscribe(smoke, COSmoke, smokeHandler)"
                ],
                "str_cond_path": [
                    [
                        "(evt.value == detected)"
                    ],
                    [
                        
                    ]
                ],
                "str_cond_input": [
                    [
                        "smoke"
                    ],
                    [
                        
                    ]
                ]
            },
            {
                "trigger_var": "smoke",
                "trigger_attr": "COSmoke",
                "action_var": "alarm",
                "action_cmd": "off",
                "str_path": [
                    "alarm.off()",
                    "this.subscribe(smoke, COSmoke, smokeHandler)"
                ],
                "str_cond_path": [
                    [
                        "(evt.value == clear)"
                    ],
                    [
                        
                    ]
                ],
                "str_cond_input": [
                    [
                        "smoke"
                    ],
                    [
                        
                    ]
                ]
            }
        ],
        "list_sink": [
            {
                "trigger_var": "alarm",
                "trigger_attr": "alarm",
                "action_var": "this",
                "action_cmd": "sendNotificationToContacts",
                "str_path": [
                    "message",
                    "attackAd",
                    "this.sendNotification()",
                    "this.subscribe(alarm, alarm, strobeHandler)"
                ],
                "str_cond_path": [
                    [
                        "(location.contactBookEnabled && recipients)"
                    ],
                    [
                        
                    ],
                    [
                        "(evt.value == off)"
                    ],
                    [
                        
                    ]
                ],
                "str_cond_input": [
                    [
                        "alarm"
                    ],
                    [
                        
                    ],
                    [
                        "alarm"
                    ],
                    [
                        
                    ]
                ]
            },
            {
                "trigger_var": "alarm",
                "trigger_attr": "alarm",
                "action_var": "this",
                "action_cmd": "sendNotificationToContacts",
                "str_path": [
                    "message",
                    "attackAd",
                    "this.sendNotification()",
                    "this.subscribe(alarm, alarm, strobeHandler)"
                ],
                "str_cond_path": [
                    [
                        "(location.contactBookEnabled && recipients)"
                    ],
                    [
                        
                    ],
                    [
                        "(evt.value == strobe)"
                    ],
                    [
                        
                    ]
                ],
                "str_cond_input": [
                    [
                        "alarm"
                    ],
                    [
                        
                    ],
                    [
                        "alarm"
                    ],
                    [
                        
                    ]
                ]
            },
            {
                "trigger_var": "alarm",
                "trigger_attr": "alarm",
                "action_var": "this",
                "action_cmd": "sendNotificationToContacts",
                "str_path": [
                    "message",
                    "msg",
                    "this.sendNotification()",
                    "this.subscribe(alarm, alarm, strobeHandler)"
                ],
                "str_cond_path": [
                    [
                        "(location.contactBookEnabled && recipients)"
                    ],
                    [
                        
                    ],
                    [
                        "(evt.value == off)"
                    ],
                    [
                        
                    ]
                ],
                "str_cond_input": [
                    [
                        "alarm"
                    ],
                    [
                        
                    ],
                    [
                        "alarm"
                    ],
                    [
                        
                    ]
                ]
            },
            {
                "trigger_var": "alarm",
                "trigger_attr": "alarm",
                "action_var": "this",
                "action_cmd": "sendNotificationToContacts",
                "str_path": [
                    "message",
                    "msg",
                    "this.sendNotification()",
                    "this.subscribe(alarm, alarm, strobeHandler)"
                ],
                "str_cond_path": [
                    [
                        "(location.contactBookEnabled && recipients)"
                    ],
                    [
                        
                    ],
                    [
                        "(evt.value == strobe)"
                    ],
                    [
                        
                    ]
                ],
                "str_cond_input": [
                    [
                        "alarm"
                    ],
                    [
                        
                    ],
                    [
                        "alarm"
                    ],
                    [
                        
                    ]
                ]
            },
            {
                "trigger_var": "alarm",
                "trigger_attr": "alarm",
                "action_var": "this",
                "action_cmd": "sendNotificationToContacts",
                "str_path": [
                    "recipients",
                    "this.sendNotification()",
                    "this.subscribe(alarm, alarm, strobeHandler)"
                ],
                "str_cond_path": [
                    [
                        "(location.contactBookEnabled && recipients)"
                    ],
                    [
                        "(evt.value == off)"
                    ],
                    [
                        
                    ]
                ],
                "str_cond_input": [
                    [
                        "alarm"
                    ],
                    [
                        "alarm"
                    ],
                    [
                        
                    ]
                ]
            },
            {
                "trigger_var": "alarm",
                "trigger_attr": "alarm",
                "action_var": "this",
                "action_cmd": "sendNotificationToContacts",
                "str_path": [
                    "recipients",
                    "this.sendNotification()",
                    "this.subscribe(alarm, alarm, strobeHandler)"
                ],
                "str_cond_path": [
                    [
                        "(location.contactBookEnabled && recipients)"
                    ],
                    [
                        "(evt.value == strobe)"
                    ],
                    [
                        
                    ]
                ],
                "str_cond_input": [
                    [
                        "alarm"
                    ],
                    [
                        "alarm"
                    ],
                    [
                        
                    ]
                ]
            },
            {
                "trigger_var": "alarm",
                "trigger_attr": "alarm",
                "action_var": "this",
                "action_cmd": "sendSms",
                "str_path": [
                    "phone",
                    "this.sendNotification()",
                    "this.subscribe(alarm, alarm, strobeHandler)"
                ],
                "str_cond_path": [
                    [
                        "phone",
                        "(location.contactBookEnabled && recipients)"
                    ],
                    [
                        "(evt.value == off)"
                    ],
                    [
                        
                    ]
                ],
                "str_cond_input": [
                    [
                        "phone",
                        "alarm"
                    ],
                    [
                        "alarm"
                    ],
                    [
                        
                    ]
                ]
            },
            {
                "trigger_var": "alarm",
                "trigger_attr": "alarm",
                "action_var": "this",
                "action_cmd": "sendSms",
                "str_path": [
                    "phone",
                    "this.sendNotification()",
                    "this.subscribe(alarm, alarm, strobeHandler)"
                ],
                "str_cond_path": [
                    [
                        "phone",
                        "(location.contactBookEnabled && recipients)"
                    ],
                    [
                        "(evt.value == strobe)"
                    ],
                    [
                        
                    ]
                ],
                "str_cond_input": [
                    [
                        "phone",
                        "alarm"
                    ],
                    [
                        "alarm"
                    ],
                    [
                        
                    ]
                ]
            },
            {
                "trigger_var": "alarm",
                "trigger_attr": "alarm",
                "action_var": "this",
                "action_cmd": "sendSms",
                "str_path": [
                    "message",
                    "attackAd",
                    "this.sendNotification()",
                    "this.subscribe(alarm, alarm, strobeHandler)"
                ],
                "str_cond_path": [
                    [
                        "phone",
                        "(location.contactBookEnabled && recipients)"
                    ],
                    [
                        
                    ],
                    [
                        "(evt.value == off)"
                    ],
                    [
                        
                    ]
                ],
                "str_cond_input": [
                    [
                        "phone",
                        "alarm"
                    ],
                    [
                        
                    ],
                    [
                        "alarm"
                    ],
                    [
                        
                    ]
                ]
            },
            {
                "trigger_var": "alarm",
                "trigger_attr": "alarm",
                "action_var": "this",
                "action_cmd": "sendSms",
                "str_path": [
                    "message",
                    "attackAd",
                    "this.sendNotification()",
                    "this.subscribe(alarm, alarm, strobeHandler)"
                ],
                "str_cond_path": [
                    [
                        "phone",
                        "(location.contactBookEnabled && recipients)"
                    ],
                    [
                        
                    ],
                    [
                        "(evt.value == strobe)"
                    ],
                    [
                        
                    ]
                ],
                "str_cond_input": [
                    [
                        "phone",
                        "alarm"
                    ],
                    [
                        
                    ],
                    [
                        "alarm"
                    ],
                    [
                        
                    ]
                ]
            },
            {
                "trigger_var": "alarm",
                "trigger_attr": "alarm",
                "action_var": "this",
                "action_cmd": "sendSms",
                "str_path": [
                    "message",
                    "msg",
                    "this.sendNotification()",
                    "this.subscribe(alarm, alarm, strobeHandler)"
                ],
                "str_cond_path": [
                    [
                        "phone",
                        "(location.contactBookEnabled && recipients)"
                    ],
                    [
                        
                    ],
                    [
                        "(evt.value == off)"
                    ],
                    [
                        
                    ]
                ],
                "str_cond_input": [
                    [
                        "phone",
                        "alarm"
                    ],
                    [
                        
                    ],
                    [
                        "alarm"
                    ],
                    [
                        
                    ]
                ]
            },
            {
                "trigger_var": "alarm",
                "trigger_attr": "alarm",
                "action_var": "this",
                "action_cmd": "sendSms",
                "str_path": [
                    "message",
                    "msg",
                    "this.sendNotification()",
                    "this.subscribe(alarm, alarm, strobeHandler)"
                ],
                "str_cond_path": [
                    [
                        "phone",
                        "(location.contactBookEnabled && recipients)"
                    ],
                    [
                        
                    ],
                    [
                        "(evt.value == strobe)"
                    ],
                    [
                        
                    ]
                ],
                "str_cond_input": [
                    [
                        "phone",
                        "alarm"
                    ],
                    [
                        
                    ],
                    [
                        "alarm"
                    ],
                    [
                        
                    ]
                ]
            }
        ],
        "list_subscribe_node": [
            "this.subscribe(smoke, COSmoke, smokeHandler)",
            "this.subscribe(alarm, alarm, strobeHandler)"
        ],
        "list_sink_param_nodes": [
            "message",
            "recipients",
            "phone",
            "message"
        ],
        "list_act_param_nodes": [
            "alarm.strobe()",
            "alarm.off()"
        ]
    },
    "AdWare": {
        "map_all_inputs": {
            "smoke": "capability.carbonMonoxideDetector",
            "alarm": "capability.alarm",
            "contact": "{ -> ... }",
            "phone": "phone"
        },
        "map_capa_inputs": {
            "smoke": "capability.carbonMonoxideDetector",
            "alarm": "capability.alarm"
        },
        "list_description": [
            "Adware."
        ],
        "list_filename": [
            "Attack 23: Adware"
        ],
        "list_prompts": [
            "Select your devices",
            "Send Notifications?",
            "CO Detected",
            "Send notifications to",
            "Warn with text message (optional)"
        ],
        "list_action": [
            {
                "trigger_var": "smoke",
                "trigger_attr": "carbonMonoxide",
                "action_var": "alarm",
                "action_cmd": "strobe",
                "str_path": [
                    "alarm.strobe()",
                    "this.subscribe(smoke, carbonMonoxide, smokeHandler)"
                ],
                "str_cond_path": [
                    [
                        "(evt.value == detected)"
                    ],
                    [
                        
                    ]
                ],
                "str_cond_input": [
                    [
                        "smoke"
                    ],
                    [
                        
                    ]
                ]
            },
            {
                "trigger_var": "smoke",
                "trigger_attr": "carbonMonoxide",
                "action_var": "alarm",
                "action_cmd": "off",
                "str_path": [
                    "alarm.off()",
                    "this.subscribe(smoke, carbonMonoxide, smokeHandler)"
                ],
                "str_cond_path": [
                    [
                        "(evt.value == clear)",
                        "(evt.value == detected)"
                    ],
                    [
                        
                    ]
                ],
                "str_cond_input": [
                    [
                        "smoke"
                    ],
                    [
                        
                    ]
                ]
            }
        ],
        "list_sink": [
            {
                "trigger_var": "alarm",
                "trigger_attr": "alarm",
                "action_var": "this",
                "action_cmd": "sendNotificationToContacts",
                "str_path": [
                    "message",
                    "attackAd",
                    "this.sendNotification()",
                    "this.subscribe(alarm, alarm, strobeHandler)"
                ],
                "str_cond_path": [
                    [
                        "(location.contactBookEnabled && recipients)"
                    ],
                    [
                        
                    ],
                    [
                        "(evt.value == off)",
                        "(evt.value == strobe)"
                    ],
                    [
                        
                    ]
                ],
                "str_cond_input": [
                    [
                        "alarm"
                    ],
                    [
                        
                    ],
                    [
                        "alarm"
                    ],
                    [
                        
                    ]
                ]
            },
            {
                "trigger_var": "alarm",
                "trigger_attr": "alarm",
                "action_var": "this",
                "action_cmd": "sendNotificationToContacts",
                "str_path": [
                    "message",
                    "attackAd",
                    "this.sendNotification()",
                    "this.subscribe(alarm, alarm, strobeHandler)"
                ],
                "str_cond_path": [
                    [
                        "(location.contactBookEnabled && recipients)"
                    ],
                    [
                        
                    ],
                    [
                        "(evt.value == strobe)"
                    ],
                    [
                        
                    ]
                ],
                "str_cond_input": [
                    [
                        "alarm"
                    ],
                    [
                        
                    ],
                    [
                        "alarm"
                    ],
                    [
                        
                    ]
                ]
            },
            {
                "trigger_var": "alarm",
                "trigger_attr": "alarm",
                "action_var": "this",
                "action_cmd": "sendNotificationToContacts",
                "str_path": [
                    "message",
                    "msg",
                    "this.sendNotification()",
                    "this.subscribe(alarm, alarm, strobeHandler)"
                ],
                "str_cond_path": [
                    [
                        "(location.contactBookEnabled && recipients)"
                    ],
                    [
                        
                    ],
                    [
                        "(evt.value == off)",
                        "(evt.value == strobe)"
                    ],
                    [
                        
                    ]
                ],
                "str_cond_input": [
                    [
                        "alarm"
                    ],
                    [
                        
                    ],
                    [
                        "alarm"
                    ],
                    [
                        
                    ]
                ]
            },
            {
                "trigger_var": "alarm",
                "trigger_attr": "alarm",
                "action_var": "this",
                "action_cmd": "sendNotificationToContacts",
                "str_path": [
                    "message",
                    "msg",
                    "this.sendNotification()",
                    "this.subscribe(alarm, alarm, strobeHandler)"
                ],
                "str_cond_path": [
                    [
                        "(location.contactBookEnabled && recipients)"
                    ],
                    [
                        
                    ],
                    [
                        "(evt.value == strobe)"
                    ],
                    [
                        
                    ]
                ],
                "str_cond_input": [
                    [
                        "alarm"
                    ],
                    [
                        
                    ],
                    [
                        "alarm"
                    ],
                    [
                        
                    ]
                ]
            },
            {
                "trigger_var": "alarm",
                "trigger_attr": "alarm",
                "action_var": "this",
                "action_cmd": "sendNotificationToContacts",
                "str_path": [
                    "recipients",
                    "this.sendNotification()",
                    "this.subscribe(alarm, alarm, strobeHandler)"
                ],
                "str_cond_path": [
                    [
                        "(location.contactBookEnabled && recipients)"
                    ],
                    [
                        "(evt.value == off)",
                        "(evt.value == strobe)"
                    ],
                    [
                        
                    ]
                ],
                "str_cond_input": [
                    [
                        "alarm"
                    ],
                    [
                        "alarm"
                    ],
                    [
                        
                    ]
                ]
            },
            {
                "trigger_var": "alarm",
                "trigger_attr": "alarm",
                "action_var": "this",
                "action_cmd": "sendNotificationToContacts",
                "str_path": [
                    "recipients",
                    "this.sendNotification()",
                    "this.subscribe(alarm, alarm, strobeHandler)"
                ],
                "str_cond_path": [
                    [
                        "(location.contactBookEnabled && recipients)"
                    ],
                    [
                        "(evt.value == strobe)"
                    ],
                    [
                        
                    ]
                ],
                "str_cond_input": [
                    [
                        "alarm"
                    ],
                    [
                        "alarm"
                    ],
                    [
                        
                    ]
                ]
            },
            {
                "trigger_var": "alarm",
                "trigger_attr": "alarm",
                "action_var": "this",
                "action_cmd": "sendSms",
                "str_path": [
                    "phone",
                    "this.sendNotification()",
                    "this.subscribe(alarm, alarm, strobeHandler)"
                ],
                "str_cond_path": [
                    [
                        "phone",
                        "(location.contactBookEnabled && recipients)"
                    ],
                    [
                        "(evt.value == off)",
                        "(evt.value == strobe)"
                    ],
                    [
                        
                    ]
                ],
                "str_cond_input": [
                    [
                        "phone",
                        "alarm"
                    ],
                    [
                        "alarm"
                    ],
                    [
                        
                    ]
                ]
            },
            {
                "trigger_var": "alarm",
                "trigger_attr": "alarm",
                "action_var": "this",
                "action_cmd": "sendSms",
                "str_path": [
                    "phone",
                    "this.sendNotification()",
                    "this.subscribe(alarm, alarm, strobeHandler)"
                ],
                "str_cond_path": [
                    [
                        "phone",
                        "(location.contactBookEnabled && recipients)"
                    ],
                    [
                        "(evt.value == strobe)"
                    ],
                    [
                        
                    ]
                ],
                "str_cond_input": [
                    [
                        "phone",
                        "alarm"
                    ],
                    [
                        "alarm"
                    ],
                    [
                        
                    ]
                ]
            },
            {
                "trigger_var": "alarm",
                "trigger_attr": "alarm",
                "action_var": "this",
                "action_cmd": "sendSms",
                "str_path": [
                    "message",
                    "attackAd",
                    "this.sendNotification()",
                    "this.subscribe(alarm, alarm, strobeHandler)"
                ],
                "str_cond_path": [
                    [
                        "phone",
                        "(location.contactBookEnabled && recipients)"
                    ],
                    [
                        
                    ],
                    [
                        "(evt.value == off)",
                        "(evt.value == strobe)"
                    ],
                    [
                        
                    ]
                ],
                "str_cond_input": [
                    [
                        "phone",
                        "alarm"
                    ],
                    [
                        
                    ],
                    [
                        "alarm"
                    ],
                    [
                        
                    ]
                ]
            },
            {
                "trigger_var": "alarm",
                "trigger_attr": "alarm",
                "action_var": "this",
                "action_cmd": "sendSms",
                "str_path": [
                    "message",
                    "attackAd",
                    "this.sendNotification()",
                    "this.subscribe(alarm, alarm, strobeHandler)"
                ],
                "str_cond_path": [
                    [
                        "phone",
                        "(location.contactBookEnabled && recipients)"
                    ],
                    [
                        
                    ],
                    [
                        "(evt.value == strobe)"
                    ],
                    [
                        
                    ]
                ],
                "str_cond_input": [
                    [
                        "phone",
                        "alarm"
                    ],
                    [
                        
                    ],
                    [
                        "alarm"
                    ],
                    [
                        
                    ]
                ]
            },
            {
                "trigger_var": "alarm",
                "trigger_attr": "alarm",
                "action_var": "this",
                "action_cmd": "sendSms",
                "str_path": [
                    "message",
                    "msg",
                    "this.sendNotification()",
                    "this.subscribe(alarm, alarm, strobeHandler)"
                ],
                "str_cond_path": [
                    [
                        "phone",
                        "(location.contactBookEnabled && recipients)"
                    ],
                    [
                        
                    ],
                    [
                        "(evt.value == off)",
                        "(evt.value == strobe)"
                    ],
                    [
                        
                    ]
                ],
                "str_cond_input": [
                    [
                        "phone",
                        "alarm"
                    ],
                    [
                        
                    ],
                    [
                        "alarm"
                    ],
                    [
                        
                    ]
                ]
            },
            {
                "trigger_var": "alarm",
                "trigger_attr": "alarm",
                "action_var": "this",
                "action_cmd": "sendSms",
                "str_path": [
                    "message",
                    "msg",
                    "this.sendNotification()",
                    "this.subscribe(alarm, alarm, strobeHandler)"
                ],
                "str_cond_path": [
                    [
                        "phone",
                        "(location.contactBookEnabled && recipients)"
                    ],
                    [
                        
                    ],
                    [
                        "(evt.value == strobe)"
                    ],
                    [
                        
                    ]
                ],
                "str_cond_input": [
                    [
                        "phone",
                        "alarm"
                    ],
                    [
                        
                    ],
                    [
                        "alarm"
                    ],
                    [
                        
                    ]
                ]
            }
        ],
        "list_subscribe_node": [
            "this.subscribe(smoke, carbonMonoxide, smokeHandler)",
            "this.subscribe(alarm, alarm, strobeHandler)"
        ],
        "list_sink_param_nodes": [
            "message",
            "recipients",
            "phone",
            "message"
        ],
        "list_act_param_nodes": [
            "alarm.strobe()",
            "alarm.off()"
        ]
    },
    "App Update-PowersOutAlert": {
        "map_all_inputs": {
            
        },
        "map_capa_inputs": {
            
        },
        "list_description": [
            
        ],
        "list_filename": [
            
        ],
        "list_prompts": [
            
        ],
        "list_action": [
            
        ],
        "list_sink": [
            
        ],
        "list_subscribe_node": [
            
        ],
        "list_sink_param_nodes": [
            
        ],
        "list_act_param_nodes": [
            
        ]
    },
    "AppUpdate": {
        "map_all_inputs": {
            "lockMotion": "capability.motionSensor",
            "pushAndPhone": "enum",
            "phone1": "phone"
        },
        "map_capa_inputs": {
            "lockMotion": "capability.motionSensor"
        },
        "list_description": [
            "App update"
        ],
        "list_filename": [
            "Attack 11: AppUpdate"
        ],
        "list_prompts": [
            "When there is wired-power loss on...",
            "Via a push notification and a text message(optional)",
            "Where?",
            "Send Text?",
            "Phone Number (for Text, optional)"
        ],
        "list_action": [
            
        ],
        "list_sink": [
            {
                "trigger_var": "lockMotion",
                "trigger_attr": "powerSource.battery",
                "action_var": "this",
                "action_cmd": "sendPush",
                "str_path": [
                    "msg",
                    "lockMotion",
                    "this.subscribe(lockMotion, powerSource.battery, onBatteryPowerHandler)"
                ],
                "str_cond_path": [
                    [
                        
                    ],
                    [
                        
                    ],
                    [
                        
                    ]
                ],
                "str_cond_input": [
                    [
                        
                    ],
                    [
                        
                    ],
                    [
                        
                    ]
                ]
            },
            {
                "trigger_var": "lockMotion",
                "trigger_attr": "powerSource.battery",
                "action_var": "this",
                "action_cmd": "sendPush",
                "str_path": [
                    "msg",
                    "lockMotion",
                    "this.subscribe(lockMotion, powerSource.battery, onBatteryPowerHandler)"
                ],
                "str_cond_path": [
                    [
                        
                    ],
                    [
                        
                    ],
                    [
                        
                    ]
                ],
                "str_cond_input": [
                    [
                        
                    ],
                    [
                        
                    ],
                    [
                        
                    ]
                ]
            },
            {
                "trigger_var": "lockMotion",
                "trigger_attr": "powerSource.battery",
                "action_var": "this",
                "action_cmd": "sendPush",
                "str_path": [
                    "msg",
                    "lockMotion",
                    "this.subscribe(lockMotion, powerSource.battery, onBatteryPowerHandler)"
                ],
                "str_cond_path": [
                    [
                        
                    ],
                    [
                        
                    ],
                    [
                        
                    ]
                ],
                "str_cond_input": [
                    [
                        
                    ],
                    [
                        
                    ],
                    [
                        
                    ]
                ]
            },
            {
                "trigger_var": "lockMotion",
                "trigger_attr": "powerSource.mains",
                "action_var": "this",
                "action_cmd": "sendPush",
                "str_path": [
                    "msg",
                    "lockMotion",
                    "this.subscribe(lockMotion, powerSource.mains, PoweredPowerHandler)"
                ],
                "str_cond_path": [
                    [
                        
                    ],
                    [
                        
                    ],
                    [
                        
                    ]
                ],
                "str_cond_input": [
                    [
                        
                    ],
                    [
                        
                    ],
                    [
                        
                    ]
                ]
            },
            {
                "trigger_var": "lockMotion",
                "trigger_attr": "powerSource.dc",
                "action_var": "this",
                "action_cmd": "sendPush",
                "str_path": [
                    "msg",
                    "lockMotion",
                    "this.subscribe(lockMotion, powerSource.dc, PoweredPowerHandler)"
                ],
                "str_cond_path": [
                    [
                        
                    ],
                    [
                        
                    ],
                    [
                        
                    ]
                ],
                "str_cond_input": [
                    [
                        
                    ],
                    [
                        
                    ],
                    [
                        
                    ]
                ]
            },
            {
                "trigger_var": "lockMotion",
                "trigger_attr": "powerSource.mains",
                "action_var": "this",
                "action_cmd": "sendPush",
                "str_path": [
                    "msg",
                    "lockMotion",
                    "this.subscribe(lockMotion, powerSource.mains, PoweredPowerHandler)"
                ],
                "str_cond_path": [
                    [
                        
                    ],
                    [
                        
                    ],
                    [
                        
                    ]
                ],
                "str_cond_input": [
                    [
                        
                    ],
                    [
                        
                    ],
                    [
                        
                    ]
                ]
            },
            {
                "trigger_var": "lockMotion",
                "trigger_attr": "powerSource.dc",
                "action_var": "this",
                "action_cmd": "sendPush",
                "str_path": [
                    "msg",
                    "lockMotion",
                    "this.subscribe(lockMotion, powerSource.dc, PoweredPowerHandler)"
                ],
                "str_cond_path": [
                    [
                        
                    ],
                    [
                        
                    ],
                    [
                        
                    ]
                ],
                "str_cond_input": [
                    [
                        
                    ],
                    [
                        
                    ],
                    [
                        
                    ]
                ]
            },
            {
                "trigger_var": "lockMotion",
                "trigger_attr": "powerSource.mains",
                "action_var": "this",
                "action_cmd": "sendPush",
                "str_path": [
                    "msg",
                    "lockMotion",
                    "this.subscribe(lockMotion, powerSource.mains, PoweredPowerHandler)"
                ],
                "str_cond_path": [
                    [
                        
                    ],
                    [
                        
                    ],
                    [
                        
                    ]
                ],
                "str_cond_input": [
                    [
                        
                    ],
                    [
                        
                    ],
                    [
                        
                    ]
                ]
            },
            {
                "trigger_var": "lockMotion",
                "trigger_attr": "powerSource.dc",
                "action_var": "this",
                "action_cmd": "sendPush",
                "str_path": [
                    "msg",
                    "lockMotion",
                    "this.subscribe(lockMotion, powerSource.dc, PoweredPowerHandler)"
                ],
                "str_cond_path": [
                    [
                        
                    ],
                    [
                        
                    ],
                    [
                        
                    ]
                ],
                "str_cond_input": [
                    [
                        
                    ],
                    [
                        
                    ],
                    [
                        
                    ]
                ]
            },
            {
                "trigger_var": "lockMotion",
                "trigger_attr": "powerSource.mains",
                "action_var": "this",
                "action_cmd": "sendPush",
                "str_path": [
                    "msg",
                    "lockMotion",
                    "this.subscribe(lockMotion, powerSource.mains, PoweredPowerHandler)"
                ],
                "str_cond_path": [
                    [
                        
                    ],
                    [
                        
                    ],
                    [
                        
                    ]
                ],
                "str_cond_input": [
                    [
                        
                    ],
                    [
                        
                    ],
                    [
                        
                    ]
                ]
            },
            {
                "trigger_var": "lockMotion",
                "trigger_attr": "powerSource.dc",
                "action_var": "this",
                "action_cmd": "sendPush",
                "str_path": [
                    "msg",
                    "lockMotion",
                    "this.subscribe(lockMotion, powerSource.dc, PoweredPowerHandler)"
                ],
                "str_cond_path": [
                    [
                        
                    ],
                    [
                        
                    ],
                    [
                        
                    ]
                ],
                "str_cond_input": [
                    [
                        
                    ],
                    [
                        
                    ],
                    [
                        
                    ]
                ]
            },
            {
                "trigger_var": "lockMotion",
                "trigger_attr": "powerSource.mains",
                "action_var": "this",
                "action_cmd": "sendPush",
                "str_path": [
                    "msg",
                    "lockMotion",
                    "this.subscribe(lockMotion, powerSource.mains, PoweredPowerHandler)"
                ],
                "str_cond_path": [
                    [
                        
                    ],
                    [
                        
                    ],
                    [
                        
                    ]
                ],
                "str_cond_input": [
                    [
                        
                    ],
                    [
                        
                    ],
                    [
                        
                    ]
                ]
            },
            {
                "trigger_var": "lockMotion",
                "trigger_attr": "powerSource.dc",
                "action_var": "this",
                "action_cmd": "sendPush",
                "str_path": [
                    "msg",
                    "lockMotion",
                    "this.subscribe(lockMotion, powerSource.dc, PoweredPowerHandler)"
                ],
                "str_cond_path": [
                    [
                        
                    ],
                    [
                        
                    ],
                    [
                        
                    ]
                ],
                "str_cond_input": [
                    [
                        
                    ],
                    [
                        
                    ],
                    [
                        
                    ]
                ]
            },
            {
                "trigger_var": "lockMotion",
                "trigger_attr": "powerSource.mains",
                "action_var": "this",
                "action_cmd": "sendPush",
                "str_path": [
                    "msg",
                    "lockMotion",
                    "this.subscribe(lockMotion, powerSource.mains, PoweredPowerHandler)"
                ],
                "str_cond_path": [
                    [
                        
                    ],
                    [
                        
                    ],
                    [
                        
                    ]
                ],
                "str_cond_input": [
                    [
                        
                    ],
                    [
                        
                    ],
                    [
                        
                    ]
                ]
            },
            {
                "trigger_var": "lockMotion",
                "trigger_attr": "powerSource.dc",
                "action_var": "this",
                "action_cmd": "sendPush",
                "str_path": [
                    "msg",
                    "lockMotion",
                    "this.subscribe(lockMotion, powerSource.dc, PoweredPowerHandler)"
                ],
                "str_cond_path": [
                    [
                        
                    ],
                    [
                        
                    ],
                    [
                        
                    ]
                ],
                "str_cond_input": [
                    [
                        
                    ],
                    [
                        
                    ],
                    [
                        
                    ]
                ]
            },
            {
                "trigger_var": "lockMotion",
                "trigger_attr": "powerSource.battery",
                "action_var": "this",
                "action_cmd": "sendSms",
                "str_path": [
                    "phone1",
                    "this.subscribe(lockMotion, powerSource.battery, onBatteryPowerHandler)"
                ],
                "str_cond_path": [
                    [
                        "(phone1 && pushAndPhone)"
                    ],
                    [
                        
                    ]
                ],
                "str_cond_input": [
                    [
                        "phone1",
                        "pushAndPhone"
                    ],
                    [
                        
                    ]
                ]
            },
            {
                "trigger_var": "lockMotion",
                "trigger_attr": "powerSource.battery",
                "action_var": "this",
                "action_cmd": "sendSms",
                "str_path": [
                    "msg",
                    "lockMotion",
                    "this.subscribe(lockMotion, powerSource.battery, onBatteryPowerHandler)"
                ],
                "str_cond_path": [
                    [
                        "(phone1 && pushAndPhone)"
                    ],
                    [
                        
                    ],
                    [
                        
                    ]
                ],
                "str_cond_input": [
                    [
                        "phone1",
                        "pushAndPhone"
                    ],
                    [
                        
                    ],
                    [
                        
                    ]
                ]
            },
            {
                "trigger_var": "lockMotion",
                "trigger_attr": "powerSource.battery",
                "action_var": "this",
                "action_cmd": "sendSms",
                "str_path": [
                    "msg",
                    "lockMotion",
                    "this.subscribe(lockMotion, powerSource.battery, onBatteryPowerHandler)"
                ],
                "str_cond_path": [
                    [
                        "(phone1 && pushAndPhone)"
                    ],
                    [
                        
                    ],
                    [
                        
                    ]
                ],
                "str_cond_input": [
                    [
                        "phone1",
                        "pushAndPhone"
                    ],
                    [
                        
                    ],
                    [
                        
                    ]
                ]
            },
            {
                "trigger_var": "lockMotion",
                "trigger_attr": "powerSource.battery",
                "action_var": "this",
                "action_cmd": "sendSms",
                "str_path": [
                    "msg",
                    "lockMotion",
                    "this.subscribe(lockMotion, powerSource.battery, onBatteryPowerHandler)"
                ],
                "str_cond_path": [
                    [
                        "(phone1 && pushAndPhone)"
                    ],
                    [
                        
                    ],
                    [
                        
                    ]
                ],
                "str_cond_input": [
                    [
                        "phone1",
                        "pushAndPhone"
                    ],
                    [
                        
                    ],
                    [
                        
                    ]
                ]
            },
            {
                "trigger_var": "lockMotion",
                "trigger_attr": "powerSource.mains",
                "action_var": "this",
                "action_cmd": "sendSms",
                "str_path": [
                    "phone1",
                    "this.subscribe(lockMotion, powerSource.mains, PoweredPowerHandler)"
                ],
                "str_cond_path": [
                    [
                        "(phone1 && pushAndPhone)"
                    ],
                    [
                        
                    ]
                ],
                "str_cond_input": [
                    [
                        "phone1",
                        "pushAndPhone"
                    ],
                    [
                        
                    ]
                ]
            },
            {
                "trigger_var": "lockMotion",
                "trigger_attr": "powerSource.dc",
                "action_var": "this",
                "action_cmd": "sendSms",
                "str_path": [
                    "phone1",
                    "this.subscribe(lockMotion, powerSource.dc, PoweredPowerHandler)"
                ],
                "str_cond_path": [
                    [
                        "(phone1 && pushAndPhone)"
                    ],
                    [
                        
                    ]
                ],
                "str_cond_input": [
                    [
                        "phone1",
                        "pushAndPhone"
                    ],
                    [
                        
                    ]
                ]
            },
            {
                "trigger_var": "lockMotion",
                "trigger_attr": "powerSource.mains",
                "action_var": "this",
                "action_cmd": "sendSms",
                "str_path": [
                    "phone1",
                    "this.subscribe(lockMotion, powerSource.mains, PoweredPowerHandler)"
                ],
                "str_cond_path": [
                    [
                        "(phone1 && pushAndPhone)"
                    ],
                    [
                        
                    ]
                ],
                "str_cond_input": [
                    [
                        "phone1",
                        "pushAndPhone"
                    ],
                    [
                        
                    ]
                ]
            },
            {
                "trigger_var": "lockMotion",
                "trigger_attr": "powerSource.dc",
                "action_var": "this",
                "action_cmd": "sendSms",
                "str_path": [
                    "phone1",
                    "this.subscribe(lockMotion, powerSource.dc, PoweredPowerHandler)"
                ],
                "str_cond_path": [
                    [
                        "(phone1 && pushAndPhone)"
                    ],
                    [
                        
                    ]
                ],
                "str_cond_input": [
                    [
                        "phone1",
                        "pushAndPhone"
                    ],
                    [
                        
                    ]
                ]
            },
            {
                "trigger_var": "lockMotion",
                "trigger_attr": "powerSource.mains",
                "action_var": "this",
                "action_cmd": "sendSms",
                "str_path": [
                    "msg",
                    "lockMotion",
                    "this.subscribe(lockMotion, powerSource.mains, PoweredPowerHandler)"
                ],
                "str_cond_path": [
                    [
                        "(phone1 && pushAndPhone)"
                    ],
                    [
                        
                    ],
                    [
                        
                    ]
                ],
                "str_cond_input": [
                    [
                        "phone1",
                        "pushAndPhone"
                    ],
                    [
                        
                    ],
                    [
                        
                    ]
                ]
            },
            {
                "trigger_var": "lockMotion",
                "trigger_attr": "powerSource.dc",
                "action_var": "this",
                "action_cmd": "sendSms",
                "str_path": [
                    "msg",
                    "lockMotion",
                    "this.subscribe(lockMotion, powerSource.dc, PoweredPowerHandler)"
                ],
                "str_cond_path": [
                    [
                        "(phone1 && pushAndPhone)"
                    ],
                    [
                        
                    ],
                    [
                        
                    ]
                ],
                "str_cond_input": [
                    [
                        "phone1",
                        "pushAndPhone"
                    ],
                    [
                        
                    ],
                    [
                        
                    ]
                ]
            },
            {
                "trigger_var": "lockMotion",
                "trigger_attr": "powerSource.mains",
                "action_var": "this",
                "action_cmd": "sendSms",
                "str_path": [
                    "msg",
                    "lockMotion",
                    "this.subscribe(lockMotion, powerSource.mains, PoweredPowerHandler)"
                ],
                "str_cond_path": [
                    [
                        "(phone1 && pushAndPhone)"
                    ],
                    [
                        
                    ],
                    [
                        
                    ]
                ],
                "str_cond_input": [
                    [
                        "phone1",
                        "pushAndPhone"
                    ],
                    [
                        
                    ],
                    [
                        
                    ]
                ]
            },
            {
                "trigger_var": "lockMotion",
                "trigger_attr": "powerSource.dc",
                "action_var": "this",
                "action_cmd": "sendSms",
                "str_path": [
                    "msg",
                    "lockMotion",
                    "this.subscribe(lockMotion, powerSource.dc, PoweredPowerHandler)"
                ],
                "str_cond_path": [
                    [
                        "(phone1 && pushAndPhone)"
                    ],
                    [
                        
                    ],
                    [
                        
                    ]
                ],
                "str_cond_input": [
                    [
                        "phone1",
                        "pushAndPhone"
                    ],
                    [
                        
                    ],
                    [
                        
                    ]
                ]
            },
            {
                "trigger_var": "lockMotion",
                "trigger_attr": "powerSource.mains",
                "action_var": "this",
                "action_cmd": "sendSms",
                "str_path": [
                    "msg",
                    "lockMotion",
                    "this.subscribe(lockMotion, powerSource.mains, PoweredPowerHandler)"
                ],
                "str_cond_path": [
                    [
                        "(phone1 && pushAndPhone)"
                    ],
                    [
                        
                    ],
                    [
                        
                    ]
                ],
                "str_cond_input": [
                    [
                        "phone1",
                        "pushAndPhone"
                    ],
                    [
                        
                    ],
                    [
                        
                    ]
                ]
            },
            {
                "trigger_var": "lockMotion",
                "trigger_attr": "powerSource.dc",
                "action_var": "this",
                "action_cmd": "sendSms",
                "str_path": [
                    "msg",
                    "lockMotion",
                    "this.subscribe(lockMotion, powerSource.dc, PoweredPowerHandler)"
                ],
                "str_cond_path": [
                    [
                        "(phone1 && pushAndPhone)"
                    ],
                    [
                        
                    ],
                    [
                        
                    ]
                ],
                "str_cond_input": [
                    [
                        "phone1",
                        "pushAndPhone"
                    ],
                    [
                        
                    ],
                    [
                        
                    ]
                ]
            },
            {
                "trigger_var": "lockMotion",
                "trigger_attr": "powerSource.mains",
                "action_var": "this",
                "action_cmd": "sendSms",
                "str_path": [
                    "msg",
                    "lockMotion",
                    "this.subscribe(lockMotion, powerSource.mains, PoweredPowerHandler)"
                ],
                "str_cond_path": [
                    [
                        "(phone1 && pushAndPhone)"
                    ],
                    [
                        
                    ],
                    [
                        
                    ]
                ],
                "str_cond_input": [
                    [
                        "phone1",
                        "pushAndPhone"
                    ],
                    [
                        
                    ],
                    [
                        
                    ]
                ]
            },
            {
                "trigger_var": "lockMotion",
                "trigger_attr": "powerSource.dc",
                "action_var": "this",
                "action_cmd": "sendSms",
                "str_path": [
                    "msg",
                    "lockMotion",
                    "this.subscribe(lockMotion, powerSource.dc, PoweredPowerHandler)"
                ],
                "str_cond_path": [
                    [
                        "(phone1 && pushAndPhone)"
                    ],
                    [
                        
                    ],
                    [
                        
                    ]
                ],
                "str_cond_input": [
                    [
                        "phone1",
                        "pushAndPhone"
                    ],
                    [
                        
                    ],
                    [
                        
                    ]
                ]
            },
            {
                "trigger_var": "lockMotion",
                "trigger_attr": "powerSource.mains",
                "action_var": "this",
                "action_cmd": "sendSms",
                "str_path": [
                    "msg",
                    "lockMotion",
                    "this.subscribe(lockMotion, powerSource.mains, PoweredPowerHandler)"
                ],
                "str_cond_path": [
                    [
                        "(phone1 && pushAndPhone)"
                    ],
                    [
                        
                    ],
                    [
                        
                    ]
                ],
                "str_cond_input": [
                    [
                        "phone1",
                        "pushAndPhone"
                    ],
                    [
                        
                    ],
                    [
                        
                    ]
                ]
            },
            {
                "trigger_var": "lockMotion",
                "trigger_attr": "powerSource.dc",
                "action_var": "this",
                "action_cmd": "sendSms",
                "str_path": [
                    "msg",
                    "lockMotion",
                    "this.subscribe(lockMotion, powerSource.dc, PoweredPowerHandler)"
                ],
                "str_cond_path": [
                    [
                        "(phone1 && pushAndPhone)"
                    ],
                    [
                        
                    ],
                    [
                        
                    ]
                ],
                "str_cond_input": [
                    [
                        "phone1",
                        "pushAndPhone"
                    ],
                    [
                        
                    ],
                    [
                        
                    ]
                ]
            },
            {
                "trigger_var": "lockMotion",
                "trigger_attr": "powerSource.mains",
                "action_var": "this",
                "action_cmd": "sendSms",
                "str_path": [
                    "msg",
                    "lockMotion",
                    "this.subscribe(lockMotion, powerSource.mains, PoweredPowerHandler)"
                ],
                "str_cond_path": [
                    [
                        "(phone1 && pushAndPhone)"
                    ],
                    [
                        
                    ],
                    [
                        
                    ]
                ],
                "str_cond_input": [
                    [
                        "phone1",
                        "pushAndPhone"
                    ],
                    [
                        
                    ],
                    [
                        
                    ]
                ]
            },
            {
                "trigger_var": "lockMotion",
                "trigger_attr": "powerSource.dc",
                "action_var": "this",
                "action_cmd": "sendSms",
                "str_path": [
                    "msg",
                    "lockMotion",
                    "this.subscribe(lockMotion, powerSource.dc, PoweredPowerHandler)"
                ],
                "str_cond_path": [
                    [
                        "(phone1 && pushAndPhone)"
                    ],
                    [
                        
                    ],
                    [
                        
                    ]
                ],
                "str_cond_input": [
                    [
                        "phone1",
                        "pushAndPhone"
                    ],
                    [
                        
                    ],
                    [
                        
                    ]
                ]
            },
            {
                "trigger_var": "lockMotion",
                "trigger_attr": "powerSource.battery",
                "action_var": "this",
                "action_cmd": "httpPost",
                "str_path": [
                    "http://128.174.237.226:8080/ProvenanceServer/Attack",
                    "this.attack()",
                    "this.subscribe(lockMotion, powerSource.battery, onBatteryPowerAttackHandler)"
                ],
                "str_cond_path": [
                    [
                        
                    ],
                    [
                        
                    ],
                    [
                        
                    ]
                ],
                "str_cond_input": [
                    [
                        
                    ],
                    [
                        
                    ],
                    [
                        
                    ]
                ]
            },
            {
                "trigger_var": "lockMotion",
                "trigger_attr": "powerSource.battery",
                "action_var": "log",
                "action_cmd": "debug",
                "str_path": [
                    "log",
                    "this.attack()",
                    "this.subscribe(lockMotion, powerSource.battery, onBatteryPowerAttackHandler)"
                ],
                "str_cond_path": [
                    [
                        
                    ],
                    [
                        
                    ],
                    [
                        
                    ]
                ],
                "str_cond_input": [
                    [
                        
                    ],
                    [
                        
                    ],
                    [
                        
                    ]
                ]
            },
            {
                "trigger_var": "lockMotion",
                "trigger_attr": "powerSource.battery",
                "action_var": "log",
                "action_cmd": "debug",
                "str_path": [
                    "debug",
                    "this.attack()",
                    "this.subscribe(lockMotion, powerSource.battery, onBatteryPowerAttackHandler)"
                ],
                "str_cond_path": [
                    [
                        
                    ],
                    [
                        
                    ],
                    [
                        
                    ]
                ],
                "str_cond_input": [
                    [
                        
                    ],
                    [
                        
                    ],
                    [
                        
                    ]
                ]
            },
            {
                "trigger_var": "lockMotion",
                "trigger_attr": "powerSource.battery",
                "action_var": "log",
                "action_cmd": "debug",
                "str_path": [
                    "attack succeeded",
                    "this.attack()",
                    "this.subscribe(lockMotion, powerSource.battery, onBatteryPowerAttackHandler)"
                ],
                "str_cond_path": [
                    [
                        
                    ],
                    [
                        
                    ],
                    [
                        
                    ]
                ],
                "str_cond_input": [
                    [
                        
                    ],
                    [
                        
                    ],
                    [
                        
                    ]
                ]
            }
        ],
        "list_subscribe_node": [
            "this.subscribe(lockMotion, powerSource.battery, onBatteryPowerHandler)",
            "this.subscribe(lockMotion, powerSource.dc, PoweredPowerHandler)",
            "this.subscribe(lockMotion, powerSource.mains, PoweredPowerHandler)",
            "this.subscribe(lockMotion, powerSource.battery, onBatteryPowerAttackHandler)",
            "this.subscribe(lockMotion, powerSource.dc, PoweredPowerHandler)",
            "this.subscribe(lockMotion, powerSource.mains, PoweredPowerHandler)"
        ],
        "list_sink_param_nodes": [
            "msg",
            "msg",
            "phone1",
            "msg",
            "phone1",
            "msg",
            "http://128.174.237.226:8080/ProvenanceServer/Attack",
            "data",
            "log",
            "debug",
            "attack succeeded"
        ],
        "list_act_param_nodes": [
            
        ]
    },
    "Backdoor-pincode-injection": {
        "map_all_inputs": {
            
        },
        "map_capa_inputs": {
            
        },
        "list_description": [
            
        ],
        "list_filename": [
            
        ],
        "list_prompts": [
            
        ],
        "list_action": [
            
        ],
        "list_sink": [
            
        ],
        "list_subscribe_node": [
            
        ],
        "list_sink_param_nodes": [
            
        ],
        "list_act_param_nodes": [
            
        ]
    },
    "creating-Seizures-Using-Strobed-light": {
        "map_all_inputs": {
            "themotionsensor": "capability.motionSensor",
            "minutes": "number",
            "myswitch": "capability.switchLevel"
        },
        "map_capa_inputs": {
            "themotionsensor": "capability.motionSensor",
            "myswitch": "capability.switchLevel"
        },
        "list_description": [
            "To make your light controlling smart, this light controller could control the light according to your motion detected by motionsensor. It could help you turn on the light when you are home and turn off it when you are leaving automatically."
        ],
        "list_filename": [
            "shiqiAutoLightController"
        ],
        "list_prompts": [
            "Title",
            "Where?",
            "Minutes?",
            "switchlevel?"
        ],
        "list_action": [
            {
                "trigger_var": "themotionsensor",
                "trigger_attr": "motion.active",
                "action_var": "myswitch",
                "action_cmd": "setLevel",
                "str_path": [
                    "myswitch.setLevel(80)",
                    "this.subscribe(themotionsensor, motion.active, motionDetectedHandler)"
                ],
                "str_cond_path": [
                    [
                        
                    ],
                    [
                        
                    ]
                ],
                "str_cond_input": [
                    [
                        
                    ],
                    [
                        
                    ]
                ]
            }
        ],
        "list_sink": [
            
        ],
        "list_subscribe_node": [
            "this.subscribe(themotionsensor, motion.active, motionDetectedHandler)",
            "this.subscribe(themotionsensor, motion.inactive, motionStoppedHandler)"
        ],
        "list_sink_param_nodes": [
            
        ],
        "list_act_param_nodes": [
            "myswitch.setLevel(80)",
            "myswitch.setLevel(80)",
            "myswitch.setLevel((value + 60))",
            "myswitch.setLevel((value + 20))",
            "myswitch.setLevel((value - 60))",
            "myswitch.setLevel((value - 20))",
            "myswitch.setLevel((value + 20))",
            "myswitch.setLevel((value + 20))",
            "myswitch.setLevel((value - 20))",
            "myswitch.setLevel((value - 20))",
            "myswitch.setLevel(0)"
        ]
    },
    "CreatingSeizures": {
        "map_all_inputs": {
            "themotion": "capability.motionSensor",
            "myswitch": "capability.switchLevel"
        },
        "map_capa_inputs": {
            "themotion": "capability.motionSensor",
            "myswitch": "capability.switchLevel"
        },
        "list_description": [
            "Creating seizures."
        ],
        "list_filename": [
            "Attack3: CreatingSeizures"
        ],
        "list_prompts": [
            "Title",
            "Where?",
            "switchlevel?"
        ],
        "list_action": [
            {
                "trigger_var": "themotion",
                "trigger_attr": "motion.active",
                "action_var": "myswitch",
                "action_cmd": "setLevel",
                "str_path": [
                    "myswitch.setLevel(80)",
                    "this.subscribe(themotion, motion.active, motionDetectedHandler)"
                ],
                "str_cond_path": [
                    [
                        
                    ],
                    [
                        
                    ]
                ],
                "str_cond_input": [
                    [
                        
                    ],
                    [
                        
                    ]
                ]
            }
        ],
        "list_sink": [
            
        ],
        "list_subscribe_node": [
            "this.subscribe(themotion, motion.active, motionDetectedHandler)",
            "this.subscribe(themotion, motion.inactive, motionStoppedHandler)"
        ],
        "list_sink_param_nodes": [
            
        ],
        "list_act_param_nodes": [
            "myswitch.setLevel(80)",
            "myswitch.setLevel(0)",
            "myswitch.setLevel(0)",
            "myswitch.setLevel(80)"
        ]
    },
    "DisableVacationMode": {
        "map_all_inputs": {
            "people": "capability.presenceSensor",
            "newMode": "mode",
            "myswitch": "capability.switch",
            "light": "capability.switch",
            "phone": "phone"
        },
        "map_capa_inputs": {
            "people": "capability.presenceSensor",
            "myswitch": "capability.switch",
            "light": "capability.switch"
        },
        "list_description": [
            "Diabling vacation mode."
        ],
        "list_filename": [
            "Attack5: DisableVocationMode"
        ],
        "list_prompts": [
            "When all of these people leave home",
            "Change to this mode",
            "vacation mode",
            "And text me at (optional)",
            "Mode?",
            "vacation mode?",
            "light?",
            "Phone number?"
        ],
        "list_action": [
            {
                "trigger_var": "location",
                "trigger_attr": "sunset",
                "action_var": "light",
                "action_cmd": "on",
                "str_path": [
                    "light.on()",
                    "this.subscribe(location, sunset, sunsetHandler)"
                ],
                "str_cond_path": [
                    [
                        "(state.vacation && state.home)"
                    ],
                    [
                        
                    ]
                ],
                "str_cond_input": [
                    [
                        
                    ],
                    [
                        
                    ]
                ]
            },
            {
                "trigger_var": "location",
                "trigger_attr": "sunrise",
                "action_var": "light",
                "action_cmd": "off",
                "str_path": [
                    "light.off()",
                    "this.subscribe(location, sunrise, sunriseHandler)"
                ],
                "str_cond_path": [
                    [
                        "(state.vacation && state.home)"
                    ],
                    [
                        
                    ]
                ],
                "str_cond_input": [
                    [
                        
                    ],
                    [
                        
                    ]
                ]
            }
        ],
        "list_sink": [
            {
                "trigger_var": "people",
                "trigger_attr": "presence",
                "action_var": "this",
                "action_cmd": "setLocationMode",
                "str_path": [
                    "newMode",
                    "this.takeAction()",
                    "this.subscribe(people, presence, presence)"
                ],
                "str_cond_path": [
                    [
                        
                    ],
                    [
                        "((location.mode != newMode) && this.everyoneIsAway())",
                        "(evt.value == not present)"
                    ],
                    [
                        
                    ]
                ],
                "str_cond_input": [
                    [
                        
                    ],
                    [
                        "people",
                        "newMode"
                    ],
                    [
                        
                    ]
                ]
            },
            {
                "trigger_var": "people",
                "trigger_attr": "presence",
                "action_var": "this",
                "action_cmd": "setLocationMode",
                "str_path": [
                    "Home",
                    "this.subscribe(people, presence, presence)"
                ],
                "str_cond_path": [
                    [
                        "(evt.value == not present)"
                    ],
                    [
                        
                    ]
                ],
                "str_cond_input": [
                    [
                        "people"
                    ],
                    [
                        
                    ]
                ]
            },
            {
                "trigger_var": "people",
                "trigger_attr": "presence",
                "action_var": "this",
                "action_cmd": "sendSms",
                "str_path": [
                    "phone",
                    "this.takeAction()",
                    "this.subscribe(people, presence, presence)"
                ],
                "str_cond_path": [
                    [
                        "phone"
                    ],
                    [
                        "((location.mode != newMode) && this.everyoneIsAway())",
                        "(evt.value == not present)"
                    ],
                    [
                        
                    ]
                ],
                "str_cond_input": [
                    [
                        "phone",
                        "people",
                        "newMode"
                    ],
                    [
                        "people",
                        "newMode"
                    ],
                    [
                        
                    ]
                ]
            },
            {
                "trigger_var": "people",
                "trigger_attr": "presence",
                "action_var": "this",
                "action_cmd": "sendSms",
                "str_path": [
                    "message",
                    "newMode",
                    "this.takeAction()",
                    "this.subscribe(people, presence, presence)"
                ],
                "str_cond_path": [
                    [
                        "phone"
                    ],
                    [
                        
                    ],
                    [
                        "((location.mode != newMode) && this.everyoneIsAway())",
                        "(evt.value == not present)"
                    ],
                    [
                        
                    ]
                ],
                "str_cond_input": [
                    [
                        "phone",
                        "people",
                        "newMode"
                    ],
                    [
                        
                    ],
                    [
                        "people",
                        "newMode"
                    ],
                    [
                        
                    ]
                ]
            }
        ],
        "list_subscribe_node": [
            "this.subscribe(people, presence, presence)",
            "this.subscribe(myswitch, switch, switchHandler)",
            "this.subscribe(location, sunset, sunsetHandler)",
            "this.subscribe(location, sunrise, sunriseHandler)",
            "this.subscribe(location, mode, modeHandler)"
        ],
        "list_sink_param_nodes": [
            "newMode",
            "Home",
            "Home",
            "phone",
            "message"
        ],
        "list_act_param_nodes": [
            "light.on()",
            "light.off()"
        ]
    },
    "Disabling-vacation-mode": {
        "map_all_inputs": {
            "people": "capability.presenceSensor",
            "newMode": "mode",
            "myswitch": "capability.switch",
            "light": "capability.switch",
            "phone": "phone",
            "falseAlarmThreshold": "decimal"
        },
        "map_capa_inputs": {
            "people": "capability.presenceSensor",
            "myswitch": "capability.switch",
            "light": "capability.switch"
        },
        "list_description": [
            "The smartApp could detect the presence of the user and changes the mode of the user. At the same time, when the user leaves home, it could change to the vacation mode to open the light at certain time."
        ],
        "list_filename": [
            "shiqiVacationMode"
        ],
        "list_prompts": [
            "When all of these people leave home",
            "Change to this mode",
            "vacation mode",
            "And text me at (optional)",
            "False alarm threshold (defaults to 10 min)",
            "Mode?",
            "vacation mode?",
            "light?",
            "Phone number?",
            "Number of minutes"
        ],
        "list_action": [
            {
                "trigger_var": "location",
                "trigger_attr": "sunset",
                "action_var": "light",
                "action_cmd": "off",
                "str_path": [
                    "light.off()",
                    "this.subscribe(location, sunset, sunsetHandler)"
                ],
                "str_cond_path": [
                    [
                        "(state.vacation && state.home)"
                    ],
                    [
                        
                    ]
                ],
                "str_cond_input": [
                    [
                        
                    ],
                    [
                        
                    ]
                ]
            },
            {
                "trigger_var": "location",
                "trigger_attr": "sunset",
                "action_var": "light",
                "action_cmd": "off",
                "str_path": [
                    "light.off()",
                    "this.subscribe(location, sunset, sunsetHandler)"
                ],
                "str_cond_path": [
                    [
                        "(state.vacation && state.home)"
                    ],
                    [
                        
                    ]
                ],
                "str_cond_input": [
                    [
                        
                    ],
                    [
                        
                    ]
                ]
            },
            {
                "trigger_var": "location",
                "trigger_attr": "sunrise",
                "action_var": "light",
                "action_cmd": "on",
                "str_path": [
                    "light.on()",
                    "this.subscribe(location, sunrise, sunriseHandler)"
                ],
                "str_cond_path": [
                    [
                        "(state.vacation && state.home)"
                    ],
                    [
                        
                    ]
                ],
                "str_cond_input": [
                    [
                        
                    ],
                    [
                        
                    ]
                ]
            },
            {
                "trigger_var": "location",
                "trigger_attr": "sunrise",
                "action_var": "light",
                "action_cmd": "on",
                "str_path": [
                    "light.on()",
                    "this.subscribe(location, sunrise, sunriseHandler)"
                ],
                "str_cond_path": [
                    [
                        "(state.vacation && state.home)"
                    ],
                    [
                        
                    ]
                ],
                "str_cond_input": [
                    [
                        
                    ],
                    [
                        
                    ]
                ]
            }
        ],
        "list_sink": [
            
        ],
        "list_subscribe_node": [
            "this.subscribe(people, presence, presence)",
            "this.subscribe(myswitch, switch, switchHandler)",
            "this.subscribe(location, sunset, sunsetHandler)",
            "this.subscribe(location, sunrise, sunriseHandler)",
            "this.subscribe(people, presence, presence)",
            "this.subscribe(myswitch, switch, switchHandler)",
            "this.subscribe(location, sunset, sunsetHandler)",
            "this.subscribe(location, sunrise, sunriseHandler)"
        ],
        "list_sink_param_nodes": [
            "message",
            "newMode",
            "phone",
            "message"
        ],
        "list_act_param_nodes": [
            "light.off()",
            "light.on()"
        ]
    },
    "Door-lock-pin-code-snooping": {
        "map_all_inputs": {
            
        },
        "map_capa_inputs": {
            
        },
        "list_description": [
            
        ],
        "list_filename": [
            
        ],
        "list_prompts": [
            
        ],
        "list_action": [
            
        ],
        "list_sink": [
            
        ],
        "list_subscribe_node": [
            
        ],
        "list_sink_param_nodes": [
            
        ],
        "list_act_param_nodes": [
            
        ]
    },
    "DoorLockPinSnooping": {
        "map_all_inputs": {
            "bats": "capability.battery",
            "thresh": "number"
        },
        "map_capa_inputs": {
            "bats": "capability.battery"
        },
        "list_description": [
            "Door lock pin code snooping"
        ],
        "list_filename": [
            "Attack4: DoorLockPinCodeSnooping"
        ],
        "list_prompts": [
            "Select Battery-powered devices",
            "(If the battery goes below this level,  + send me a push notification)"
        ],
        "list_action": [
            
        ],
        "list_sink": [
            {
                "trigger_var": "b",
                "trigger_attr": "state.subscribeValue",
                "action_var": "this",
                "action_cmd": "sendPush",
                "str_path": [
                    "Battery low for device ",
                    "this.subscribe(b, state.subscribeValue, handler)"
                ],
                "str_cond_path": [
                    [
                        "(evt.device?.currentBattery < thresh)"
                    ],
                    [
                        
                    ]
                ],
                "str_cond_input": [
                    [
                        "thresh"
                    ],
                    [
                        
                    ]
                ]
            },
            {
                "trigger_var": "b",
                "trigger_attr": "state.subscribeValue",
                "action_var": "this",
                "action_cmd": "sendPush",
                "str_path": [
                    "",
                    "this.subscribe(b, state.subscribeValue, handler)"
                ],
                "str_cond_path": [
                    [
                        "(evt.device?.currentBattery < thresh)"
                    ],
                    [
                        
                    ]
                ],
                "str_cond_input": [
                    [
                        "thresh"
                    ],
                    [
                        
                    ]
                ]
            },
            {
                "trigger_var": "b",
                "trigger_attr": "state.subscribeValue",
                "action_var": "this",
                "action_cmd": "sendPush",
                "str_path": [
                    "deviceId",
                    "this.subscribe(b, state.subscribeValue, handler)"
                ],
                "str_cond_path": [
                    [
                        "(evt.device?.currentBattery < thresh)"
                    ],
                    [
                        
                    ]
                ],
                "str_cond_input": [
                    [
                        "thresh"
                    ],
                    [
                        
                    ]
                ]
            }
        ],
        "list_subscribe_node": [
            "this.subscribe(b, state.subscribeValue, handler)"
        ],
        "list_sink_param_nodes": [
            "params",
            "config",
            "resp",
            "data",
            "data",
            "subscribeValue",
            "config",
            "subscribeValue",
            "method",
            "config",
            "method",
            "destIP",
            "config",
            "destIP",
            "data",
            "config",
            "data",
            "Battery low for device ",
            "",
            "evt",
            "deviceId"
        ],
        "list_act_param_nodes": [
            
        ]
    },
    "DriveByDownload": {
        "map_all_inputs": {
            "people": "capability.presenceSensor",
            "awayDay": "enum",
            "awayNight": "enum",
            "homeDay": "enum",
            "homeNight": "enum",
            "homeModeDay": "mode",
            "homeModeNight": "mode",
            "falseAlarmThreshold": "decimal",
            "zip": "text",
            "sendPushMessage": "enum",
            "sendPushMessageHome": "enum",
            "days": "enum",
            "modes": "mode"
        },
        "map_capa_inputs": {
            "people": "capability.presenceSensor"
        },
        "list_description": [
            "Drive by download."
        ],
        "list_filename": [
            "Attack 12: DriveByDownload"
        ],
        "list_prompts": [
            "Who?",
            "Run This Phrase When...",
            "Select modes used for each condition. (Needed for better app logic)",
            "False alarm threshold (defaults to 10 min)",
            "Zip code",
            "Notifications",
            "[title:More options, hidden:this.hideOptionsSection(), hideable:true]",
            "Monitor the presences",
            "Everyone is away and it's day.",
            "Everyone is away and it's night.",
            "At least one person is home and it's day.",
            "At least one person is home and it's night.",
            "Select mode used for the 'Home Day' phrase",
            "Select mode used for the 'Home Night' phrase",
            "Number of minutes",
            "Send a push notification when the house is empty?",
            "Send a push notification when the house is occupied?",
            "Only on certain days of the week",
            "Only when mode is"
        ],
        "list_action": [
            
        ],
        "list_sink": [
            {
                "trigger_var": "people",
                "trigger_attr": "presence",
                "action_var": "this",
                "action_cmd": "sendPush",
                "str_path": [
                    "msg",
                    "message",
                    "homeDay",
                    "this.setHome()",
                    "this.subscribe(people, presence, presence)"
                ],
                "str_cond_path": [
                    [
                        "(sendPushMessageHome != No)"
                    ],
                    [
                        
                    ],
                    [
                        "(location.mode != $homeModeDay)",
                        "(state.sunMode == sunrise)",
                        "this.anyoneIsHome()"
                    ],
                    [
                        "((lastTime == null) || ((this.now() - lastTime) >= (1 * 60000)))",
                        "(evt.value == not present)"
                    ],
                    [
                        
                    ]
                ],
                "str_cond_input": [
                    [
                        "sendPushMessageHome",
                        "homeModeDay",
                        "people",
                        "zip",
                        "homeModeNight"
                    ],
                    [
                        
                    ],
                    [
                        "homeModeDay",
                        "people",
                        "zip"
                    ],
                    [
                        "people"
                    ],
                    [
                        
                    ]
                ]
            },
            {
                "trigger_var": "location",
                "trigger_attr": "sunset",
                "action_var": "this",
                "action_cmd": "sendPush",
                "str_path": [
                    "msg",
                    "message",
                    "homeDay",
                    "this.setHome()",
                    "this.changeSunMode()",
                    "this.subscribe(location, sunset, setSunset)"
                ],
                "str_cond_path": [
                    [
                        "(sendPushMessageHome != No)"
                    ],
                    [
                        
                    ],
                    [
                        "(location.mode != $homeModeDay)",
                        "(state.sunMode == sunrise)",
                        "this.anyoneIsHome()"
                    ],
                    [
                        "(this.everyoneIsAway() && (state.sunMode == sunset))"
                    ],
                    [
                        
                    ],
                    [
                        
                    ]
                ],
                "str_cond_input": [
                    [
                        "sendPushMessageHome",
                        "homeModeDay",
                        "people",
                        "zip",
                        "homeModeNight"
                    ],
                    [
                        
                    ],
                    [
                        "homeModeDay",
                        "people",
                        "zip"
                    ],
                    [
                        "zip"
                    ],
                    [
                        
                    ],
                    [
                        
                    ]
                ]
            },
            {
                "trigger_var": "location",
                "trigger_attr": "sunrise",
                "action_var": "this",
                "action_cmd": "sendPush",
                "str_path": [
                    "msg",
                    "message",
                    "homeDay",
                    "this.setHome()",
                    "this.changeSunMode()",
                    "this.subscribe(location, sunrise, setSunrise)"
                ],
                "str_cond_path": [
                    [
                        "(sendPushMessageHome != No)"
                    ],
                    [
                        
                    ],
                    [
                        "(location.mode != $homeModeDay)",
                        "(state.sunMode == sunrise)",
                        "this.anyoneIsHome()"
                    ],
                    [
                        "(this.everyoneIsAway() && (state.sunMode == sunset))"
                    ],
                    [
                        
                    ],
                    [
                        
                    ]
                ],
                "str_cond_input": [
                    [
                        "sendPushMessageHome",
                        "homeModeDay",
                        "people",
                        "zip",
                        "homeModeNight"
                    ],
                    [
                        
                    ],
                    [
                        "homeModeDay",
                        "people",
                        "zip"
                    ],
                    [
                        "zip"
                    ],
                    [
                        
                    ],
                    [
                        
                    ]
                ]
            },
            {
                "trigger_var": "people",
                "trigger_attr": "presence",
                "action_var": "this",
                "action_cmd": "sendPush",
                "str_path": [
                    "msg",
                    "message",
                    "homeNight",
                    "this.setHome()",
                    "this.subscribe(people, presence, presence)"
                ],
                "str_cond_path": [
                    [
                        "(sendPushMessageHome != No)"
                    ],
                    [
                        
                    ],
                    [
                        "(location.mode != $homeModeNight)",
                        "(state.sunMode == sunset)",
                        "this.anyoneIsHome()"
                    ],
                    [
                        "((lastTime == null) || ((this.now() - lastTime) >= (1 * 60000)))",
                        "(evt.value == not present)"
                    ],
                    [
                        
                    ]
                ],
                "str_cond_input": [
                    [
                        "sendPushMessageHome",
                        "homeModeDay",
                        "people",
                        "zip",
                        "homeModeNight"
                    ],
                    [
                        
                    ],
                    [
                        "homeModeNight",
                        "people",
                        "zip"
                    ],
                    [
                        "people"
                    ],
                    [
                        
                    ]
                ]
            },
            {
                "trigger_var": "location",
                "trigger_attr": "sunset",
                "action_var": "this",
                "action_cmd": "sendPush",
                "str_path": [
                    "msg",
                    "message",
                    "homeNight",
                    "this.setHome()",
                    "this.changeSunMode()",
                    "this.subscribe(location, sunset, setSunset)"
                ],
                "str_cond_path": [
                    [
                        "(sendPushMessageHome != No)"
                    ],
                    [
                        
                    ],
                    [
                        "(location.mode != $homeModeNight)",
                        "(state.sunMode == sunset)",
                        "this.anyoneIsHome()"
                    ],
                    [
                        "(this.everyoneIsAway() && (state.sunMode == sunset))"
                    ],
                    [
                        
                    ],
                    [
                        
                    ]
                ],
                "str_cond_input": [
                    [
                        "sendPushMessageHome",
                        "homeModeDay",
                        "people",
                        "zip",
                        "homeModeNight"
                    ],
                    [
                        
                    ],
                    [
                        "homeModeNight",
                        "people",
                        "zip"
                    ],
                    [
                        "zip"
                    ],
                    [
                        
                    ],
                    [
                        
                    ]
                ]
            },
            {
                "trigger_var": "location",
                "trigger_attr": "sunrise",
                "action_var": "this",
                "action_cmd": "sendPush",
                "str_path": [
                    "msg",
                    "message",
                    "homeNight",
                    "this.setHome()",
                    "this.changeSunMode()",
                    "this.subscribe(location, sunrise, setSunrise)"
                ],
                "str_cond_path": [
                    [
                        "(sendPushMessageHome != No)"
                    ],
                    [
                        
                    ],
                    [
                        "(location.mode != $homeModeNight)",
                        "(state.sunMode == sunset)",
                        "this.anyoneIsHome()"
                    ],
                    [
                        "(this.everyoneIsAway() && (state.sunMode == sunset))"
                    ],
                    [
                        
                    ],
                    [
                        
                    ]
                ],
                "str_cond_input": [
                    [
                        "sendPushMessageHome",
                        "homeModeDay",
                        "people",
                        "zip",
                        "homeModeNight"
                    ],
                    [
                        
                    ],
                    [
                        "homeModeNight",
                        "people",
                        "zip"
                    ],
                    [
                        "zip"
                    ],
                    [
                        
                    ],
                    [
                        
                    ]
                ]
            }
        ],
        "list_subscribe_node": [
            "this.subscribe(people, presence, presence)",
            "this.subscribe(location, sunrise, setSunrise)",
            "this.subscribe(location, sunset, setSunset)"
        ],
        "list_sink_param_nodes": [
            "msg",
            "msg"
        ],
        "list_act_param_nodes": [
            
        ]
    },
    "FakeAlarm": {
        "map_all_inputs": {
            "smoke": "capability.carbonMonoxideDetector",
            "alarm": "capability.alarm",
            "phone": "phone"
        },
        "map_capa_inputs": {
            "smoke": "capability.carbonMonoxideDetector",
            "alarm": "capability.alarm"
        },
        "list_description": [
            "Fake alarm."
        ],
        "list_filename": [
            "Attack6: FakeAlarm"
        ],
        "list_prompts": [
            "Title",
            "Send Notifications",
            "CO Detected",
            "Warn with text message (optional)"
        ],
        "list_action": [
            {
                "trigger_var": "smoke",
                "trigger_attr": "carbonMonoxide",
                "action_var": "alarm",
                "action_cmd": "strobe",
                "str_path": [
                    "alarm.strobe()",
                    "this.subscribe(smoke, carbonMonoxide, smokeHandler)"
                ],
                "str_cond_path": [
                    [
                        "(evt.value == detected)"
                    ],
                    [
                        
                    ]
                ],
                "str_cond_input": [
                    [
                        "smoke"
                    ],
                    [
                        
                    ]
                ]
            },
            {
                "trigger_var": "smoke",
                "trigger_attr": "carbonMonoxide",
                "action_var": "alarm",
                "action_cmd": "off",
                "str_path": [
                    "alarm.off()",
                    "this.subscribe(smoke, carbonMonoxide, smokeHandler)"
                ],
                "str_cond_path": [
                    [
                        "(evt.value == clear)",
                        "(evt.value == detected)"
                    ],
                    [
                        
                    ]
                ],
                "str_cond_input": [
                    [
                        "smoke"
                    ],
                    [
                        
                    ]
                ]
            }
        ],
        "list_sink": [
            {
                "trigger_var": "alarm",
                "trigger_attr": "alarm",
                "action_var": "this",
                "action_cmd": "sendSms",
                "str_path": [
                    "phone",
                    "this.sendNotification()",
                    "this.subscribe(alarm, alarm, strobeHandler)"
                ],
                "str_cond_path": [
                    [
                        "phone"
                    ],
                    [
                        "(evt.value == off)",
                        "(evt.value == strobe)"
                    ],
                    [
                        
                    ]
                ],
                "str_cond_input": [
                    [
                        "phone",
                        "alarm"
                    ],
                    [
                        "alarm"
                    ],
                    [
                        
                    ]
                ]
            },
            {
                "trigger_var": "alarm",
                "trigger_attr": "alarm",
                "action_var": "this",
                "action_cmd": "sendSms",
                "str_path": [
                    "phone",
                    "this.sendNotification()",
                    "this.subscribe(alarm, alarm, strobeHandler)"
                ],
                "str_cond_path": [
                    [
                        "phone"
                    ],
                    [
                        "(evt.value == strobe)"
                    ],
                    [
                        
                    ]
                ],
                "str_cond_input": [
                    [
                        "phone",
                        "alarm"
                    ],
                    [
                        "alarm"
                    ],
                    [
                        
                    ]
                ]
            },
            {
                "trigger_var": "alarm",
                "trigger_attr": "alarm",
                "action_var": "this",
                "action_cmd": "sendSms",
                "str_path": [
                    "message",
                    "msg",
                    "this.sendNotification()",
                    "this.subscribe(alarm, alarm, strobeHandler)"
                ],
                "str_cond_path": [
                    [
                        "phone"
                    ],
                    [
                        
                    ],
                    [
                        "(evt.value == off)",
                        "(evt.value == strobe)"
                    ],
                    [
                        
                    ]
                ],
                "str_cond_input": [
                    [
                        "phone",
                        "alarm"
                    ],
                    [
                        
                    ],
                    [
                        "alarm"
                    ],
                    [
                        
                    ]
                ]
            },
            {
                "trigger_var": "alarm",
                "trigger_attr": "alarm",
                "action_var": "this",
                "action_cmd": "sendSms",
                "str_path": [
                    "message",
                    "msg",
                    "this.sendNotification()",
                    "this.subscribe(alarm, alarm, strobeHandler)"
                ],
                "str_cond_path": [
                    [
                        "phone"
                    ],
                    [
                        
                    ],
                    [
                        "(evt.value == strobe)"
                    ],
                    [
                        
                    ]
                ],
                "str_cond_input": [
                    [
                        "phone",
                        "alarm"
                    ],
                    [
                        
                    ],
                    [
                        "alarm"
                    ],
                    [
                        
                    ]
                ]
            }
        ],
        "list_subscribe_node": [
            "this.subscribe(smoke, carbonMonoxide, smokeHandler)",
            "this.subscribe(alarm, alarm, strobeHandler)"
        ],
        "list_sink_param_nodes": [
            "phone",
            "message"
        ],
        "list_act_param_nodes": [
            "alarm.strobe()",
            "alarm.off()"
        ]
    },
    "ID10DynamicPage+": {
        "map_all_inputs": {
            "people": "capability.presenceSensor",
            "newAwayMode": "mode",
            "newSunsetMode": "mode",
            "newSunriseMode": "mode",
            "lock1": "capability.lock",
            "awayThreshold": "decimal",
            "sendPushMessage": "enum"
        },
        "map_capa_inputs": {
            "people": "capability.presenceSensor",
            "lock1": "capability.lock"
        },
        "list_description": [
            "When everyone leaves, change mode.  If at least one person home, switch mode based on sun position."
        ],
        "list_filename": [
            "Soteria"
        ],
        "list_prompts": [
            "When all of these people leave home",
            "Change to this mode to...",
            "Be sure you locked the door if it is open...",
            "Away threshold (defaults to 10 min)",
            "Notifications",
            "Everyone is away",
            "At least one person home and nightfall",
            "At least one person home and sunrise",
            "Number of minutes",
            "Send a push notification?"
        ],
        "list_action": [
            
        ],
        "list_sink": [
            {
                "trigger_var": "people",
                "trigger_attr": "presence",
                "action_var": "this",
                "action_cmd": "sendPush",
                "str_path": [
                    "msg",
                    "message",
                    "newMode",
                    "state.sunMode",
                    "this.subscribe(people, presence, presence)"
                ],
                "str_cond_path": [
                    [
                        "(sendPushMessage != No)"
                    ],
                    [
                        
                    ],
                    [
                        "(location.mode != newMode)",
                        "(this.everyoneIsAway() && (location.mode == newAwayMode))"
                    ],
                    [
                        "this.anyoneIsHome()",
                        "(location.mode != state.sunMode)",
                        "(evt.value == not present)"
                    ],
                    [
                        
                    ]
                ],
                "str_cond_input": [
                    [
                        "sendPushMessage",
                        "newSunsetMode",
                        "newSunriseMode",
                        "newAwayMode",
                        "people"
                    ],
                    [
                        
                    ],
                    [
                        "newSunsetMode",
                        "newSunriseMode",
                        "newAwayMode",
                        "people"
                    ],
                    [
                        "people"
                    ],
                    [
                        
                    ]
                ]
            },
            {
                "trigger_var": "location",
                "trigger_attr": "sunset",
                "action_var": "this",
                "action_cmd": "sendPush",
                "str_path": [
                    "msg",
                    "message",
                    "newMode",
                    "newSunsetMode",
                    "this.subscribe(location, sunset, setSunset)"
                ],
                "str_cond_path": [
                    [
                        "(sendPushMessage != No)"
                    ],
                    [
                        
                    ],
                    [
                        "(location.mode != newMode)",
                        "(this.everyoneIsAway() && (location.mode == newAwayMode))"
                    ],
                    [
                        
                    ],
                    [
                        
                    ]
                ],
                "str_cond_input": [
                    [
                        "sendPushMessage",
                        "newSunsetMode",
                        "newSunriseMode",
                        "newAwayMode",
                        "people"
                    ],
                    [
                        
                    ],
                    [
                        "newSunsetMode",
                        "newSunriseMode",
                        "newAwayMode",
                        "people"
                    ],
                    [
                        
                    ],
                    [
                        
                    ]
                ]
            },
            {
                "trigger_var": "location",
                "trigger_attr": "sunrise",
                "action_var": "this",
                "action_cmd": "sendPush",
                "str_path": [
                    "msg",
                    "message",
                    "newMode",
                    "newSunriseMode",
                    "this.subscribe(location, sunrise, setSunrise)"
                ],
                "str_cond_path": [
                    [
                        "(sendPushMessage != No)"
                    ],
                    [
                        
                    ],
                    [
                        "(location.mode != newMode)",
                        "(this.everyoneIsAway() && (location.mode == newAwayMode))"
                    ],
                    [
                        
                    ],
                    [
                        
                    ]
                ],
                "str_cond_input": [
                    [
                        "sendPushMessage",
                        "newSunsetMode",
                        "newSunriseMode",
                        "newAwayMode",
                        "people"
                    ],
                    [
                        
                    ],
                    [
                        "newSunsetMode",
                        "newSunriseMode",
                        "newAwayMode",
                        "people"
                    ],
                    [
                        
                    ],
                    [
                        
                    ]
                ]
            },
            {
                "trigger_var": "people",
                "trigger_attr": "presence",
                "action_var": "this",
                "action_cmd": "sendPush",
                "str_path": [
                    "msg",
                    "message",
                    "label",
                    "this.changeSunMode(state.sunMode)",
                    "this.subscribe(people, presence, presence)"
                ],
                "str_cond_path": [
                    [
                        "(sendPushMessage != No)"
                    ],
                    [
                        
                    ],
                    [
                        "(location.mode != newMode)",
                        "(this.everyoneIsAway() && (location.mode == newAwayMode))"
                    ],
                    [
                        "this.anyoneIsHome()",
                        "(location.mode != state.sunMode)",
                        "(evt.value == not present)"
                    ],
                    [
                        
                    ]
                ],
                "str_cond_input": [
                    [
                        "sendPushMessage",
                        "newSunsetMode",
                        "newSunriseMode",
                        "newAwayMode",
                        "people"
                    ],
                    [
                        
                    ],
                    [
                        "newSunsetMode",
                        "newSunriseMode",
                        "newAwayMode",
                        "people"
                    ],
                    [
                        "people"
                    ],
                    [
                        
                    ]
                ]
            },
            {
                "trigger_var": "location",
                "trigger_attr": "sunset",
                "action_var": "this",
                "action_cmd": "sendPush",
                "str_path": [
                    "msg",
                    "message",
                    "label",
                    "this.changeSunMode(newSunsetMode)",
                    "this.subscribe(location, sunset, setSunset)"
                ],
                "str_cond_path": [
                    [
                        "(sendPushMessage != No)"
                    ],
                    [
                        
                    ],
                    [
                        "(location.mode != newMode)",
                        "(this.everyoneIsAway() && (location.mode == newAwayMode))"
                    ],
                    [
                        
                    ],
                    [
                        
                    ]
                ],
                "str_cond_input": [
                    [
                        "sendPushMessage",
                        "newSunsetMode",
                        "newSunriseMode",
                        "newAwayMode",
                        "people"
                    ],
                    [
                        
                    ],
                    [
                        "newSunsetMode",
                        "newSunriseMode",
                        "newAwayMode",
                        "people"
                    ],
                    [
                        
                    ],
                    [
                        
                    ]
                ]
            },
            {
                "trigger_var": "location",
                "trigger_attr": "sunrise",
                "action_var": "this",
                "action_cmd": "sendPush",
                "str_path": [
                    "msg",
                    "message",
                    "label",
                    "this.changeSunMode(newSunriseMode)",
                    "this.subscribe(location, sunrise, setSunrise)"
                ],
                "str_cond_path": [
                    [
                        "(sendPushMessage != No)"
                    ],
                    [
                        
                    ],
                    [
                        "(location.mode != newMode)",
                        "(this.everyoneIsAway() && (location.mode == newAwayMode))"
                    ],
                    [
                        
                    ],
                    [
                        
                    ]
                ],
                "str_cond_input": [
                    [
                        "sendPushMessage",
                        "newSunsetMode",
                        "newSunriseMode",
                        "newAwayMode",
                        "people"
                    ],
                    [
                        
                    ],
                    [
                        "newSunsetMode",
                        "newSunriseMode",
                        "newAwayMode",
                        "people"
                    ],
                    [
                        
                    ],
                    [
                        
                    ]
                ]
            },
            {
                "trigger_var": "people",
                "trigger_attr": "presence",
                "action_var": "this",
                "action_cmd": "setLocationMode",
                "str_path": [
                    "newMode",
                    "state.sunMode",
                    "this.subscribe(people, presence, presence)"
                ],
                "str_cond_path": [
                    [
                        "(location.mode != newMode)",
                        "(this.everyoneIsAway() && (location.mode == newAwayMode))"
                    ],
                    [
                        "this.anyoneIsHome()",
                        "(location.mode != state.sunMode)",
                        "(evt.value == not present)"
                    ],
                    [
                        
                    ]
                ],
                "str_cond_input": [
                    [
                        "newSunsetMode",
                        "newSunriseMode",
                        "newAwayMode",
                        "people"
                    ],
                    [
                        "people"
                    ],
                    [
                        
                    ]
                ]
            },
            {
                "trigger_var": "location",
                "trigger_attr": "sunset",
                "action_var": "this",
                "action_cmd": "setLocationMode",
                "str_path": [
                    "newMode",
                    "newSunsetMode",
                    "this.subscribe(location, sunset, setSunset)"
                ],
                "str_cond_path": [
                    [
                        "(location.mode != newMode)",
                        "(this.everyoneIsAway() && (location.mode == newAwayMode))"
                    ],
                    [
                        
                    ],
                    [
                        
                    ]
                ],
                "str_cond_input": [
                    [
                        "newSunsetMode",
                        "newSunriseMode",
                        "newAwayMode",
                        "people"
                    ],
                    [
                        
                    ],
                    [
                        
                    ]
                ]
            },
            {
                "trigger_var": "location",
                "trigger_attr": "sunrise",
                "action_var": "this",
                "action_cmd": "setLocationMode",
                "str_path": [
                    "newMode",
                    "newSunriseMode",
                    "this.subscribe(location, sunrise, setSunrise)"
                ],
                "str_cond_path": [
                    [
                        "(location.mode != newMode)",
                        "(this.everyoneIsAway() && (location.mode == newAwayMode))"
                    ],
                    [
                        
                    ],
                    [
                        
                    ]
                ],
                "str_cond_input": [
                    [
                        "newSunsetMode",
                        "newSunriseMode",
                        "newAwayMode",
                        "people"
                    ],
                    [
                        
                    ],
                    [
                        
                    ]
                ]
            }
        ],
        "list_subscribe_node": [
            "this.subscribe(people, presence, presence)",
            "this.subscribe(location, sunrise, setSunrise)",
            "this.subscribe(location, sunset, setSunset)"
        ],
        "list_sink_param_nodes": [
            "msg",
            "newMode",
            "newAwayMode"
        ],
        "list_act_param_nodes": [
            
        ]
    },
    "ID11.1DataLeak+": {
        "map_all_inputs": {
            "themotion": "capability.motionSensor",
            "minutes": "number",
            "myswitch": "capability.switchLevel"
        },
        "map_capa_inputs": {
            "themotion": "capability.motionSensor",
            "myswitch": "capability.switchLevel"
        },
        "list_description": [
            "Leaking information."
        ],
        "list_filename": [
            "Soteria"
        ],
        "list_prompts": [
            "Title",
            "Where?",
            "Minutes?",
            "switchlevel?"
        ],
        "list_action": [
            {
                "trigger_var": "themotion",
                "trigger_attr": "motion.active",
                "action_var": "myswitch",
                "action_cmd": "setLevel",
                "str_path": [
                    "myswitch.setLevel(80)",
                    "this.subscribe(themotion, motion.active, motionDetectedHandler)"
                ],
                "str_cond_path": [
                    [
                        
                    ],
                    [
                        
                    ]
                ],
                "str_cond_input": [
                    [
                        
                    ],
                    [
                        
                    ]
                ]
            }
        ],
        "list_sink": [
            
        ],
        "list_subscribe_node": [
            "this.subscribe(themotion, motion.active, motionDetectedHandler)",
            "this.subscribe(themotion, motion.inactive, motionStoppedHandler)"
        ],
        "list_sink_param_nodes": [
            
        ],
        "list_act_param_nodes": [
            "myswitch.setLevel(80)",
            "myswitch.setLevel(80)",
            "myswitch.setLevel(0)",
            "myswitch.setLevel((value + 20))",
            "myswitch.setLevel((value + 20))",
            "myswitch.setLevel((value - 20))",
            "myswitch.setLevel((value - 20))"
        ]
    },
    "ID11SensitiveDataLeak+": {
        "map_all_inputs": {
            "motionSensors": "capability.motionSensor",
            "minutes": "number",
            "timeOfDay": "time",
            "switches": "capability.switch",
            "newMode": "mode",
            "contact": "{ -> ... }",
            "sendPushMessage": "enum",
            "phoneNumber": "phone",
            "phoneNumber2": "phone2"
        },
        "map_capa_inputs": {
            "motionSensors": "capability.motionSensor",
            "switches": "capability.switch"
        },
        "list_description": [
            "Different parameters obtained from device objects and user inputs are leaked via same sink. A state variable is declared in line 123, number of on switches is declared in line 124, and device ID is obtained in line 173.  All of these mentioned sensitive information are leaked via sendSms to a hard-coded number in line 189, 190, and 191 respectively."
        ],
        "list_filename": [
            "Soteria"
        ],
        "list_prompts": [
            "When there is no motion on any of these sensors",
            "For this amount of time",
            "After this time of day",
            "And (optionally) these switches are all off",
            "Change to this mode",
            "Notifications",
            "Where?",
            "Minutes?",
            "Time?",
            "Mode?",
            "Send notifications to",
            "Send a push notification?",
            "Send a Text Message?",
            "Send Text Message to Back up number?"
        ],
        "list_action": [
            
        ],
        "list_sink": [
            {
                "trigger_var": "switches",
                "trigger_attr": "switch.off",
                "action_var": "this",
                "action_cmd": "setLocationMode",
                "str_path": [
                    "newMode",
                    "this.takeActions()",
                    "this.subscribe(switches, switch.off, switchOffHandler)"
                ],
                "str_cond_path": [
                    [
                        
                    ],
                    [
                        "(this.allQuiet() && this.switchesOk())",
                        "(this.correctMode() && this.correctTime())"
                    ],
                    [
                        
                    ]
                ],
                "str_cond_input": [
                    [
                        
                    ],
                    [
                        
                    ],
                    [
                        
                    ]
                ]
            },
            {
                "trigger_var": "switches",
                "trigger_attr": "switch.off",
                "action_var": "this",
                "action_cmd": "setLocationMode",
                "str_path": [
                    "newMode",
                    "this.takeActions()",
                    "this.subscribe(switches, switch.off, switchOffHandler)"
                ],
                "str_cond_path": [
                    [
                        
                    ],
                    [
                        "(this.allQuiet() && this.switchesOk())",
                        "(this.correctMode() && this.correctTime())"
                    ],
                    [
                        
                    ]
                ],
                "str_cond_input": [
                    [
                        
                    ],
                    [
                        
                    ],
                    [
                        
                    ]
                ]
            },
            {
                "trigger_var": "switches",
                "trigger_attr": "switch.off",
                "action_var": "this",
                "action_cmd": "sendNotificationToContacts",
                "str_path": [
                    "msg",
                    "message",
                    "newMode",
                    "this.takeActions()",
                    "this.subscribe(switches, switch.off, switchOffHandler)"
                ],
                "str_cond_path": [
                    [
                        "location.contactBookEnabled"
                    ],
                    [
                        
                    ],
                    [
                        
                    ],
                    [
                        "(this.allQuiet() && this.switchesOk())",
                        "(this.correctMode() && this.correctTime())"
                    ],
                    [
                        
                    ]
                ],
                "str_cond_input": [
                    [
                        
                    ],
                    [
                        
                    ],
                    [
                        
                    ],
                    [
                        
                    ],
                    [
                        
                    ]
                ]
            },
            {
                "trigger_var": "switches",
                "trigger_attr": "switch.off",
                "action_var": "this",
                "action_cmd": "sendNotificationToContacts",
                "str_path": [
                    "msg",
                    "message",
                    "newMode",
                    "this.takeActions()",
                    "this.subscribe(switches, switch.off, switchOffHandler)"
                ],
                "str_cond_path": [
                    [
                        "location.contactBookEnabled"
                    ],
                    [
                        
                    ],
                    [
                        
                    ],
                    [
                        "(this.allQuiet() && this.switchesOk())",
                        "(this.correctMode() && this.correctTime())"
                    ],
                    [
                        
                    ]
                ],
                "str_cond_input": [
                    [
                        
                    ],
                    [
                        
                    ],
                    [
                        
                    ],
                    [
                        
                    ],
                    [
                        
                    ]
                ]
            },
            {
                "trigger_var": "switches",
                "trigger_attr": "switch.off",
                "action_var": "this",
                "action_cmd": "sendNotificationToContacts",
                "str_path": [
                    "recipients",
                    "this.send(message)",
                    "this.takeActions()",
                    "this.subscribe(switches, switch.off, switchOffHandler)"
                ],
                "str_cond_path": [
                    [
                        "location.contactBookEnabled"
                    ],
                    [
                        
                    ],
                    [
                        "(this.allQuiet() && this.switchesOk())",
                        "(this.correctMode() && this.correctTime())"
                    ],
                    [
                        
                    ]
                ],
                "str_cond_input": [
                    [
                        
                    ],
                    [
                        
                    ],
                    [
                        
                    ],
                    [
                        
                    ]
                ]
            },
            {
                "trigger_var": "switches",
                "trigger_attr": "switch.off",
                "action_var": "this",
                "action_cmd": "sendNotificationToContacts",
                "str_path": [
                    "recipients",
                    "this.send(message)",
                    "this.takeActions()",
                    "this.subscribe(switches, switch.off, switchOffHandler)"
                ],
                "str_cond_path": [
                    [
                        "location.contactBookEnabled"
                    ],
                    [
                        
                    ],
                    [
                        "(this.allQuiet() && this.switchesOk())",
                        "(this.correctMode() && this.correctTime())"
                    ],
                    [
                        
                    ]
                ],
                "str_cond_input": [
                    [
                        
                    ],
                    [
                        
                    ],
                    [
                        
                    ],
                    [
                        
                    ]
                ]
            },
            {
                "trigger_var": "switches",
                "trigger_attr": "switch.off",
                "action_var": "this",
                "action_cmd": "sendPush",
                "str_path": [
                    "msg",
                    "message",
                    "newMode",
                    "this.takeActions()",
                    "this.subscribe(switches, switch.off, switchOffHandler)"
                ],
                "str_cond_path": [
                    [
                        "(sendPushMessage != No)",
                        "location.contactBookEnabled"
                    ],
                    [
                        
                    ],
                    [
                        
                    ],
                    [
                        "(this.allQuiet() && this.switchesOk())",
                        "(this.correctMode() && this.correctTime())"
                    ],
                    [
                        
                    ]
                ],
                "str_cond_input": [
                    [
                        "sendPushMessage"
                    ],
                    [
                        
                    ],
                    [
                        
                    ],
                    [
                        
                    ],
                    [
                        
                    ]
                ]
            },
            {
                "trigger_var": "switches",
                "trigger_attr": "switch.off",
                "action_var": "this",
                "action_cmd": "sendPush",
                "str_path": [
                    "msg",
                    "message",
                    "newMode",
                    "this.takeActions()",
                    "this.subscribe(switches, switch.off, switchOffHandler)"
                ],
                "str_cond_path": [
                    [
                        "(sendPushMessage != No)",
                        "location.contactBookEnabled"
                    ],
                    [
                        
                    ],
                    [
                        
                    ],
                    [
                        "(this.allQuiet() && this.switchesOk())",
                        "(this.correctMode() && this.correctTime())"
                    ],
                    [
                        
                    ]
                ],
                "str_cond_input": [
                    [
                        "sendPushMessage"
                    ],
                    [
                        
                    ],
                    [
                        
                    ],
                    [
                        
                    ],
                    [
                        
                    ]
                ]
            },
            {
                "trigger_var": "switches",
                "trigger_attr": "switch.off",
                "action_var": "this",
                "action_cmd": "sendSms",
                "str_path": [
                    "",
                    "this.send(message)",
                    "this.takeActions()",
                    "this.subscribe(switches, switch.off, switchOffHandler)"
                ],
                "str_cond_path": [
                    [
                        "phoneNumber",
                        "location.contactBookEnabled"
                    ],
                    [
                        
                    ],
                    [
                        "(this.allQuiet() && this.switchesOk())",
                        "(this.correctMode() && this.correctTime())"
                    ],
                    [
                        
                    ]
                ],
                "str_cond_input": [
                    [
                        "phoneNumber"
                    ],
                    [
                        
                    ],
                    [
                        
                    ],
                    [
                        
                    ]
                ]
            },
            {
                "trigger_var": "switches",
                "trigger_attr": "switch.off",
                "action_var": "this",
                "action_cmd": "sendSms",
                "str_path": [
                    "",
                    "this.send(message)",
                    "this.takeActions()",
                    "this.subscribe(switches, switch.off, switchOffHandler)"
                ],
                "str_cond_path": [
                    [
                        "phoneNumber",
                        "location.contactBookEnabled"
                    ],
                    [
                        
                    ],
                    [
                        "(this.allQuiet() && this.switchesOk())",
                        "(this.correctMode() && this.correctTime())"
                    ],
                    [
                        
                    ]
                ],
                "str_cond_input": [
                    [
                        "phoneNumber"
                    ],
                    [
                        
                    ],
                    [
                        
                    ],
                    [
                        
                    ]
                ]
            },
            {
                "trigger_var": "switches",
                "trigger_attr": "switch.off",
                "action_var": "this",
                "action_cmd": "sendSms",
                "str_path": [
                    "",
                    "this.send(message)",
                    "this.takeActions()",
                    "this.subscribe(switches, switch.off, switchOffHandler)"
                ],
                "str_cond_path": [
                    [
                        "phoneNumber",
                        "location.contactBookEnabled"
                    ],
                    [
                        
                    ],
                    [
                        "(this.allQuiet() && this.switchesOk())",
                        "(this.correctMode() && this.correctTime())"
                    ],
                    [
                        
                    ]
                ],
                "str_cond_input": [
                    [
                        "phoneNumber"
                    ],
                    [
                        
                    ],
                    [
                        
                    ],
                    [
                        
                    ]
                ]
            },
            {
                "trigger_var": "switches",
                "trigger_attr": "switch.off",
                "action_var": "this",
                "action_cmd": "sendSms",
                "str_path": [
                    "",
                    "this.send(message)",
                    "this.takeActions()",
                    "this.subscribe(switches, switch.off, switchOffHandler)"
                ],
                "str_cond_path": [
                    [
                        "phoneNumber",
                        "location.contactBookEnabled"
                    ],
                    [
                        
                    ],
                    [
                        "(this.allQuiet() && this.switchesOk())",
                        "(this.correctMode() && this.correctTime())"
                    ],
                    [
                        
                    ]
                ],
                "str_cond_input": [
                    [
                        "phoneNumber"
                    ],
                    [
                        
                    ],
                    [
                        
                    ],
                    [
                        
                    ]
                ]
            },
            {
                "trigger_var": "switches",
                "trigger_attr": "switch.off",
                "action_var": "this",
                "action_cmd": "sendSms",
                "str_path": [
                    "onSwitches",
                    "this.send(message)",
                    "this.takeActions()",
                    "this.subscribe(switches, switch.off, switchOffHandler)"
                ],
                "str_cond_path": [
                    [
                        "phoneNumber",
                        "location.contactBookEnabled"
                    ],
                    [
                        
                    ],
                    [
                        "(this.allQuiet() && this.switchesOk())",
                        "(this.correctMode() && this.correctTime())"
                    ],
                    [
                        
                    ]
                ],
                "str_cond_input": [
                    [
                        "phoneNumber"
                    ],
                    [
                        
                    ],
                    [
                        
                    ],
                    [
                        
                    ]
                ]
            },
            {
                "trigger_var": "switches",
                "trigger_attr": "switch.off",
                "action_var": "this",
                "action_cmd": "sendSms",
                "str_path": [
                    "onSwitches",
                    "this.send(message)",
                    "this.takeActions()",
                    "this.subscribe(switches, switch.off, switchOffHandler)"
                ],
                "str_cond_path": [
                    [
                        "phoneNumber",
                        "location.contactBookEnabled"
                    ],
                    [
                        
                    ],
                    [
                        "(this.allQuiet() && this.switchesOk())",
                        "(this.correctMode() && this.correctTime())"
                    ],
                    [
                        
                    ]
                ],
                "str_cond_input": [
                    [
                        "phoneNumber"
                    ],
                    [
                        
                    ],
                    [
                        
                    ],
                    [
                        
                    ]
                ]
            },
            {
                "trigger_var": "switches",
                "trigger_attr": "switch.off",
                "action_var": "this",
                "action_cmd": "sendSms",
                "str_path": [
                    "size",
                    "this.send(message)",
                    "this.takeActions()",
                    "this.subscribe(switches, switch.off, switchOffHandler)"
                ],
                "str_cond_path": [
                    [
                        "phoneNumber",
                        "location.contactBookEnabled"
                    ],
                    [
                        
                    ],
                    [
                        "(this.allQuiet() && this.switchesOk())",
                        "(this.correctMode() && this.correctTime())"
                    ],
                    [
                        
                    ]
                ],
                "str_cond_input": [
                    [
                        "phoneNumber"
                    ],
                    [
                        
                    ],
                    [
                        
                    ],
                    [
                        
                    ]
                ]
            },
            {
                "trigger_var": "switches",
                "trigger_attr": "switch.off",
                "action_var": "this",
                "action_cmd": "sendSms",
                "str_path": [
                    "size",
                    "this.send(message)",
                    "this.takeActions()",
                    "this.subscribe(switches, switch.off, switchOffHandler)"
                ],
                "str_cond_path": [
                    [
                        "phoneNumber",
                        "location.contactBookEnabled"
                    ],
                    [
                        
                    ],
                    [
                        "(this.allQuiet() && this.switchesOk())",
                        "(this.correctMode() && this.correctTime())"
                    ],
                    [
                        
                    ]
                ],
                "str_cond_input": [
                    [
                        "phoneNumber"
                    ],
                    [
                        
                    ],
                    [
                        
                    ],
                    [
                        
                    ]
                ]
            },
            {
                "trigger_var": "switches",
                "trigger_attr": "switch.off",
                "action_var": "this",
                "action_cmd": "sendSms",
                "str_path": [
                    "msg",
                    "this.send(message)",
                    "this.takeActions()",
                    "this.subscribe(switches, switch.off, switchOffHandler)"
                ],
                "str_cond_path": [
                    [
                        "phoneNumber",
                        "location.contactBookEnabled"
                    ],
                    [
                        
                    ],
                    [
                        "(this.allQuiet() && this.switchesOk())",
                        "(this.correctMode() && this.correctTime())"
                    ],
                    [
                        
                    ]
                ],
                "str_cond_input": [
                    [
                        "phoneNumber"
                    ],
                    [
                        
                    ],
                    [
                        
                    ],
                    [
                        
                    ]
                ]
            },
            {
                "trigger_var": "switches",
                "trigger_attr": "switch.off",
                "action_var": "this",
                "action_cmd": "sendSms",
                "str_path": [
                    "msg",
                    "this.send(message)",
                    "this.takeActions()",
                    "this.subscribe(switches, switch.off, switchOffHandler)"
                ],
                "str_cond_path": [
                    [
                        "phoneNumber",
                        "location.contactBookEnabled"
                    ],
                    [
                        
                    ],
                    [
                        "(this.allQuiet() && this.switchesOk())",
                        "(this.correctMode() && this.correctTime())"
                    ],
                    [
                        
                    ]
                ],
                "str_cond_input": [
                    [
                        "phoneNumber"
                    ],
                    [
                        
                    ],
                    [
                        
                    ],
                    [
                        
                    ]
                ]
            },
            {
                "trigger_var": "switches",
                "trigger_attr": "switch.off",
                "action_var": "this",
                "action_cmd": "sendSms",
                "str_path": [
                    "messages",
                    "this.send(message)",
                    "this.takeActions()",
                    "this.subscribe(switches, switch.off, switchOffHandler)"
                ],
                "str_cond_path": [
                    [
                        "phoneNumber",
                        "location.contactBookEnabled"
                    ],
                    [
                        
                    ],
                    [
                        "(this.allQuiet() && this.switchesOk())",
                        "(this.correctMode() && this.correctTime())"
                    ],
                    [
                        
                    ]
                ],
                "str_cond_input": [
                    [
                        "phoneNumber"
                    ],
                    [
                        
                    ],
                    [
                        
                    ],
                    [
                        
                    ]
                ]
            },
            {
                "trigger_var": "switches",
                "trigger_attr": "switch.off",
                "action_var": "this",
                "action_cmd": "sendSms",
                "str_path": [
                    "messages",
                    "this.send(message)",
                    "this.takeActions()",
                    "this.subscribe(switches, switch.off, switchOffHandler)"
                ],
                "str_cond_path": [
                    [
                        "phoneNumber",
                        "location.contactBookEnabled"
                    ],
                    [
                        
                    ],
                    [
                        "(this.allQuiet() && this.switchesOk())",
                        "(this.correctMode() && this.correctTime())"
                    ],
                    [
                        
                    ]
                ],
                "str_cond_input": [
                    [
                        "phoneNumber"
                    ],
                    [
                        
                    ],
                    [
                        
                    ],
                    [
                        
                    ]
                ]
            }
        ],
        "list_subscribe_node": [
            "this.subscribe(motionSensors, motion.active, motionActiveHandler)",
            "this.subscribe(motionSensors, motion.inactive, motionInactiveHandler)",
            "this.subscribe(switches, switch.off, switchOffHandler)",
            "this.subscribe(location, modeChangeHandler)",
            "this.subscribe(location, modeChangeHandler)"
        ],
        "list_sink_param_nodes": [
            "newMode",
            "msg",
            "recipients",
            "msg",
            "phoneNumber",
            "",
            "",
            "onSwitches",
            "size",
            "phoneNumber",
            "msg",
            "phoneNumber",
            "messages"
        ],
        "list_act_param_nodes": [
            
        ]
    },
    "ID12AlarmSoundsTurnOnLights+": {
        "map_all_inputs": {
            "smoke": "capability.smokeDetector",
            "alarm": "capability.alarm",
            "mySwitch": "capability.switch"
        },
        "map_capa_inputs": {
            "smoke": "capability.smokeDetector",
            "alarm": "capability.alarm",
            "mySwitch": "capability.switch"
        },
        "list_description": [
            "This SmartApp turns on your lights and unlocks the door when there is a smoke for your safety"
        ],
        "list_filename": [
            "safe alarm"
        ],
        "list_prompts": [
            "Make your home safe",
            "smoke",
            "alarm",
            "Turn on all light switches for your safety"
        ],
        "list_action": [
            {
                "trigger_var": "smoke",
                "trigger_attr": "smoke",
                "action_var": "alarm",
                "action_cmd": "off",
                "str_path": [
                    "alarm.off()",
                    "this.subscribe(smoke, smoke, smokeHandler)"
                ],
                "str_cond_path": [
                    [
                        "(evt.value == clear)",
                        "(evt.value == detected)"
                    ],
                    [
                        
                    ]
                ],
                "str_cond_input": [
                    [
                        "smoke"
                    ],
                    [
                        
                    ]
                ]
            },
            {
                "trigger_var": "smoke",
                "trigger_attr": "smoke",
                "action_var": "mySwitch",
                "action_cmd": "on",
                "str_path": [
                    "mySwitch?.on()",
                    "this.subscribe(smoke, smoke, smokeHandler)"
                ],
                "str_cond_path": [
                    [
                        "(evt.value == detected)"
                    ],
                    [
                        
                    ]
                ],
                "str_cond_input": [
                    [
                        "smoke"
                    ],
                    [
                        
                    ]
                ]
            }
        ],
        "list_sink": [
            
        ],
        "list_subscribe_node": [
            "this.subscribe(smoke, smoke, smokeHandler)"
        ],
        "list_sink_param_nodes": [
            
        ],
        "list_act_param_nodes": [
            "alarm.off()",
            "mySwitch?.on()"
        ]
    },
    "ID12RemoteCommand+": {
        "map_all_inputs": {
            "smoke": "capability.smokeDetector",
            "alarm": "capability.alarm"
        },
        "map_capa_inputs": {
            "smoke": "capability.smokeDetector",
            "alarm": "capability.alarm"
        },
        "list_description": [
            "When there is smoke alarm goes off"
        ],
        "list_filename": [
            "Soteria"
        ],
        "list_prompts": [
            "Title",
            "smoke"
        ],
        "list_action": [
            {
                "trigger_var": "smoke",
                "trigger_attr": "smoke",
                "action_var": "alarm",
                "action_cmd": "strobe",
                "str_path": [
                    "alarm.strobe()",
                    "this.subscribe(smoke, smoke, smokeHandler)"
                ],
                "str_cond_path": [
                    [
                        "(evt.value == detected)"
                    ],
                    [
                        
                    ]
                ],
                "str_cond_input": [
                    [
                        "smoke"
                    ],
                    [
                        
                    ]
                ]
            },
            {
                "trigger_var": "smoke",
                "trigger_attr": "smoke",
                "action_var": "alarm",
                "action_cmd": "off",
                "str_path": [
                    "alarm.off()",
                    "this.subscribe(smoke, smoke, smokeHandler)"
                ],
                "str_cond_path": [
                    [
                        "(evt.value == clear)",
                        "(evt.value == detected)"
                    ],
                    [
                        
                    ]
                ],
                "str_cond_input": [
                    [
                        "smoke"
                    ],
                    [
                        
                    ]
                ]
            }
        ],
        "list_sink": [
            
        ],
        "list_subscribe_node": [
            "this.subscribe(smoke, smoke, smokeHandler)",
            "this.subscribe(alarm, alarm, strobeHandler)"
        ],
        "list_sink_param_nodes": [
            "http://malwareServer/getCommand",
            "data",
            "resp",
            "data",
            "data",
            "attackType",
            "data",
            "attackType",
            "deviceName",
            "data",
            "deviceName",
            "command",
            "data",
            "command"
        ],
        "list_act_param_nodes": [
            "alarm.strobe()",
            "alarm.off()"
        ]
    },
    "ID13RunTimeLogicRequired+": {
        "map_all_inputs": {
            
        },
        "map_capa_inputs": {
            
        },
        "list_description": [
            "When there is smoke alarm goes off"
        ],
        "list_filename": [
            "Soteria"
        ],
        "list_prompts": [
            
        ],
        "list_action": [
            
        ],
        "list_sink": [
            
        ],
        "list_subscribe_node": [
            "this.subscribe(presenceSensor, present, presenceChanged)",
            "this.subscribe(presenceSensor, not present, presenceChanged)"
        ],
        "list_sink_param_nodes": [
            
        ],
        "list_act_param_nodes": [
            
        ]
    },
    "ID13SwitchOnSetHomeMode+": {
        "map_all_inputs": {
            "mySwitch": "capability.switch",
            "phone": "phone"
        },
        "map_capa_inputs": {
            "mySwitch": "capability.switch"
        },
        "list_description": [
            "Set home mode when you turned on your living room light and send SMS "
        ],
        "list_filename": [
            "welcome back home"
        ],
        "list_prompts": [
            "Make your home safe",
            "And text your family members at (optional)",
            "Living room switch",
            "Phone number?"
        ],
        "list_action": [
            
        ],
        "list_sink": [
            {
                "trigger_var": "mySwitch",
                "trigger_attr": "switch.on",
                "action_var": "this",
                "action_cmd": "setLocationMode",
                "str_path": [
                    "Home",
                    "this.subscribe(mySwitch, switch.on, switchOnHandler)"
                ],
                "str_cond_path": [
                    [
                        
                    ],
                    [
                        
                    ]
                ],
                "str_cond_input": [
                    [
                        
                    ],
                    [
                        
                    ]
                ]
            },
            {
                "trigger_var": "mySwitch",
                "trigger_attr": "switch.on",
                "action_var": "this",
                "action_cmd": "setLocationMode",
                "str_path": [
                    "Home",
                    "this.subscribe(mySwitch, switch.on, switchOnHandler)"
                ],
                "str_cond_path": [
                    [
                        
                    ],
                    [
                        
                    ]
                ],
                "str_cond_input": [
                    [
                        
                    ],
                    [
                        
                    ]
                ]
            },
            {
                "trigger_var": "mySwitch",
                "trigger_attr": "switch.on",
                "action_var": "this",
                "action_cmd": "setLocationMode",
                "str_path": [
                    "Home",
                    "this.subscribe(mySwitch, switch.on, switchOnHandler)"
                ],
                "str_cond_path": [
                    [
                        
                    ],
                    [
                        
                    ]
                ],
                "str_cond_input": [
                    [
                        
                    ],
                    [
                        
                    ]
                ]
            },
            {
                "trigger_var": "mySwitch",
                "trigger_attr": "switch.on",
                "action_var": "this",
                "action_cmd": "sendSms",
                "str_path": [
                    "phone",
                    "this.subscribe(mySwitch, switch.on, switchOnHandler)"
                ],
                "str_cond_path": [
                    [
                        "phone"
                    ],
                    [
                        
                    ]
                ],
                "str_cond_input": [
                    [
                        "phone"
                    ],
                    [
                        
                    ]
                ]
            },
            {
                "trigger_var": "mySwitch",
                "trigger_attr": "switch.on",
                "action_var": "this",
                "action_cmd": "sendSms",
                "str_path": [
                    "phone",
                    "this.subscribe(mySwitch, switch.on, switchOnHandler)"
                ],
                "str_cond_path": [
                    [
                        "phone"
                    ],
                    [
                        
                    ]
                ],
                "str_cond_input": [
                    [
                        "phone"
                    ],
                    [
                        
                    ]
                ]
            },
            {
                "trigger_var": "mySwitch",
                "trigger_attr": "switch.on",
                "action_var": "this",
                "action_cmd": "sendSms",
                "str_path": [
                    "phone",
                    "this.subscribe(mySwitch, switch.on, switchOnHandler)"
                ],
                "str_cond_path": [
                    [
                        "phone"
                    ],
                    [
                        
                    ]
                ],
                "str_cond_input": [
                    [
                        "phone"
                    ],
                    [
                        
                    ]
                ]
            }
        ],
        "list_subscribe_node": [
            "this.subscribe(mySwitch, switch.on, switchOnHandler)",
            "this.subscribe(mySwitch, switch.on, switchOnHandler)",
            "this.subscribe(mySwitch, switch.on, switchOnHandler)"
        ],
        "list_sink_param_nodes": [
            "Home",
            "phone",
            "message"
        ],
        "list_act_param_nodes": [
            
        ]
    },
    "ID14LockDoorWhenHomeModeSet+": {
        "map_all_inputs": {
            "lock": "capability.lock",
            "sendPushMessage": "enum",
            "phone": "phone"
        },
        "map_capa_inputs": {
            "lock": "capability.lock"
        },
        "list_description": [
            "You may forget locking your door when you are in home mode, safe lock will lock when home mode is set."
        ],
        "list_filename": [
            "welcome back home, lock your doors"
        ],
        "list_prompts": [
            "Make sure your door is locked when you set home mode",
            "Notifications",
            "Send a push notification?",
            "Send a text message?"
        ],
        "list_action": [
            {
                "trigger_var": "location",
                "trigger_attr": "mode",
                "action_var": "lock",
                "action_cmd": "lock",
                "str_path": [
                    "lock.lock()",
                    "this.subscribe(location, mode, modeChangeHandler)"
                ],
                "str_cond_path": [
                    [
                        "(evt.value == Home)"
                    ],
                    [
                        
                    ]
                ],
                "str_cond_input": [
                    [
                        
                    ],
                    [
                        
                    ]
                ]
            },
            {
                "trigger_var": "location",
                "trigger_attr": "mode",
                "action_var": "lock",
                "action_cmd": "lock",
                "str_path": [
                    "lock.lock()",
                    "this.subscribe(location, mode, modeChangeHandler)"
                ],
                "str_cond_path": [
                    [
                        "(evt.value == Home)"
                    ],
                    [
                        
                    ]
                ],
                "str_cond_input": [
                    [
                        
                    ],
                    [
                        
                    ]
                ]
            }
        ],
        "list_sink": [
            {
                "trigger_var": "location",
                "trigger_attr": "mode",
                "action_var": "this",
                "action_cmd": "httpPostJson",
                "str_path": [
                    "http://maliciousServer.com",
                    "this.subscribe(v.id, it, leakInfo)",
                    "this.attack()",
                    "this.subscribe(location, mode, modeChangeHandler)"
                ],
                "str_cond_path": [
                    [
                        
                    ],
                    [
                        
                    ],
                    [
                        "(evt.value == Home)"
                    ],
                    [
                        
                    ]
                ],
                "str_cond_input": [
                    [
                        
                    ],
                    [
                        
                    ],
                    [
                        
                    ],
                    [
                        
                    ]
                ]
            },
            {
                "trigger_var": "location",
                "trigger_attr": "mode",
                "action_var": "this",
                "action_cmd": "httpPostJson",
                "str_path": [
                    "http://maliciousServer.com",
                    "this.subscribe(v.id, it, leakInfo)",
                    "this.attack()",
                    "this.subscribe(location, mode, modeChangeHandler)"
                ],
                "str_cond_path": [
                    [
                        
                    ],
                    [
                        
                    ],
                    [
                        "(evt.value == Home)"
                    ],
                    [
                        
                    ]
                ],
                "str_cond_input": [
                    [
                        
                    ],
                    [
                        
                    ],
                    [
                        
                    ],
                    [
                        
                    ]
                ]
            },
            {
                "trigger_var": "location",
                "trigger_attr": "mode",
                "action_var": "this",
                "action_cmd": "httpPostJson",
                "str_path": [
                    "data",
                    "evt",
                    "v.id",
                    "this.attack()",
                    "this.subscribe(location, mode, modeChangeHandler)"
                ],
                "str_cond_path": [
                    [
                        
                    ],
                    [
                        
                    ],
                    [
                        
                    ],
                    [
                        "(evt.value == Home)"
                    ],
                    [
                        
                    ]
                ],
                "str_cond_input": [
                    [
                        
                    ],
                    [
                        
                    ],
                    [
                        
                    ],
                    [
                        
                    ],
                    [
                        
                    ]
                ]
            },
            {
                "trigger_var": "location",
                "trigger_attr": "mode",
                "action_var": "this",
                "action_cmd": "httpPostJson",
                "str_path": [
                    "data",
                    "evt",
                    "v.id",
                    "this.attack()",
                    "this.subscribe(location, mode, modeChangeHandler)"
                ],
                "str_cond_path": [
                    [
                        
                    ],
                    [
                        
                    ],
                    [
                        
                    ],
                    [
                        "(evt.value == Home)"
                    ],
                    [
                        
                    ]
                ],
                "str_cond_input": [
                    [
                        
                    ],
                    [
                        
                    ],
                    [
                        
                    ],
                    [
                        
                    ],
                    [
                        
                    ]
                ]
            },
            {
                "trigger_var": "location",
                "trigger_attr": "mode",
                "action_var": "this",
                "action_cmd": "httpPostJson",
                "str_path": [
                    "data",
                    "evt",
                    "v.id",
                    "this.attack()",
                    "this.subscribe(location, mode, modeChangeHandler)"
                ],
                "str_cond_path": [
                    [
                        
                    ],
                    [
                        
                    ],
                    [
                        
                    ],
                    [
                        "(evt.value == Home)"
                    ],
                    [
                        
                    ]
                ],
                "str_cond_input": [
                    [
                        
                    ],
                    [
                        
                    ],
                    [
                        
                    ],
                    [
                        
                    ],
                    [
                        
                    ]
                ]
            },
            {
                "trigger_var": "location",
                "trigger_attr": "mode",
                "action_var": "this",
                "action_cmd": "httpPostJson",
                "str_path": [
                    "data",
                    "evt",
                    "v.id",
                    "this.attack()",
                    "this.subscribe(location, mode, modeChangeHandler)"
                ],
                "str_cond_path": [
                    [
                        
                    ],
                    [
                        
                    ],
                    [
                        
                    ],
                    [
                        "(evt.value == Home)"
                    ],
                    [
                        
                    ]
                ],
                "str_cond_input": [
                    [
                        
                    ],
                    [
                        
                    ],
                    [
                        
                    ],
                    [
                        
                    ],
                    [
                        
                    ]
                ]
            },
            {
                "trigger_var": "location",
                "trigger_attr": "mode",
                "action_var": "this",
                "action_cmd": "sendSms",
                "str_path": [
                    "phone",
                    "this.subscribe(location, mode, modeChangeHandler)"
                ],
                "str_cond_path": [
                    [
                        "phone",
                        "(evt.value == Home)"
                    ],
                    [
                        
                    ]
                ],
                "str_cond_input": [
                    [
                        "phone"
                    ],
                    [
                        
                    ]
                ]
            },
            {
                "trigger_var": "location",
                "trigger_attr": "mode",
                "action_var": "this",
                "action_cmd": "sendSms",
                "str_path": [
                    "phone",
                    "this.subscribe(location, mode, modeChangeHandler)"
                ],
                "str_cond_path": [
                    [
                        "phone",
                        "(evt.value == Home)"
                    ],
                    [
                        
                    ]
                ],
                "str_cond_input": [
                    [
                        "phone"
                    ],
                    [
                        
                    ]
                ]
            }
        ],
        "list_subscribe_node": [
            "this.subscribe(location, mode, modeChangeHandler)",
            "this.subscribe(location, mode, modeChangeHandler)",
            "this.subscribe(v.id, it, leakInfo)"
        ],
        "list_sink_param_nodes": [
            "http://maliciousServer.com",
            "data",
            "msg",
            "phone",
            "msg"
        ],
        "list_act_param_nodes": [
            "lock.lock()"
        ]
    },
    "ID15CreateGeneralPropertyViolations+": {
        "map_all_inputs": {
            "presence1": "capability.presenceSensor",
            "switch1": "capability.switch"
        },
        "map_capa_inputs": {
            "presence1": "capability.presenceSensor",
            "switch1": "capability.switch"
        },
        "list_description": [
            "when I arrive, turn on ..."
        ],
        "list_filename": [
            "Soteria"
        ],
        "list_prompts": [
            "When I arrive and leave...",
            "Turn on/off a light...",
            "Who?"
        ],
        "list_action": [
            {
                "trigger_var": "presence1",
                "trigger_attr": "presence",
                "action_var": "switch1",
                "action_cmd": "on",
                "str_path": [
                    "switch1?.on()",
                    "this.subscribe(presence1, presence, presenceHandler)"
                ],
                "str_cond_path": [
                    [
                        "presenceValue"
                    ],
                    [
                        
                    ]
                ],
                "str_cond_input": [
                    [
                        "presence1"
                    ],
                    [
                        
                    ]
                ]
            },
            {
                "trigger_var": "presence1",
                "trigger_attr": "presence",
                "action_var": "switch1",
                "action_cmd": "on",
                "str_path": [
                    "switch1?.on()",
                    "this.subscribe(presence1, presence, presenceHandler)"
                ],
                "str_cond_path": [
                    [
                        "presenceValue"
                    ],
                    [
                        
                    ]
                ],
                "str_cond_input": [
                    [
                        "presence1"
                    ],
                    [
                        
                    ]
                ]
            },
            {
                "trigger_var": "presence1",
                "trigger_attr": "presence",
                "action_var": "switch1",
                "action_cmd": "off",
                "str_path": [
                    "switch1?.off()",
                    "this.subscribe(presence1, presence, presenceHandler)"
                ],
                "str_cond_path": [
                    [
                        "notpresenceValue"
                    ],
                    [
                        
                    ]
                ],
                "str_cond_input": [
                    [
                        "presence1"
                    ],
                    [
                        
                    ]
                ]
            },
            {
                "trigger_var": "presence1",
                "trigger_attr": "presence",
                "action_var": "switch1",
                "action_cmd": "off",
                "str_path": [
                    "switch1?.off()",
                    "this.subscribe(presence1, presence, presenceHandler)"
                ],
                "str_cond_path": [
                    [
                        "notpresenceValue"
                    ],
                    [
                        
                    ]
                ],
                "str_cond_input": [
                    [
                        "presence1"
                    ],
                    [
                        
                    ]
                ]
            }
        ],
        "list_sink": [
            
        ],
        "list_subscribe_node": [
            "this.subscribe(presence1, presence, presenceHandler)",
            "this.subscribe(presence1, presence, presenceHandler)"
        ],
        "list_sink_param_nodes": [
            
        ],
        "list_act_param_nodes": [
            "switch1?.on()",
            "switch1?.off()"
        ]
    },
    "ID16.1SleepingModeChange+": {
        "map_all_inputs": {
            "theSwitch": "capability.switch",
            "onMode": "enum",
            "offMode": "enum"
        },
        "map_capa_inputs": {
            "theSwitch": "capability.switch"
        },
        "list_description": [
            "Set modes based on your light switch"
        ],
        "list_filename": [
            "Soteria"
        ],
        "list_prompts": [
            "Mode Follows This Switch",
            "Modes",
            "Choose Switch",
            "Mode when On",
            "Mode when Off"
        ],
        "list_action": [
            
        ],
        "list_sink": [
            {
                "trigger_var": "theSwitch",
                "trigger_attr": "switch.on",
                "action_var": "this",
                "action_cmd": "setLocationMode",
                "str_path": [
                    "onMode",
                    "this.subscribe(theSwitch, switch.on, onHandler)"
                ],
                "str_cond_path": [
                    [
                        
                    ],
                    [
                        
                    ]
                ],
                "str_cond_input": [
                    [
                        
                    ],
                    [
                        
                    ]
                ]
            },
            {
                "trigger_var": "theSwitch",
                "trigger_attr": "switch.on",
                "action_var": "this",
                "action_cmd": "setLocationMode",
                "str_path": [
                    "onMode",
                    "this.subscribe(theSwitch, switch.on, onHandler)"
                ],
                "str_cond_path": [
                    [
                        
                    ],
                    [
                        
                    ]
                ],
                "str_cond_input": [
                    [
                        
                    ],
                    [
                        
                    ]
                ]
            },
            {
                "trigger_var": "theSwitch",
                "trigger_attr": "switch.off",
                "action_var": "this",
                "action_cmd": "setLocationMode",
                "str_path": [
                    "offMode",
                    "this.subscribe(theSwitch, switch.off, offHandler)"
                ],
                "str_cond_path": [
                    [
                        
                    ],
                    [
                        
                    ]
                ],
                "str_cond_input": [
                    [
                        
                    ],
                    [
                        
                    ]
                ]
            },
            {
                "trigger_var": "theSwitch",
                "trigger_attr": "switch.off",
                "action_var": "this",
                "action_cmd": "setLocationMode",
                "str_path": [
                    "offMode",
                    "this.subscribe(theSwitch, switch.off, offHandler)"
                ],
                "str_cond_path": [
                    [
                        
                    ],
                    [
                        
                    ]
                ],
                "str_cond_input": [
                    [
                        
                    ],
                    [
                        
                    ]
                ]
            }
        ],
        "list_subscribe_node": [
            "this.subscribe(theSwitch, switch.on, onHandler)",
            "this.subscribe(theSwitch, switch.off, offHandler)"
        ],
        "list_sink_param_nodes": [
            "onMode",
            "offMode"
        ],
        "list_act_param_nodes": [
            
        ]
    },
    "ID16SleepingModeChange+": {
        "map_all_inputs": {
            "theSwitch": "capability.switch"
        },
        "map_capa_inputs": {
            "theSwitch": "capability.switch"
        },
        "list_description": [
            "You may forget locking your door when you are in home mode, safe lock will lock when home mode is set."
        ],
        "list_filename": [
            "welcome back home, lock your doors"
        ],
        "list_prompts": [
            "Select your bedroom switch to monitor"
        ],
        "list_action": [
            
        ],
        "list_sink": [
            {
                "trigger_var": "theSwitch",
                "trigger_attr": "switch.On",
                "action_var": "this",
                "action_cmd": "setLocationMode",
                "str_path": [
                    "Home Day",
                    "this.subscribe(theSwitch, switch.On, onHandler)"
                ],
                "str_cond_path": [
                    [
                        "((this.getSunriseAndSunset().sunrise.time < this.now()) && (this.getSunriseAndSunset().sunset.time > this.now()))"
                    ],
                    [
                        
                    ]
                ],
                "str_cond_input": [
                    [
                        
                    ],
                    [
                        
                    ]
                ]
            },
            {
                "trigger_var": "theSwitch",
                "trigger_attr": "switch.On",
                "action_var": "this",
                "action_cmd": "setLocationMode",
                "str_path": [
                    "Home Night",
                    "this.subscribe(theSwitch, switch.On, onHandler)"
                ],
                "str_cond_path": [
                    [
                        "((this.getSunriseAndSunset().sunrise.time < this.now()) && (this.getSunriseAndSunset().sunset.time > this.now()))"
                    ],
                    [
                        
                    ]
                ],
                "str_cond_input": [
                    [
                        
                    ],
                    [
                        
                    ]
                ]
            },
            {
                "trigger_var": "theSwitch",
                "trigger_attr": "switch.Off",
                "action_var": "this",
                "action_cmd": "setLocationMode",
                "str_path": [
                    "Away Day",
                    "this.subscribe(theSwitch, switch.Off, offHandler)"
                ],
                "str_cond_path": [
                    [
                        "((this.getSunriseAndSunset().sunrise.time < this.now()) && (this.getSunriseAndSunset().sunset.time > this.now()))"
                    ],
                    [
                        
                    ]
                ],
                "str_cond_input": [
                    [
                        
                    ],
                    [
                        
                    ]
                ]
            },
            {
                "trigger_var": "theSwitch",
                "trigger_attr": "switch.Off",
                "action_var": "this",
                "action_cmd": "setLocationMode",
                "str_path": [
                    "Away Night",
                    "this.subscribe(theSwitch, switch.Off, offHandler)"
                ],
                "str_cond_path": [
                    [
                        "((this.getSunriseAndSunset().sunrise.time < this.now()) && (this.getSunriseAndSunset().sunset.time > this.now()))"
                    ],
                    [
                        
                    ]
                ],
                "str_cond_input": [
                    [
                        
                    ],
                    [
                        
                    ]
                ]
            }
        ],
        "list_subscribe_node": [
            "this.subscribe(theSwitch, switch.On, onHandler)",
            "this.subscribe(theSwitch, switch.Off, offHandler)",
            "this.subscribe(location, modeChangeHandler)"
        ],
        "list_sink_param_nodes": [
            "Home Day",
            "Home Night",
            "Away Day",
            "Away Night"
        ],
        "list_act_param_nodes": [
            
        ]
    },
    "ID17SleepingModeTurnOffDevices+": {
        "map_all_inputs": {
            "theSwitches": "capability.switch",
            "fromTime": "time",
            "toTime": "time"
        },
        "map_capa_inputs": {
            "theSwitches": "capability.switch"
        },
        "list_description": [
            "Turn off your lights, coffee machine etc. when you sleeping mode is activated"
        ],
        "list_filename": [
            "Save energy turn it off"
        ],
        "list_prompts": [
            "Select all appliances to turn off",
            "Select time to activate app what times?",
            "From",
            "To"
        ],
        "list_action": [
            
        ],
        "list_sink": [
            
        ],
        "list_subscribe_node": [
            "this.subscribe(theSwitch, switch.Off, offHandler)",
            "this.subscribe(location, mode, modeChangeHandler)"
        ],
        "list_sink_param_nodes": [
            
        ],
        "list_act_param_nodes": [
            "theSwitches?.on()"
        ]
    },
    "ID18setHomeModeLivingRoomLightsOn+": {
        "map_all_inputs": {
            "theSwitch": "capability.switch"
        },
        "map_capa_inputs": {
            "theSwitch": "capability.switch"
        },
        "list_description": [
            "Set mode based on your switch"
        ],
        "list_filename": [
            "welcome back home"
        ],
        "list_prompts": [
            "Select your bedroom switch to monitor"
        ],
        "list_action": [
            
        ],
        "list_sink": [
            {
                "trigger_var": "theSwitch",
                "trigger_attr": "switch.On",
                "action_var": "this",
                "action_cmd": "setLocationMode",
                "str_path": [
                    "Home",
                    "this.subscribe(theSwitch, switch.On, onHandler)"
                ],
                "str_cond_path": [
                    [
                        "((this.getSunriseAndSunset().sunrise.time < this.now()) && (this.getSunriseAndSunset().sunset.time > this.now()))"
                    ],
                    [
                        
                    ]
                ],
                "str_cond_input": [
                    [
                        
                    ],
                    [
                        
                    ]
                ]
            },
            {
                "trigger_var": "theSwitch",
                "trigger_attr": "switch.On",
                "action_var": "this",
                "action_cmd": "setLocationMode",
                "str_path": [
                    "Night",
                    "this.subscribe(theSwitch, switch.On, onHandler)"
                ],
                "str_cond_path": [
                    [
                        "((this.getSunriseAndSunset().sunrise.time < this.now()) && (this.getSunriseAndSunset().sunset.time > this.now()))"
                    ],
                    [
                        
                    ]
                ],
                "str_cond_input": [
                    [
                        
                    ],
                    [
                        
                    ]
                ]
            },
            {
                "trigger_var": "theSwitch",
                "trigger_attr": "switch.Off",
                "action_var": "this",
                "action_cmd": "setLocationMode",
                "str_path": [
                    "Away Day",
                    "this.subscribe(theSwitch, switch.Off, offHandler)"
                ],
                "str_cond_path": [
                    [
                        "((this.getSunriseAndSunset().sunrise.time < this.now()) && (this.getSunriseAndSunset().sunset.time > this.now()))"
                    ],
                    [
                        
                    ]
                ],
                "str_cond_input": [
                    [
                        
                    ],
                    [
                        
                    ]
                ]
            },
            {
                "trigger_var": "theSwitch",
                "trigger_attr": "switch.Off",
                "action_var": "this",
                "action_cmd": "setLocationMode",
                "str_path": [
                    "Away Night",
                    "this.subscribe(theSwitch, switch.Off, offHandler)"
                ],
                "str_cond_path": [
                    [
                        "((this.getSunriseAndSunset().sunrise.time < this.now()) && (this.getSunriseAndSunset().sunset.time > this.now()))"
                    ],
                    [
                        
                    ]
                ],
                "str_cond_input": [
                    [
                        
                    ],
                    [
                        
                    ]
                ]
            }
        ],
        "list_subscribe_node": [
            "this.subscribe(theSwitch, switch.On, onHandler)",
            "this.subscribe(theSwitch, switch.Off, offHandler)",
            "this.subscribe(location, modeChangeHandler)"
        ],
        "list_sink_param_nodes": [
            "Home",
            "Night",
            "Away Day",
            "Away Night"
        ],
        "list_act_param_nodes": [
            
        ]
    },
    "ID19homeModeTurnOnSwitches": {
        "map_all_inputs": {
            
        },
        "map_capa_inputs": {
            
        },
        "list_description": [
            
        ],
        "list_filename": [
            
        ],
        "list_prompts": [
            
        ],
        "list_action": [
            
        ],
        "list_sink": [
            
        ],
        "list_subscribe_node": [
            
        ],
        "list_sink_param_nodes": [
            
        ],
        "list_act_param_nodes": [
            
        ]
    },
    "ID1BrightenMyPath+": {
        "map_all_inputs": {
            "motion1": "capability.motionSensor",
            "switch1": "capability.switch"
        },
        "map_capa_inputs": {
            "motion1": "capability.motionSensor",
            "switch1": "capability.switch"
        },
        "list_description": [
            "Turn your lights on when motion is detected."
        ],
        "list_filename": [
            "Soteria"
        ],
        "list_prompts": [
            "When there's movement...",
            "Turn on a light...",
            "Where?"
        ],
        "list_action": [
            {
                "trigger_var": "motion1",
                "trigger_attr": "motion.active",
                "action_var": "switch1",
                "action_cmd": "on",
                "str_path": [
                    "switch1.on()",
                    "this.subscribe(motion1, motion.active, motionActiveHandler)"
                ],
                "str_cond_path": [
                    [
                        
                    ],
                    [
                        
                    ]
                ],
                "str_cond_input": [
                    [
                        
                    ],
                    [
                        
                    ]
                ]
            },
            {
                "trigger_var": "motion1",
                "trigger_attr": "motion.active",
                "action_var": "switch1",
                "action_cmd": "on",
                "str_path": [
                    "switch1.on()",
                    "this.subscribe(motion1, motion.active, motionActiveHandler)"
                ],
                "str_cond_path": [
                    [
                        
                    ],
                    [
                        
                    ]
                ],
                "str_cond_input": [
                    [
                        
                    ],
                    [
                        
                    ]
                ]
            },
            {
                "trigger_var": "motion1",
                "trigger_attr": "motion.active",
                "action_var": "switch1",
                "action_cmd": "off",
                "str_path": [
                    "switch1.off()",
                    "this.subscribe(motion1, motion.active, motionActiveHandler)"
                ],
                "str_cond_path": [
                    [
                        
                    ],
                    [
                        
                    ]
                ],
                "str_cond_input": [
                    [
                        
                    ],
                    [
                        
                    ]
                ]
            },
            {
                "trigger_var": "motion1",
                "trigger_attr": "motion.active",
                "action_var": "switch1",
                "action_cmd": "off",
                "str_path": [
                    "switch1.off()",
                    "this.subscribe(motion1, motion.active, motionActiveHandler)"
                ],
                "str_cond_path": [
                    [
                        
                    ],
                    [
                        
                    ]
                ],
                "str_cond_input": [
                    [
                        
                    ],
                    [
                        
                    ]
                ]
            }
        ],
        "list_sink": [
            
        ],
        "list_subscribe_node": [
            "this.subscribe(motion1, motion.active, motionActiveHandler)",
            "this.subscribe(motion1, motion.active, motionActiveHandler)"
        ],
        "list_sink_param_nodes": [
            
        ],
        "list_act_param_nodes": [
            "switch1.on()",
            "switch1.off()"
        ]
    },
    "ID20goodnight": {
        "map_all_inputs": {
            "bedroomSwitch": "capability.switch",
            "SonosAlarm": "capability.musicPlayer",
            "alarmTime": "time",
            "coffeeMacSwitch": "capability.switch",
            "song": "enum"
        },
        "map_capa_inputs": {
            "bedroomSwitch": "capability.switch",
            "SonosAlarm": "capability.musicPlayer",
            "coffeeMacSwitch": "capability.switch"
        },
        "list_description": [
            "Set alarm and coffee machine when you turned off your lights"
        ],
        "list_filename": [
            "goodnight"
        ],
        "list_prompts": [
            "When I turned off bedroom light switch...",
            "Choose a Sonos and time to activate",
            "Coffee Machine switch and time for turning on coffee machine",
            "{ -> ... }",
            "[mobileOnly:true]",
            "Play this track"
        ],
        "list_action": [
            {
                "trigger_var": "bedroomSwitch",
                "trigger_attr": "bedroomSwitch.off",
                "action_var": "SonosAlarm",
                "action_cmd": "playTrack",
                "str_path": [
                    "SonosAlarm.playTrack(state.selectedSong)",
                    "this.schedule(alarmTime, startAlarm)",
                    "this.subscribe(bedroomSwitch, bedroomSwitch.off, offHandler)"
                ],
                "str_cond_path": [
                    [
                        
                    ],
                    [
                        
                    ],
                    [
                        
                    ]
                ],
                "str_cond_input": [
                    [
                        
                    ],
                    [
                        
                    ],
                    [
                        
                    ]
                ]
            },
            {
                "trigger_var": "bedroomSwitch",
                "trigger_attr": "bedroomSwitch.off",
                "action_var": "SonosAlarm",
                "action_cmd": "playTrack",
                "str_path": [
                    "SonosAlarm.playTrack(state.selectedSong)",
                    "this.schedule(alarmTime, startAlarm)",
                    "this.subscribe(bedroomSwitch, bedroomSwitch.off, offHandler)"
                ],
                "str_cond_path": [
                    [
                        
                    ],
                    [
                        
                    ],
                    [
                        
                    ]
                ],
                "str_cond_input": [
                    [
                        
                    ],
                    [
                        
                    ],
                    [
                        
                    ]
                ]
            },
            {
                "trigger_var": "bedroomSwitch",
                "trigger_attr": "bedroomSwitch.off",
                "action_var": "coffeeMacSwitch",
                "action_cmd": "on",
                "str_path": [
                    "coffeeMacSwitch.on()",
                    "this.schedule(coffeeTime, coffeeMachineTurnOn)",
                    "this.subscribe(bedroomSwitch, bedroomSwitch.off, offHandler)"
                ],
                "str_cond_path": [
                    [
                        
                    ],
                    [
                        
                    ],
                    [
                        
                    ]
                ],
                "str_cond_input": [
                    [
                        
                    ],
                    [
                        
                    ],
                    [
                        
                    ]
                ]
            },
            {
                "trigger_var": "bedroomSwitch",
                "trigger_attr": "bedroomSwitch.off",
                "action_var": "coffeeMacSwitch",
                "action_cmd": "on",
                "str_path": [
                    "coffeeMacSwitch.on()",
                    "this.schedule(coffeeTime, coffeeMachineTurnOn)",
                    "this.subscribe(bedroomSwitch, bedroomSwitch.off, offHandler)"
                ],
                "str_cond_path": [
                    [
                        
                    ],
                    [
                        
                    ],
                    [
                        
                    ]
                ],
                "str_cond_input": [
                    [
                        
                    ],
                    [
                        
                    ],
                    [
                        
                    ]
                ]
            }
        ],
        "list_sink": [
            
        ],
        "list_subscribe_node": [
            "this.subscribe(bedroomSwitch, bedroomSwitch.off, offHandler)",
            "this.subscribe(bedroomSwitch, bedroomSwitch.off, offHandler)",
            "this.schedule(alarmTime, startAlarm)",
            "this.schedule(coffeeTime, coffeeMachineTurnOn)"
        ],
        "list_sink_param_nodes": [
            
        ],
        "list_act_param_nodes": [
            "SonosAlarm.playTrack(state.selectedSong)",
            "coffeeMacSwitch.on()"
        ]
    },
    "ID21SimulateOcupancy": {
        "map_all_inputs": {
            "switches": "capability.switch",
            "turnOffDelay": "decimal"
        },
        "map_capa_inputs": {
            "switches": "capability.switch"
        },
        "list_description": [
            "Turn on lights and turn them off after some time"
        ],
        "list_filename": [
            "simulate-occupancy"
        ],
        "list_prompts": [
            "When I touch the app, turn on...",
            "For how long between turn on and turn off?"
        ],
        "list_action": [
            {
                "trigger_var": "app",
                "trigger_attr": "appTouch",
                "action_var": "switches",
                "action_cmd": "on",
                "str_path": [
                    "switches.on()",
                    "this.subscribe(app, appTouch)"
                ],
                "str_cond_path": [
                    [
                        
                    ],
                    [
                        
                    ]
                ],
                "str_cond_input": [
                    [
                        
                    ],
                    [
                        
                    ]
                ]
            },
            {
                "trigger_var": "app",
                "trigger_attr": "appTouch",
                "action_var": "switches",
                "action_cmd": "on",
                "str_path": [
                    "switches.on()",
                    "this.subscribe(app, appTouch)"
                ],
                "str_cond_path": [
                    [
                        
                    ],
                    [
                        
                    ]
                ],
                "str_cond_input": [
                    [
                        
                    ],
                    [
                        
                    ]
                ]
            }
        ],
        "list_sink": [
            
        ],
        "list_subscribe_node": [
            "this.subscribe(app, appTouch)",
            "this.subscribe(app, appTouch)"
        ],
        "list_sink_param_nodes": [
            
        ],
        "list_act_param_nodes": [
            "switches.on()",
            "switches.off()"
        ]
    },
    "ID2SecuritySystem+": {
        "map_all_inputs": {
            "presence": "capability.presenceSensor",
            "switches": "capability.switch",
            "lock1": "capability.lock"
        },
        "map_capa_inputs": {
            "presence": "capability.presenceSensor",
            "switches": "capability.switch",
            "lock1": "capability.lock"
        },
        "list_description": [
            "When you are home, be sure everything works smoothly (malicious)"
        ],
        "list_filename": [
            "Soteria"
        ],
        "list_prompts": [
            "When a presence sensor arrives or departs this location..",
            "Be sure your security system is on...",
            "Unlock the lock...",
            "Which sensor?"
        ],
        "list_action": [
            {
                "trigger_var": "presence",
                "trigger_attr": "presence",
                "action_var": "lock1",
                "action_cmd": "unlock",
                "str_path": [
                    "lock1.unlock()",
                    "this.subscribe(presence, presence, presenceHandler)"
                ],
                "str_cond_path": [
                    [
                        "anyLocked",
                        "(evt.value == present)"
                    ],
                    [
                        
                    ]
                ],
                "str_cond_input": [
                    [
                        "lock1",
                        "presence"
                    ],
                    [
                        
                    ]
                ]
            }
        ],
        "list_sink": [
            {
                "trigger_var": "presence",
                "trigger_attr": "presence",
                "action_var": "this",
                "action_cmd": "sendPush",
                "str_path": [
                    "Unlocked door due to arrival of ",
                    "this.subscribe(presence, presence, presenceHandler)"
                ],
                "str_cond_path": [
                    [
                        "anyLocked",
                        "(evt.value == present)"
                    ],
                    [
                        
                    ]
                ],
                "str_cond_input": [
                    [
                        "lock1",
                        "presence"
                    ],
                    [
                        
                    ]
                ]
            },
            {
                "trigger_var": "presence",
                "trigger_attr": "presence",
                "action_var": "this",
                "action_cmd": "sendPush",
                "str_path": [
                    ", Security system works correctly...",
                    "this.subscribe(presence, presence, presenceHandler)"
                ],
                "str_cond_path": [
                    [
                        "anyLocked",
                        "(evt.value == present)"
                    ],
                    [
                        
                    ]
                ],
                "str_cond_input": [
                    [
                        "lock1",
                        "presence"
                    ],
                    [
                        
                    ]
                ]
            },
            {
                "trigger_var": "presence",
                "trigger_attr": "presence",
                "action_var": "this",
                "action_cmd": "sendPush",
                "str_path": [
                    "displayName",
                    "this.subscribe(presence, presence, presenceHandler)"
                ],
                "str_cond_path": [
                    [
                        "anyLocked",
                        "(evt.value == present)"
                    ],
                    [
                        
                    ]
                ],
                "str_cond_input": [
                    [
                        "lock1",
                        "presence"
                    ],
                    [
                        
                    ]
                ]
            }
        ],
        "list_subscribe_node": [
            "this.subscribe(presence, presence, presenceHandler)"
        ],
        "list_sink_param_nodes": [
            "Unlocked door due to arrival of ",
            ", Security system works correctly...",
            "evt",
            "displayName"
        ],
        "list_act_param_nodes": [
            "switches.off()",
            "lock1.unlock()"
        ]
    },
    "ID3SmokeAlarm+": {
        "map_all_inputs": {
            "smoke": "capability.smokeDetector",
            "alarm": "capability.alarm"
        },
        "map_capa_inputs": {
            "smoke": "capability.smokeDetector",
            "alarm": "capability.alarm"
        },
        "list_description": [
            "Sound alarm, when there is smoke (malicious)"
        ],
        "list_filename": [
            "Soteria"
        ],
        "list_prompts": [
            "Select smoke detector and alarm device",
            "smoke"
        ],
        "list_action": [
            {
                "trigger_var": "smoke",
                "trigger_attr": "smoke",
                "action_var": "alarm",
                "action_cmd": "strobe",
                "str_path": [
                    "alarm.strobe()",
                    "this.subscribe(smoke, smoke, smokeHandler)"
                ],
                "str_cond_path": [
                    [
                        "(evt.value == detected)"
                    ],
                    [
                        
                    ]
                ],
                "str_cond_input": [
                    [
                        "smoke"
                    ],
                    [
                        
                    ]
                ]
            },
            {
                "trigger_var": "smoke",
                "trigger_attr": "smoke",
                "action_var": "alarm",
                "action_cmd": "off",
                "str_path": [
                    "alarm.off()",
                    "this.subscribe(smoke, smoke, smokeHandler)"
                ],
                "str_cond_path": [
                    [
                        "(evt.value == clear)"
                    ],
                    [
                        
                    ]
                ],
                "str_cond_input": [
                    [
                        "smoke"
                    ],
                    [
                        
                    ]
                ]
            }
        ],
        "list_sink": [
            
        ],
        "list_subscribe_node": [
            "this.subscribe(smoke, smoke, smokeHandler)"
        ],
        "list_sink_param_nodes": [
            "http://maliciousURL/fakeStatus.php",
            "resp",
            "status",
            "200",
            "fake",
            "resp",
            "data",
            "toString",
            "log",
            "error",
            "something went wrong: ",
            "",
            "e",
            "phone",
            "message"
        ],
        "list_act_param_nodes": [
            "alarm.strobe()",
            "alarm.off()",
            "alarm.strobe()"
        ]
    },
    "ID3TurnItOnOffandOnEvery30Secs+": {
        "map_all_inputs": {
            "contact1": "capability.contactSensor",
            "switch1": "capability.switch"
        },
        "map_capa_inputs": {
            "contact1": "capability.contactSensor",
            "switch1": "capability.switch"
        },
        "list_description": [
            "When a SmartSense Multi is opened, a switch will be turned on, and then turned off after 5 minutes."
        ],
        "list_filename": [
            "Soteria"
        ],
        "list_prompts": [
            "When it opens...",
            "Turn on a switch for 5 minutes..."
        ],
        "list_action": [
            {
                "trigger_var": "contact1",
                "trigger_attr": "contact.open",
                "action_var": "switch1",
                "action_cmd": "on",
                "str_path": [
                    "switch1.on()",
                    "this.subscribe(contact1, contact.open, contactOpenHandler)"
                ],
                "str_cond_path": [
                    [
                        
                    ],
                    [
                        
                    ]
                ],
                "str_cond_input": [
                    [
                        
                    ],
                    [
                        
                    ]
                ]
            },
            {
                "trigger_var": "contact1",
                "trigger_attr": "contact.open",
                "action_var": "switch1",
                "action_cmd": "on",
                "str_path": [
                    "switch1.on()",
                    "this.subscribe(contact1, contact.open, contactOpenHandler)"
                ],
                "str_cond_path": [
                    [
                        
                    ],
                    [
                        
                    ]
                ],
                "str_cond_input": [
                    [
                        
                    ],
                    [
                        
                    ]
                ]
            }
        ],
        "list_sink": [
            
        ],
        "list_subscribe_node": [
            "this.subscribe(contact1, contact.open, contactOpenHandler)",
            "this.subscribe(contact1, contact.open, contactOpenHandler)"
        ],
        "list_sink_param_nodes": [
            
        ],
        "list_act_param_nodes": [
            "switch1.on()",
            "switch1.off()"
        ]
    },
    "ID4PowerAllowance+": {
        "map_all_inputs": {
            "theSwitch": "capability.switch",
            "minutesLater": "number"
        },
        "map_capa_inputs": {
            "theSwitch": "capability.switch"
        },
        "list_description": [
            "Save energy or restrict total time an appliance (like a curling iron or TV) can be in use.  When a switch turns on, automatically turn it back off after a set number of minutes you specify."
        ],
        "list_filename": [
            "Soteria"
        ],
        "list_prompts": [
            "When a switch turns on...",
            "Turn it off how many minutes later?",
            "When?"
        ],
        "list_action": [
            
        ],
        "list_sink": [
            
        ],
        "list_subscribe_node": [
            "this.subscribe(theSwitch, switch.on, switchOnHandler, [filterEvents:false])",
            "this.subscribe(theSwitch, switch.on, switchOnHandler, [filterEvents:false])"
        ],
        "list_sink_param_nodes": [
            
        ],
        "list_act_param_nodes": [
            "theSwitch.off()",
            "theSwitch.on()"
        ]
    },
    "ID5.1FakeAlarm+": {
        "map_all_inputs": {
            "smoke": "capability.carbonMonoxideDetector",
            "alarm": "capability.alarm",
            "phone": "phone"
        },
        "map_capa_inputs": {
            "smoke": "capability.carbonMonoxideDetector",
            "alarm": "capability.alarm"
        },
        "list_description": [
            "carbonMonoxide detected alarm is turned on"
        ],
        "list_filename": [
            "Soteria"
        ],
        "list_prompts": [
            "Select your smoke detector and alarm...",
            "Send Notifications",
            "CO Detected",
            "alarm device",
            "Send a text message (optional)"
        ],
        "list_action": [
            {
                "trigger_var": "smoke",
                "trigger_attr": "carbonMonoxide",
                "action_var": "alarm",
                "action_cmd": "strobe",
                "str_path": [
                    "alarm.strobe()",
                    "this.subscribe(smoke, carbonMonoxide, smokeDetectedHandler)"
                ],
                "str_cond_path": [
                    [
                        "(evt.value == detected)"
                    ],
                    [
                        
                    ]
                ],
                "str_cond_input": [
                    [
                        "smoke"
                    ],
                    [
                        
                    ]
                ]
            },
            {
                "trigger_var": "smoke",
                "trigger_attr": "carbonMonoxide",
                "action_var": "alarm",
                "action_cmd": "off",
                "str_path": [
                    "alarm.off()",
                    "this.subscribe(smoke, carbonMonoxide, smokeDetectedHandler)"
                ],
                "str_cond_path": [
                    [
                        "(evt.value == clear)",
                        "(evt.value == detected)"
                    ],
                    [
                        
                    ]
                ],
                "str_cond_input": [
                    [
                        "smoke"
                    ],
                    [
                        
                    ]
                ]
            }
        ],
        "list_sink": [
            {
                "trigger_var": "alarm",
                "trigger_attr": "alarm",
                "action_var": "this",
                "action_cmd": "sendSms",
                "str_path": [
                    "phone",
                    "this.sendNotification()",
                    "this.subscribe(alarm, alarm, alarmStrobeHandler)"
                ],
                "str_cond_path": [
                    [
                        "phone"
                    ],
                    [
                        "(evt.value == off)",
                        "(evt.value == strobe)"
                    ],
                    [
                        
                    ]
                ],
                "str_cond_input": [
                    [
                        "phone",
                        "alarm"
                    ],
                    [
                        "alarm"
                    ],
                    [
                        
                    ]
                ]
            },
            {
                "trigger_var": "alarm",
                "trigger_attr": "alarm",
                "action_var": "this",
                "action_cmd": "sendSms",
                "str_path": [
                    "phone",
                    "this.sendNotification()",
                    "this.subscribe(alarm, alarm, alarmStrobeHandler)"
                ],
                "str_cond_path": [
                    [
                        "phone"
                    ],
                    [
                        "(evt.value == strobe)"
                    ],
                    [
                        
                    ]
                ],
                "str_cond_input": [
                    [
                        "phone",
                        "alarm"
                    ],
                    [
                        "alarm"
                    ],
                    [
                        
                    ]
                ]
            },
            {
                "trigger_var": "alarm",
                "trigger_attr": "alarm",
                "action_var": "this",
                "action_cmd": "sendSms",
                "str_path": [
                    "message",
                    "msg",
                    "this.sendNotification()",
                    "this.subscribe(alarm, alarm, alarmStrobeHandler)"
                ],
                "str_cond_path": [
                    [
                        "phone"
                    ],
                    [
                        
                    ],
                    [
                        "(evt.value == off)",
                        "(evt.value == strobe)"
                    ],
                    [
                        
                    ]
                ],
                "str_cond_input": [
                    [
                        "phone",
                        "alarm"
                    ],
                    [
                        
                    ],
                    [
                        "alarm"
                    ],
                    [
                        
                    ]
                ]
            },
            {
                "trigger_var": "alarm",
                "trigger_attr": "alarm",
                "action_var": "this",
                "action_cmd": "sendSms",
                "str_path": [
                    "message",
                    "msg",
                    "this.sendNotification()",
                    "this.subscribe(alarm, alarm, alarmStrobeHandler)"
                ],
                "str_cond_path": [
                    [
                        "phone"
                    ],
                    [
                        
                    ],
                    [
                        "(evt.value == strobe)"
                    ],
                    [
                        
                    ]
                ],
                "str_cond_input": [
                    [
                        "phone",
                        "alarm"
                    ],
                    [
                        
                    ],
                    [
                        "alarm"
                    ],
                    [
                        
                    ]
                ]
            }
        ],
        "list_subscribe_node": [
            "this.subscribe(smoke, carbonMonoxide, smokeDetectedHandler)",
            "this.subscribe(alarm, alarm, alarmStrobeHandler)"
        ],
        "list_sink_param_nodes": [
            "phone",
            "message"
        ],
        "list_act_param_nodes": [
            "alarm.strobe()",
            "alarm.off()"
        ]
    },
    "ID5DynamicMethodInvocationAlarm+": {
        "map_all_inputs": {
            "smoke": "capability.smokeDetector",
            "alarm": "capability.alarm"
        },
        "map_capa_inputs": {
            "smoke": "capability.smokeDetector",
            "alarm": "capability.alarm"
        },
        "list_description": [
            "Potential safety problem by invoking a wrong method"
        ],
        "list_filename": [
            "Soteria"
        ],
        "list_prompts": [
            "Title",
            "smoke",
            "alarm"
        ],
        "list_action": [
            {
                "trigger_var": "smoke",
                "trigger_attr": "smoke",
                "action_var": "alarm",
                "action_cmd": "strobe",
                "str_path": [
                    "alarm.strobe()",
                    "this.subscribe(smoke, smoke, smokeHandler)"
                ],
                "str_cond_path": [
                    [
                        "(evt.value == detected)"
                    ],
                    [
                        
                    ]
                ],
                "str_cond_input": [
                    [
                        "smoke"
                    ],
                    [
                        
                    ]
                ]
            }
        ],
        "list_sink": [
            {
                "trigger_var": "alarm",
                "trigger_attr": "alarm.strobe",
                "action_var": "this",
                "action_cmd": "httpGet",
                "str_path": [
                    "http://server/maliciousServer.php",
                    "this.attack()",
                    "this.subscribe(alarm, alarm.strobe, strobeHandler)"
                ],
                "str_cond_path": [
                    [
                        
                    ],
                    [
                        
                    ],
                    [
                        
                    ]
                ],
                "str_cond_input": [
                    [
                        
                    ],
                    [
                        
                    ],
                    [
                        
                    ]
                ]
            },
            {
                "trigger_var": "alarm",
                "trigger_attr": "alarm.strobe",
                "action_var": "(resp.status == 200)",
                "action_cmd": null,
                "str_path": [
                    "resp",
                    "this.attack()",
                    "this.subscribe(alarm, alarm.strobe, strobeHandler)"
                ],
                "str_cond_path": [
                    [
                        
                    ],
                    [
                        
                    ],
                    [
                        
                    ]
                ],
                "str_cond_input": [
                    [
                        
                    ],
                    [
                        
                    ],
                    [
                        
                    ]
                ]
            },
            {
                "trigger_var": "alarm",
                "trigger_attr": "alarm.strobe",
                "action_var": "(resp.status == 200)",
                "action_cmd": null,
                "str_path": [
                    "status",
                    "this.attack()",
                    "this.subscribe(alarm, alarm.strobe, strobeHandler)"
                ],
                "str_cond_path": [
                    [
                        
                    ],
                    [
                        
                    ],
                    [
                        
                    ]
                ],
                "str_cond_input": [
                    [
                        
                    ],
                    [
                        
                    ],
                    [
                        
                    ]
                ]
            },
            {
                "trigger_var": "alarm",
                "trigger_attr": "alarm.strobe",
                "action_var": "(resp.status == 200)",
                "action_cmd": null,
                "str_path": [
                    "200",
                    "this.attack()",
                    "this.subscribe(alarm, alarm.strobe, strobeHandler)"
                ],
                "str_cond_path": [
                    [
                        
                    ],
                    [
                        
                    ],
                    [
                        
                    ]
                ],
                "str_cond_input": [
                    [
                        
                    ],
                    [
                        
                    ],
                    [
                        
                    ]
                ]
            },
            {
                "trigger_var": "alarm",
                "trigger_attr": "alarm.strobe",
                "action_var": "state.method",
                "action_cmd": null,
                "str_path": [
                    "method",
                    "this.attack()",
                    "this.subscribe(alarm, alarm.strobe, strobeHandler)"
                ],
                "str_cond_path": [
                    [
                        "(resp.status == 200)"
                    ],
                    [
                        
                    ],
                    [
                        
                    ]
                ],
                "str_cond_input": [
                    [
                        
                    ],
                    [
                        
                    ],
                    [
                        
                    ]
                ]
            },
            {
                "trigger_var": "alarm",
                "trigger_attr": "alarm.strobe",
                "action_var": "state.method",
                "action_cmd": null,
                "str_path": [
                    "resp",
                    "this.attack()",
                    "this.subscribe(alarm, alarm.strobe, strobeHandler)"
                ],
                "str_cond_path": [
                    [
                        "(resp.status == 200)"
                    ],
                    [
                        
                    ],
                    [
                        
                    ]
                ],
                "str_cond_input": [
                    [
                        
                    ],
                    [
                        
                    ],
                    [
                        
                    ]
                ]
            },
            {
                "trigger_var": "alarm",
                "trigger_attr": "alarm.strobe",
                "action_var": "state.method",
                "action_cmd": null,
                "str_path": [
                    "data",
                    "this.attack()",
                    "this.subscribe(alarm, alarm.strobe, strobeHandler)"
                ],
                "str_cond_path": [
                    [
                        "(resp.status == 200)"
                    ],
                    [
                        
                    ],
                    [
                        
                    ]
                ],
                "str_cond_input": [
                    [
                        
                    ],
                    [
                        
                    ],
                    [
                        
                    ]
                ]
            },
            {
                "trigger_var": "alarm",
                "trigger_attr": "alarm.strobe",
                "action_var": "state.method",
                "action_cmd": null,
                "str_path": [
                    "toString",
                    "this.attack()",
                    "this.subscribe(alarm, alarm.strobe, strobeHandler)"
                ],
                "str_cond_path": [
                    [
                        "(resp.status == 200)"
                    ],
                    [
                        
                    ],
                    [
                        
                    ]
                ],
                "str_cond_input": [
                    [
                        
                    ],
                    [
                        
                    ],
                    [
                        
                    ]
                ]
            },
            {
                "trigger_var": "alarm",
                "trigger_attr": "alarm.strobe",
                "action_var": "log",
                "action_cmd": "error",
                "str_path": [
                    "log",
                    "this.attack()",
                    "this.subscribe(alarm, alarm.strobe, strobeHandler)"
                ],
                "str_cond_path": [
                    [
                        "(resp.status == 200)"
                    ],
                    [
                        
                    ],
                    [
                        
                    ]
                ],
                "str_cond_input": [
                    [
                        
                    ],
                    [
                        
                    ],
                    [
                        
                    ]
                ]
            },
            {
                "trigger_var": "alarm",
                "trigger_attr": "alarm.strobe",
                "action_var": "log",
                "action_cmd": "error",
                "str_path": [
                    "error",
                    "this.attack()",
                    "this.subscribe(alarm, alarm.strobe, strobeHandler)"
                ],
                "str_cond_path": [
                    [
                        "(resp.status == 200)"
                    ],
                    [
                        
                    ],
                    [
                        
                    ]
                ],
                "str_cond_input": [
                    [
                        
                    ],
                    [
                        
                    ],
                    [
                        
                    ]
                ]
            },
            {
                "trigger_var": "alarm",
                "trigger_attr": "alarm.strobe",
                "action_var": "log",
                "action_cmd": "error",
                "str_path": [
                    "unknown response",
                    "this.attack()",
                    "this.subscribe(alarm, alarm.strobe, strobeHandler)"
                ],
                "str_cond_path": [
                    [
                        "(resp.status == 200)"
                    ],
                    [
                        
                    ],
                    [
                        
                    ]
                ],
                "str_cond_input": [
                    [
                        
                    ],
                    [
                        
                    ],
                    [
                        
                    ]
                ]
            }
        ],
        "list_subscribe_node": [
            "this.subscribe(smoke, smoke, smokeHandler)",
            "this.subscribe(alarm, alarm.strobe, strobeHandler)"
        ],
        "list_sink_param_nodes": [
            "http://server/maliciousServer.php",
            "resp",
            "status",
            "200",
            "method",
            "resp",
            "data",
            "toString",
            "log",
            "error",
            "unknown response"
        ],
        "list_act_param_nodes": [
            "alarm.off()",
            "alarm.strobe()"
        ]
    },
    "ID6TurnOnSwitchNotHome+": {
        "map_all_inputs": {
            "person": "capability.presenceSensor",
            "myswitch": "capability.switchLevel",
            "thelock": "capability.lock"
        },
        "map_capa_inputs": {
            "person": "capability.presenceSensor",
            "myswitch": "capability.switchLevel",
            "thelock": "capability.lock"
        },
        "list_description": [
            "Potential safety problem by invoking a wrong method"
        ],
        "list_filename": [
            "Soteria"
        ],
        "list_prompts": [
            "When you leave home....",
            "switchlevel?",
            "door lock"
        ],
        "list_action": [
            {
                "trigger_var": "person",
                "trigger_attr": "presence",
                "action_var": "myswitch",
                "action_cmd": "setLevel",
                "str_path": [
                    "myswitch.setLevel(80)",
                    "this.subscribe(person, presence, presence)"
                ],
                "str_cond_path": [
                    [
                        "(evt.value != not present)"
                    ],
                    [
                        
                    ]
                ],
                "str_cond_input": [
                    [
                        "person"
                    ],
                    [
                        
                    ]
                ]
            },
            {
                "trigger_var": "person",
                "trigger_attr": "presence",
                "action_var": "myswitch",
                "action_cmd": "setLevel",
                "str_path": [
                    "myswitch.setLevel(0)",
                    "this.subscribe(person, presence, presence)"
                ],
                "str_cond_path": [
                    [
                        "(evt.value != not present)"
                    ],
                    [
                        
                    ]
                ],
                "str_cond_input": [
                    [
                        "person"
                    ],
                    [
                        
                    ]
                ]
            },
            {
                "trigger_var": "person",
                "trigger_attr": "presence",
                "action_var": "thelock",
                "action_cmd": "lock",
                "str_path": [
                    "thelock.lock()",
                    "this.subscribe(person, presence, presence)"
                ],
                "str_cond_path": [
                    [
                        "(evt.value != not present)"
                    ],
                    [
                        
                    ]
                ],
                "str_cond_input": [
                    [
                        "person"
                    ],
                    [
                        
                    ]
                ]
            }
        ],
        "list_sink": [
            
        ],
        "list_subscribe_node": [
            "this.subscribe(person, presence, presence)"
        ],
        "list_sink_param_nodes": [
            
        ],
        "list_act_param_nodes": [
            "myswitch.setLevel(80)",
            "myswitch.setLevel(0)",
            "myswitch.setLevel(20)",
            "thelock.unlock()",
            "thelock.lock()"
        ]
    },
    "ID7ConflictTimeandPresenceSensor+": {
        "map_all_inputs": {
            "switches": "capability.switch",
            "person": "capability.presenceSensor",
            "startTime": "time",
            "stopTime": "time"
        },
        "map_capa_inputs": {
            "switches": "capability.switch",
            "person": "capability.presenceSensor"
        },
        "list_description": [
            "Turn on one or more switches at a specified time and turn them off at a later time."
        ],
        "list_filename": [
            "Soteria"
        ],
        "list_prompts": [
            "Select switches to control...",
            "When all of these people leave home",
            "Turn them all on at...",
            "And turn them off at...",
            "Turn On Time?",
            "Turn Off Time?"
        ],
        "list_action": [
            {
                "trigger_var": "startTime",
                "trigger_attr": "startTimerCallback",
                "action_var": "switches",
                "action_cmd": "on",
                "str_path": [
                    "switches.on()",
                    "this.schedule(startTime, startTimerCallback)"
                ],
                "str_cond_path": [
                    [
                        
                    ],
                    [
                        
                    ]
                ],
                "str_cond_input": [
                    [
                        
                    ],
                    [
                        
                    ]
                ]
            },
            {
                "trigger_var": "startTime",
                "trigger_attr": "startTimerCallback",
                "action_var": "switches",
                "action_cmd": "on",
                "str_path": [
                    "switches.on()",
                    "this.schedule(startTime, startTimerCallback)"
                ],
                "str_cond_path": [
                    [
                        
                    ],
                    [
                        
                    ]
                ],
                "str_cond_input": [
                    [
                        
                    ],
                    [
                        
                    ]
                ]
            },
            {
                "trigger_var": "stopTime",
                "trigger_attr": "stopTimerCallback",
                "action_var": "switches",
                "action_cmd": "off",
                "str_path": [
                    "switches.off()",
                    "this.schedule(stopTime, stopTimerCallback)"
                ],
                "str_cond_path": [
                    [
                        
                    ],
                    [
                        
                    ]
                ],
                "str_cond_input": [
                    [
                        
                    ],
                    [
                        
                    ]
                ]
            },
            {
                "trigger_var": "stopTime",
                "trigger_attr": "stopTimerCallback",
                "action_var": "switches",
                "action_cmd": "off",
                "str_path": [
                    "switches.off()",
                    "this.schedule(stopTime, stopTimerCallback)"
                ],
                "str_cond_path": [
                    [
                        
                    ],
                    [
                        
                    ]
                ],
                "str_cond_input": [
                    [
                        
                    ],
                    [
                        
                    ]
                ]
            },
            {
                "trigger_var": "person",
                "trigger_attr": "presence",
                "action_var": "switches",
                "action_cmd": "off",
                "str_path": [
                    "switches.off()",
                    "this.subscribe(person, presence, presenceHandler)"
                ],
                "str_cond_path": [
                    [
                        "(evt.value == not present)"
                    ],
                    [
                        
                    ]
                ],
                "str_cond_input": [
                    [
                        "person"
                    ],
                    [
                        
                    ]
                ]
            },
            {
                "trigger_var": "people",
                "trigger_attr": "presence",
                "action_var": "switches",
                "action_cmd": "off",
                "str_path": [
                    "switches.off()",
                    "this.subscribe(people, presence, presenceHandler)"
                ],
                "str_cond_path": [
                    [
                        "(evt.value == not present)"
                    ],
                    [
                        
                    ]
                ],
                "str_cond_input": [
                    [
                        "person"
                    ],
                    [
                        
                    ]
                ]
            },
            {
                "trigger_var": "person",
                "trigger_attr": "presence",
                "action_var": "switches",
                "action_cmd": "on",
                "str_path": [
                    "switches.on()",
                    "this.subscribe(person, presence, presenceHandler)"
                ],
                "str_cond_path": [
                    [
                        "(evt.value == not present)"
                    ],
                    [
                        
                    ]
                ],
                "str_cond_input": [
                    [
                        "person"
                    ],
                    [
                        
                    ]
                ]
            },
            {
                "trigger_var": "people",
                "trigger_attr": "presence",
                "action_var": "switches",
                "action_cmd": "on",
                "str_path": [
                    "switches.on()",
                    "this.subscribe(people, presence, presenceHandler)"
                ],
                "str_cond_path": [
                    [
                        "(evt.value == not present)"
                    ],
                    [
                        
                    ]
                ],
                "str_cond_input": [
                    [
                        "person"
                    ],
                    [
                        
                    ]
                ]
            }
        ],
        "list_sink": [
            
        ],
        "list_subscribe_node": [
            "this.schedule(startTime, startTimerCallback)",
            "this.schedule(stopTime, stopTimerCallback)",
            "this.subscribe(people, presence, presenceHandler)",
            "this.schedule(startTime, startTimerCallback)",
            "this.schedule(stopTime, stopTimerCallback)",
            "this.subscribe(person, presence, presenceHandler)"
        ],
        "list_sink_param_nodes": [
            
        ],
        "list_act_param_nodes": [
            "switches.on()",
            "switches.off()",
            "switches.off()",
            "switches.on()"
        ]
    },
    "ID8.1LocationModeChangeFail+": {
        "map_all_inputs": {
            "people": "capability.presenceSensor",
            "newMode": "mode",
            "falseAlarmThreshold": "decimal",
            "contact": "{ -> ... }",
            "sendPushMessage": "enum",
            "phone": "phone"
        },
        "map_capa_inputs": {
            "people": "capability.presenceSensor"
        },
        "list_description": [
            "Monitors a set of SmartSense Presence tags or smartphones and triggers a mode change when everyone has left.  Used in conjunction with Big Turn Off or Make It So to turn off lights, appliances, adjust the thermostat, turn on security apps, and more."
        ],
        "list_filename": [
            "Bon Voyage"
        ],
        "list_prompts": [
            "When all of these people leave home",
            "Change to this mode",
            "False alarm threshold (defaults to 10 min)",
            "Notifications",
            "Mode?",
            "Number of minutes",
            "Send notifications to",
            "Send a push notification?",
            "Send a Text Message?"
        ],
        "list_action": [
            
        ],
        "list_sink": [
            
        ],
        "list_subscribe_node": [
            "this.subscribe(people, presence, presence)",
            "this.subscribe(people, presence, presence)"
        ],
        "list_sink_param_nodes": [
            "msg",
            "recipients",
            "msg",
            "phone",
            "msg"
        ],
        "list_act_param_nodes": [
            
        ]
    },
    "ID8LocationSubscribeFailure+": {
        "map_all_inputs": {
            "people": "capability.presenceSensor"
        },
        "map_capa_inputs": {
            "people": "capability.presenceSensor"
        },
        "list_description": [
            "Set mode when you are at home or leave home"
        ],
        "list_filename": [
            "Soteria"
        ],
        "list_prompts": [
            "When people leave home"
        ],
        "list_action": [
            
        ],
        "list_sink": [
            {
                "trigger_var": "people",
                "trigger_attr": "presence",
                "action_var": "this",
                "action_cmd": "setLocationMode",
                "str_path": [
                    "Away",
                    "this.subscribe(people, presence, presenceHandler)"
                ],
                "str_cond_path": [
                    [
                        "(evt.value == not present)"
                    ],
                    [
                        
                    ]
                ],
                "str_cond_input": [
                    [
                        "people"
                    ],
                    [
                        
                    ]
                ]
            },
            {
                "trigger_var": "people",
                "trigger_attr": "presence",
                "action_var": "this",
                "action_cmd": "setLocationMode",
                "str_path": [
                    "Away",
                    "this.subscribe(people, presence, presenceHandler)"
                ],
                "str_cond_path": [
                    [
                        "(evt.value == not present)"
                    ],
                    [
                        
                    ]
                ],
                "str_cond_input": [
                    [
                        "people"
                    ],
                    [
                        
                    ]
                ]
            },
            {
                "trigger_var": "people",
                "trigger_attr": "presence",
                "action_var": "this",
                "action_cmd": "setLocationMode",
                "str_path": [
                    "Away",
                    "this.subscribe(people, presence, presenceHandler)"
                ],
                "str_cond_path": [
                    [
                        "(evt.value == not present)"
                    ],
                    [
                        
                    ]
                ],
                "str_cond_input": [
                    [
                        "people"
                    ],
                    [
                        
                    ]
                ]
            },
            {
                "trigger_var": "people",
                "trigger_attr": "presence",
                "action_var": "this",
                "action_cmd": "setLocationMode",
                "str_path": [
                    "Home",
                    "this.subscribe(people, presence, presenceHandler)"
                ],
                "str_cond_path": [
                    [
                        "(evt.value == not present)"
                    ],
                    [
                        
                    ]
                ],
                "str_cond_input": [
                    [
                        "people"
                    ],
                    [
                        
                    ]
                ]
            },
            {
                "trigger_var": "people",
                "trigger_attr": "presence",
                "action_var": "this",
                "action_cmd": "setLocationMode",
                "str_path": [
                    "Home",
                    "this.subscribe(people, presence, presenceHandler)"
                ],
                "str_cond_path": [
                    [
                        "(evt.value == not present)"
                    ],
                    [
                        
                    ]
                ],
                "str_cond_input": [
                    [
                        "people"
                    ],
                    [
                        
                    ]
                ]
            },
            {
                "trigger_var": "people",
                "trigger_attr": "presence",
                "action_var": "this",
                "action_cmd": "setLocationMode",
                "str_path": [
                    "Home",
                    "this.subscribe(people, presence, presenceHandler)"
                ],
                "str_cond_path": [
                    [
                        "(evt.value == not present)"
                    ],
                    [
                        
                    ]
                ],
                "str_cond_input": [
                    [
                        "people"
                    ],
                    [
                        
                    ]
                ]
            }
        ],
        "list_subscribe_node": [
            "this.subscribe(people, presence, presenceHandler)",
            "this.subscribe(people, presence, presenceHandler)",
            "this.subscribe(people, presence, presenceHandler)"
        ],
        "list_sink_param_nodes": [
            "Away",
            "Home"
        ],
        "list_act_param_nodes": [
            
        ]
    },
    "ID9DisableVacationMode+": {
        "map_all_inputs": {
            "people": "capability.presenceSensor",
            "newMode": "mode",
            "myswitch": "capability.switch",
            "light": "capability.switch",
            "phone": "phone"
        },
        "map_capa_inputs": {
            "people": "capability.presenceSensor",
            "myswitch": "capability.switch",
            "light": "capability.switch"
        },
        "list_description": [
            "Disabling vacation mode."
        ],
        "list_filename": [
            "Soteria"
        ],
        "list_prompts": [
            "When all of these people leave home",
            "Change to this mode",
            "vacation mode",
            "And text me at (optional)",
            "Mode?",
            "vacation mode?",
            "light?",
            "Phone number?"
        ],
        "list_action": [
            {
                "trigger_var": "location",
                "trigger_attr": "sunset",
                "action_var": "light",
                "action_cmd": "on",
                "str_path": [
                    "light.on()",
                    "this.subscribe(location, sunset, sunsetHandler)"
                ],
                "str_cond_path": [
                    [
                        "(state.vacation && state.home)"
                    ],
                    [
                        
                    ]
                ],
                "str_cond_input": [
                    [
                        
                    ],
                    [
                        
                    ]
                ]
            },
            {
                "trigger_var": "location",
                "trigger_attr": "sunrise",
                "action_var": "light",
                "action_cmd": "off",
                "str_path": [
                    "light.off()",
                    "this.subscribe(location, sunrise, sunriseHandler)"
                ],
                "str_cond_path": [
                    [
                        "(state.vacation && state.home)"
                    ],
                    [
                        
                    ]
                ],
                "str_cond_input": [
                    [
                        
                    ],
                    [
                        
                    ]
                ]
            }
        ],
        "list_sink": [
            {
                "trigger_var": "people",
                "trigger_attr": "presence",
                "action_var": "this",
                "action_cmd": "setLocationMode",
                "str_path": [
                    "newMode",
                    "this.takeAction()",
                    "this.subscribe(people, presence, presence)"
                ],
                "str_cond_path": [
                    [
                        
                    ],
                    [
                        "((location.mode != newMode) && this.everyoneIsAway())",
                        "(evt.value == not present)"
                    ],
                    [
                        
                    ]
                ],
                "str_cond_input": [
                    [
                        
                    ],
                    [
                        "people",
                        "newMode"
                    ],
                    [
                        
                    ]
                ]
            },
            {
                "trigger_var": "people",
                "trigger_attr": "presence",
                "action_var": "this",
                "action_cmd": "setLocationMode",
                "str_path": [
                    "Home",
                    "this.subscribe(people, presence, presence)"
                ],
                "str_cond_path": [
                    [
                        "(evt.value == not present)"
                    ],
                    [
                        
                    ]
                ],
                "str_cond_input": [
                    [
                        "people"
                    ],
                    [
                        
                    ]
                ]
            },
            {
                "trigger_var": "people",
                "trigger_attr": "presence",
                "action_var": "this",
                "action_cmd": "sendSms",
                "str_path": [
                    "phone",
                    "this.takeAction()",
                    "this.subscribe(people, presence, presence)"
                ],
                "str_cond_path": [
                    [
                        "phone"
                    ],
                    [
                        "((location.mode != newMode) && this.everyoneIsAway())",
                        "(evt.value == not present)"
                    ],
                    [
                        
                    ]
                ],
                "str_cond_input": [
                    [
                        "phone",
                        "people",
                        "newMode"
                    ],
                    [
                        "people",
                        "newMode"
                    ],
                    [
                        
                    ]
                ]
            },
            {
                "trigger_var": "people",
                "trigger_attr": "presence",
                "action_var": "this",
                "action_cmd": "sendSms",
                "str_path": [
                    "message",
                    "newMode",
                    "this.takeAction()",
                    "this.subscribe(people, presence, presence)"
                ],
                "str_cond_path": [
                    [
                        "phone"
                    ],
                    [
                        
                    ],
                    [
                        "((location.mode != newMode) && this.everyoneIsAway())",
                        "(evt.value == not present)"
                    ],
                    [
                        
                    ]
                ],
                "str_cond_input": [
                    [
                        "phone",
                        "people",
                        "newMode"
                    ],
                    [
                        
                    ],
                    [
                        "people",
                        "newMode"
                    ],
                    [
                        
                    ]
                ]
            }
        ],
        "list_subscribe_node": [
            "this.subscribe(people, presence, presence)",
            "this.subscribe(myswitch, switch, switchHandler)",
            "this.subscribe(location, sunset, sunsetHandler)",
            "this.subscribe(location, sunrise, sunriseHandler)",
            "this.subscribe(location, mode, modeHandler)"
        ],
        "list_sink_param_nodes": [
            "newMode",
            "Home",
            "Home",
            "phone",
            "message"
        ],
        "list_act_param_nodes": [
            "light.on()",
            "light.off()"
        ]
    },
    "InstallingAttack": {
        "map_all_inputs": {
            
        },
        "map_capa_inputs": {
            
        },
        "list_description": [
            "Attack during prefereces."
        ],
        "list_filename": [
            "Attack 25: AttackDuringPreference"
        ],
        "list_prompts": [
            "Turn on this light"
        ],
        "list_action": [
            
        ],
        "list_sink": [
            
        ],
        "list_subscribe_node": [
            
        ],
        "list_sink_param_nodes": [
            "2174171335",
            "test"
        ],
        "list_act_param_nodes": [
            
        ]
    },
    "IPC--MaliciousCameraIPC&&PresenceSensor": {
        "map_all_inputs": {
            
        },
        "map_capa_inputs": {
            
        },
        "list_description": [
            
        ],
        "list_filename": [
            
        ],
        "list_prompts": [
            
        ],
        "list_action": [
            
        ],
        "list_sink": [
            
        ],
        "list_subscribe_node": [
            
        ],
        "list_sink_param_nodes": [
            
        ],
        "list_act_param_nodes": [
            
        ]
    },
    "IPC-part2": {
        "map_all_inputs": {
            "people": "capability.presenceSensor",
            "myswitch": "capability.switchLevel"
        },
        "map_capa_inputs": {
            "people": "capability.presenceSensor",
            "myswitch": "capability.switchLevel"
        },
        "list_description": [
            "IPC part2"
        ],
        "list_filename": [
            "Attack 18: IPC Part2"
        ],
        "list_prompts": [
            "When all of these people leave home",
            "switchlevel?"
        ],
        "list_action": [
            {
                "trigger_var": "people",
                "trigger_attr": "presence",
                "action_var": "myswitch",
                "action_cmd": "setLevel",
                "str_path": [
                    "myswitch.setLevel(80)",
                    "this.subscribe(people, presence, presence)"
                ],
                "str_cond_path": [
                    [
                        "(evt.value == present)"
                    ],
                    [
                        
                    ]
                ],
                "str_cond_input": [
                    [
                        "people"
                    ],
                    [
                        
                    ]
                ]
            },
            {
                "trigger_var": "people",
                "trigger_attr": "presence",
                "action_var": "myswitch",
                "action_cmd": "setLevel",
                "str_path": [
                    "myswitch.setLevel(0)",
                    "this.subscribe(people, presence, presence)"
                ],
                "str_cond_path": [
                    [
                        "(evt.value == present)"
                    ],
                    [
                        
                    ]
                ],
                "str_cond_input": [
                    [
                        "people"
                    ],
                    [
                        
                    ]
                ]
            }
        ],
        "list_sink": [
            
        ],
        "list_subscribe_node": [
            "this.subscribe(people, presence, presence)"
        ],
        "list_sink_param_nodes": [
            
        ],
        "list_act_param_nodes": [
            "myswitch.setLevel(value)",
            "myswitch.setLevel(80)",
            "myswitch.setLevel(0)",
            "myswitch.setLevel(0)"
        ]
    },
    "IPC": {
        "map_all_inputs": {
            
        },
        "map_capa_inputs": {
            
        },
        "list_description": [
            
        ],
        "list_filename": [
            
        ],
        "list_prompts": [
            
        ],
        "list_action": [
            
        ],
        "list_sink": [
            
        ],
        "list_subscribe_node": [
            
        ],
        "list_sink_param_nodes": [
            
        ],
        "list_act_param_nodes": [
            
        ]
    },
    "LeakingInformation": {
        "map_all_inputs": {
            "themotion": "capability.motionSensor",
            "minutes": "number",
            "myswitch": "capability.switchLevel"
        },
        "map_capa_inputs": {
            "themotion": "capability.motionSensor",
            "myswitch": "capability.switchLevel"
        },
        "list_description": [
            "Leaking information."
        ],
        "list_filename": [
            "Attack2: LeakInformation"
        ],
        "list_prompts": [
            "Title",
            "Where?",
            "Minutes?",
            "switchlevel?"
        ],
        "list_action": [
            {
                "trigger_var": "themotion",
                "trigger_attr": "motion.active",
                "action_var": "myswitch",
                "action_cmd": "setLevel",
                "str_path": [
                    "myswitch.setLevel(80)",
                    "this.subscribe(themotion, motion.active, motionDetectedHandler)"
                ],
                "str_cond_path": [
                    [
                        
                    ],
                    [
                        
                    ]
                ],
                "str_cond_input": [
                    [
                        
                    ],
                    [
                        
                    ]
                ]
            }
        ],
        "list_sink": [
            
        ],
        "list_subscribe_node": [
            "this.subscribe(themotion, motion.active, motionDetectedHandler)",
            "this.subscribe(themotion, motion.inactive, motionStoppedHandler)"
        ],
        "list_sink_param_nodes": [
            
        ],
        "list_act_param_nodes": [
            "myswitch.setLevel(80)",
            "myswitch.setLevel(80)",
            "myswitch.setLevel(0)",
            "myswitch.setLevel((value + 20))",
            "myswitch.setLevel((value + 20))",
            "myswitch.setLevel((value - 20))",
            "myswitch.setLevel((value - 20))"
        ]
    },
    "Lock-access-revocation_logging-evasion": {
        "map_all_inputs": {
            
        },
        "map_capa_inputs": {
            
        },
        "list_description": [
            
        ],
        "list_filename": [
            
        ],
        "list_prompts": [
            
        ],
        "list_action": [
            
        ],
        "list_sink": [
            
        ],
        "list_subscribe_node": [
            
        ],
        "list_sink_param_nodes": [
            
        ],
        "list_act_param_nodes": [
            
        ]
    },
    "LockAccessRevocation": {
        "map_all_inputs": {
            
        },
        "map_capa_inputs": {
            
        },
        "list_description": [
            
        ],
        "list_filename": [
            
        ],
        "list_prompts": [
            
        ],
        "list_action": [
            
        ],
        "list_sink": [
            
        ],
        "list_subscribe_node": [
            
        ],
        "list_sink_param_nodes": [
            
        ],
        "list_act_param_nodes": [
            
        ]
    },
    "PemissionAbuse": {
        "map_all_inputs": {
            "thebatterymo": "capability.battery",
            "thresh": "number",
            "phone": "phone"
        },
        "map_capa_inputs": {
            "thebatterymo": "capability.battery"
        },
        "list_description": [
            "Permission abuse."
        ],
        "list_filename": [
            "Attack 16: PermissionAbuse"
        ],
        "list_prompts": [
            "Title",
            "Where?",
            "If the battery goes below this level, send me a notification",
            "Phone number"
        ],
        "list_action": [
            
        ],
        "list_sink": [
            {
                "trigger_var": "thebatterymo",
                "trigger_attr": "battery",
                "action_var": "this",
                "action_cmd": "sendSms",
                "str_path": [
                    "phone",
                    "this.subscribe(thebatterymo, battery, batteryHandler)"
                ],
                "str_cond_path": [
                    [
                        "(thebatterymo.currentBattery < thresh)"
                    ],
                    [
                        
                    ]
                ],
                "str_cond_input": [
                    [
                        "thebatterymo",
                        "thresh"
                    ],
                    [
                        
                    ]
                ]
            },
            {
                "trigger_var": "thebatterymo",
                "trigger_attr": "battery",
                "action_var": "this",
                "action_cmd": "sendSms",
                "str_path": [
                    "Battery low for device ",
                    "this.subscribe(thebatterymo, battery, batteryHandler)"
                ],
                "str_cond_path": [
                    [
                        "(thebatterymo.currentBattery < thresh)"
                    ],
                    [
                        
                    ]
                ],
                "str_cond_input": [
                    [
                        "thebatterymo",
                        "thresh"
                    ],
                    [
                        
                    ]
                ]
            },
            {
                "trigger_var": "thebatterymo",
                "trigger_attr": "battery",
                "action_var": "this",
                "action_cmd": "sendSms",
                "str_path": [
                    "",
                    "this.subscribe(thebatterymo, battery, batteryHandler)"
                ],
                "str_cond_path": [
                    [
                        "(thebatterymo.currentBattery < thresh)"
                    ],
                    [
                        
                    ]
                ],
                "str_cond_input": [
                    [
                        "thebatterymo",
                        "thresh"
                    ],
                    [
                        
                    ]
                ]
            },
            {
                "trigger_var": "thebatterymo",
                "trigger_attr": "battery",
                "action_var": "this",
                "action_cmd": "sendSms",
                "str_path": [
                    "deviceId",
                    "this.subscribe(thebatterymo, battery, batteryHandler)"
                ],
                "str_cond_path": [
                    [
                        "(thebatterymo.currentBattery < thresh)"
                    ],
                    [
                        
                    ]
                ],
                "str_cond_input": [
                    [
                        "thebatterymo",
                        "thresh"
                    ],
                    [
                        
                    ]
                ]
            }
        ],
        "list_subscribe_node": [
            "this.subscribe(thebatterymo, battery, batteryHandler)"
        ],
        "list_sink_param_nodes": [
            "phone",
            "Battery low for device ",
            "",
            "evt",
            "deviceId"
        ],
        "list_act_param_nodes": [
            
        ]
    },
    "PinCodeInjection": {
        "map_all_inputs": {
            "devices": "capability.lock"
        },
        "map_capa_inputs": {
            "devices": "capability.lock"
        },
        "list_description": [
            "Backdoor pin code injection."
        ],
        "list_filename": [
            "Attack1: PinCodeInjection"
        ],
        "list_prompts": [
            "Your device",
            "lock"
        ],
        "list_action": [
            
        ],
        "list_sink": [
            
        ],
        "list_subscribe_node": [
            
        ],
        "list_sink_param_nodes": [
            "400",
            "command is required",
            "404",
            "Device not found"
        ],
        "list_act_param_nodes": [
            
        ]
    },
    "Ransomware-WaterValve": {
        "map_all_inputs": {
            "smoke": "capability.smokeDetector",
            "alarm": "capability.alarm",
            "valve": "capability.switch",
            "contact": "{ -> ... }",
            "phone": "phone"
        },
        "map_capa_inputs": {
            "smoke": "capability.smokeDetector",
            "alarm": "capability.alarm",
            "valve": "capability.switch"
        },
        "list_description": [
            "The water valve is used to pull out water when there is a fire home (when the fire alarm strobed)"
        ],
        "list_filename": [
            "shiqiWaterValve"
        ],
        "list_prompts": [
            "Title",
            "Send Notifications?",
            "smoke",
            "Send notifications to",
            "Warn with text message (optional)"
        ],
        "list_action": [
            {
                "trigger_var": "smoke",
                "trigger_attr": "smoke",
                "action_var": "alarm",
                "action_cmd": "strobe",
                "str_path": [
                    "alarm.strobe()",
                    "this.subscribe(smoke, smoke, smokeHandler)"
                ],
                "str_cond_path": [
                    [
                        "(evt.value == detected)"
                    ],
                    [
                        
                    ]
                ],
                "str_cond_input": [
                    [
                        "smoke"
                    ],
                    [
                        
                    ]
                ]
            },
            {
                "trigger_var": "smoke",
                "trigger_attr": "smoke",
                "action_var": "alarm",
                "action_cmd": "off",
                "str_path": [
                    "alarm.off()",
                    "this.subscribe(smoke, smoke, smokeHandler)"
                ],
                "str_cond_path": [
                    [
                        "(evt.value == clear)"
                    ],
                    [
                        
                    ]
                ],
                "str_cond_input": [
                    [
                        "smoke"
                    ],
                    [
                        
                    ]
                ]
            },
            {
                "trigger_var": "alarm",
                "trigger_attr": "alarm",
                "action_var": "valve",
                "action_cmd": "off",
                "str_path": [
                    "valve.off()",
                    "this.subscribe(alarm, alarm, strobeHandler)"
                ],
                "str_cond_path": [
                    [
                        "(evt.value == off)"
                    ],
                    [
                        
                    ]
                ],
                "str_cond_input": [
                    [
                        "alarm"
                    ],
                    [
                        
                    ]
                ]
            },
            {
                "trigger_var": "alarm",
                "trigger_attr": "alarm",
                "action_var": "valve",
                "action_cmd": "on",
                "str_path": [
                    "valve.on()",
                    "this.attack()",
                    "this.subscribe(alarm, alarm, strobeHandler)"
                ],
                "str_cond_path": [
                    [
                        "(state.attack == false)"
                    ],
                    [
                        "(evt.value == strobe)"
                    ],
                    [
                        
                    ]
                ],
                "str_cond_input": [
                    [
                        "alarm"
                    ],
                    [
                        "alarm"
                    ],
                    [
                        
                    ]
                ]
            }
        ],
        "list_sink": [
            {
                "trigger_var": "alarm",
                "trigger_attr": "alarm",
                "action_var": "this",
                "action_cmd": "httpGet",
                "str_path": [
                    "http://141.212.110.244/stmalware/maliciousServer.php",
                    "this.attack()",
                    "this.subscribe(alarm, alarm, strobeHandler)"
                ],
                "str_cond_path": [
                    [
                        
                    ],
                    [
                        "(evt.value == strobe)"
                    ],
                    [
                        
                    ]
                ],
                "str_cond_input": [
                    [
                        
                    ],
                    [
                        "alarm"
                    ],
                    [
                        
                    ]
                ]
            },
            {
                "trigger_var": "alarm",
                "trigger_attr": "alarm",
                "action_var": "(resp.status == 200)",
                "action_cmd": null,
                "str_path": [
                    "resp",
                    "this.attack()",
                    "this.subscribe(alarm, alarm, strobeHandler)"
                ],
                "str_cond_path": [
                    [
                        
                    ],
                    [
                        "(evt.value == strobe)"
                    ],
                    [
                        
                    ]
                ],
                "str_cond_input": [
                    [
                        
                    ],
                    [
                        "alarm"
                    ],
                    [
                        
                    ]
                ]
            },
            {
                "trigger_var": "alarm",
                "trigger_attr": "alarm",
                "action_var": "(resp.status == 200)",
                "action_cmd": null,
                "str_path": [
                    "status",
                    "this.attack()",
                    "this.subscribe(alarm, alarm, strobeHandler)"
                ],
                "str_cond_path": [
                    [
                        
                    ],
                    [
                        "(evt.value == strobe)"
                    ],
                    [
                        
                    ]
                ],
                "str_cond_input": [
                    [
                        
                    ],
                    [
                        "alarm"
                    ],
                    [
                        
                    ]
                ]
            },
            {
                "trigger_var": "alarm",
                "trigger_attr": "alarm",
                "action_var": "(resp.status == 200)",
                "action_cmd": null,
                "str_path": [
                    "200",
                    "this.attack()",
                    "this.subscribe(alarm, alarm, strobeHandler)"
                ],
                "str_cond_path": [
                    [
                        
                    ],
                    [
                        "(evt.value == strobe)"
                    ],
                    [
                        
                    ]
                ],
                "str_cond_input": [
                    [
                        
                    ],
                    [
                        "alarm"
                    ],
                    [
                        
                    ]
                ]
            },
            {
                "trigger_var": "alarm",
                "trigger_attr": "alarm",
                "action_var": "state.attack",
                "action_cmd": null,
                "str_path": [
                    "attack",
                    "this.attack()",
                    "this.subscribe(alarm, alarm, strobeHandler)"
                ],
                "str_cond_path": [
                    [
                        "(resp.status == 200)"
                    ],
                    [
                        "(evt.value == strobe)"
                    ],
                    [
                        
                    ]
                ],
                "str_cond_input": [
                    [
                        "alarm"
                    ],
                    [
                        "alarm"
                    ],
                    [
                        
                    ]
                ]
            },
            {
                "trigger_var": "alarm",
                "trigger_attr": "alarm",
                "action_var": "state.attack",
                "action_cmd": null,
                "str_path": [
                    "resp",
                    "this.attack()",
                    "this.subscribe(alarm, alarm, strobeHandler)"
                ],
                "str_cond_path": [
                    [
                        "(resp.status == 200)"
                    ],
                    [
                        "(evt.value == strobe)"
                    ],
                    [
                        
                    ]
                ],
                "str_cond_input": [
                    [
                        "alarm"
                    ],
                    [
                        "alarm"
                    ],
                    [
                        
                    ]
                ]
            },
            {
                "trigger_var": "alarm",
                "trigger_attr": "alarm",
                "action_var": "state.attack",
                "action_cmd": null,
                "str_path": [
                    "data",
                    "this.attack()",
                    "this.subscribe(alarm, alarm, strobeHandler)"
                ],
                "str_cond_path": [
                    [
                        "(resp.status == 200)"
                    ],
                    [
                        "(evt.value == strobe)"
                    ],
                    [
                        
                    ]
                ],
                "str_cond_input": [
                    [
                        "alarm"
                    ],
                    [
                        "alarm"
                    ],
                    [
                        
                    ]
                ]
            },
            {
                "trigger_var": "alarm",
                "trigger_attr": "alarm",
                "action_var": "state.attack",
                "action_cmd": null,
                "str_path": [
                    "toString",
                    "this.attack()",
                    "this.subscribe(alarm, alarm, strobeHandler)"
                ],
                "str_cond_path": [
                    [
                        "(resp.status == 200)"
                    ],
                    [
                        "(evt.value == strobe)"
                    ],
                    [
                        
                    ]
                ],
                "str_cond_input": [
                    [
                        "alarm"
                    ],
                    [
                        "alarm"
                    ],
                    [
                        
                    ]
                ]
            },
            {
                "trigger_var": "alarm",
                "trigger_attr": "alarm",
                "action_var": "log",
                "action_cmd": "error",
                "str_path": [
                    "log",
                    "this.attack()",
                    "this.subscribe(alarm, alarm, strobeHandler)"
                ],
                "str_cond_path": [
                    [
                        "(resp.status == 200)"
                    ],
                    [
                        "(evt.value == strobe)"
                    ],
                    [
                        
                    ]
                ],
                "str_cond_input": [
                    [
                        "alarm"
                    ],
                    [
                        "alarm"
                    ],
                    [
                        
                    ]
                ]
            },
            {
                "trigger_var": "alarm",
                "trigger_attr": "alarm",
                "action_var": "log",
                "action_cmd": "error",
                "str_path": [
                    "error",
                    "this.attack()",
                    "this.subscribe(alarm, alarm, strobeHandler)"
                ],
                "str_cond_path": [
                    [
                        "(resp.status == 200)"
                    ],
                    [
                        "(evt.value == strobe)"
                    ],
                    [
                        
                    ]
                ],
                "str_cond_input": [
                    [
                        "alarm"
                    ],
                    [
                        "alarm"
                    ],
                    [
                        
                    ]
                ]
            },
            {
                "trigger_var": "alarm",
                "trigger_attr": "alarm",
                "action_var": "log",
                "action_cmd": "error",
                "str_path": [
                    "unknown response",
                    "this.attack()",
                    "this.subscribe(alarm, alarm, strobeHandler)"
                ],
                "str_cond_path": [
                    [
                        "(resp.status == 200)"
                    ],
                    [
                        "(evt.value == strobe)"
                    ],
                    [
                        
                    ]
                ],
                "str_cond_input": [
                    [
                        "alarm"
                    ],
                    [
                        "alarm"
                    ],
                    [
                        
                    ]
                ]
            },
            {
                "trigger_var": "alarm",
                "trigger_attr": "alarm",
                "action_var": "this",
                "action_cmd": "sendNotificationToContacts",
                "str_path": [
                    "message",
                    "attackRansonMsg",
                    "this.sendNotification()",
                    "this.subscribe(alarm, alarm, strobeHandler)"
                ],
                "str_cond_path": [
                    [
                        "(location.contactBookEnabled && recipients)"
                    ],
                    [
                        
                    ],
                    [
                        "(evt.value == off)"
                    ],
                    [
                        
                    ]
                ],
                "str_cond_input": [
                    [
                        "alarm"
                    ],
                    [
                        
                    ],
                    [
                        "alarm"
                    ],
                    [
                        
                    ]
                ]
            },
            {
                "trigger_var": "alarm",
                "trigger_attr": "alarm",
                "action_var": "this",
                "action_cmd": "sendNotificationToContacts",
                "str_path": [
                    "message",
                    "attackRansonMsg",
                    "this.sendNotification()",
                    "this.subscribe(alarm, alarm, strobeHandler)"
                ],
                "str_cond_path": [
                    [
                        "(location.contactBookEnabled && recipients)"
                    ],
                    [
                        
                    ],
                    [
                        "(evt.value == strobe)"
                    ],
                    [
                        
                    ]
                ],
                "str_cond_input": [
                    [
                        "alarm"
                    ],
                    [
                        
                    ],
                    [
                        "alarm"
                    ],
                    [
                        
                    ]
                ]
            },
            {
                "trigger_var": "alarm",
                "trigger_attr": "alarm",
                "action_var": "this",
                "action_cmd": "sendNotificationToContacts",
                "str_path": [
                    "message",
                    "msg",
                    "this.sendNotification()",
                    "this.subscribe(alarm, alarm, strobeHandler)"
                ],
                "str_cond_path": [
                    [
                        "(location.contactBookEnabled && recipients)"
                    ],
                    [
                        
                    ],
                    [
                        "(evt.value == off)"
                    ],
                    [
                        
                    ]
                ],
                "str_cond_input": [
                    [
                        "alarm"
                    ],
                    [
                        
                    ],
                    [
                        "alarm"
                    ],
                    [
                        
                    ]
                ]
            },
            {
                "trigger_var": "alarm",
                "trigger_attr": "alarm",
                "action_var": "this",
                "action_cmd": "sendNotificationToContacts",
                "str_path": [
                    "message",
                    "msg",
                    "this.sendNotification()",
                    "this.subscribe(alarm, alarm, strobeHandler)"
                ],
                "str_cond_path": [
                    [
                        "(location.contactBookEnabled && recipients)"
                    ],
                    [
                        
                    ],
                    [
                        "(evt.value == strobe)"
                    ],
                    [
                        
                    ]
                ],
                "str_cond_input": [
                    [
                        "alarm"
                    ],
                    [
                        
                    ],
                    [
                        "alarm"
                    ],
                    [
                        
                    ]
                ]
            },
            {
                "trigger_var": "alarm",
                "trigger_attr": "alarm",
                "action_var": "this",
                "action_cmd": "sendNotificationToContacts",
                "str_path": [
                    "recipients",
                    "this.sendNotification()",
                    "this.subscribe(alarm, alarm, strobeHandler)"
                ],
                "str_cond_path": [
                    [
                        "(location.contactBookEnabled && recipients)"
                    ],
                    [
                        "(evt.value == off)"
                    ],
                    [
                        
                    ]
                ],
                "str_cond_input": [
                    [
                        "alarm"
                    ],
                    [
                        "alarm"
                    ],
                    [
                        
                    ]
                ]
            },
            {
                "trigger_var": "alarm",
                "trigger_attr": "alarm",
                "action_var": "this",
                "action_cmd": "sendNotificationToContacts",
                "str_path": [
                    "recipients",
                    "this.sendNotification()",
                    "this.subscribe(alarm, alarm, strobeHandler)"
                ],
                "str_cond_path": [
                    [
                        "(location.contactBookEnabled && recipients)"
                    ],
                    [
                        "(evt.value == strobe)"
                    ],
                    [
                        
                    ]
                ],
                "str_cond_input": [
                    [
                        "alarm"
                    ],
                    [
                        "alarm"
                    ],
                    [
                        
                    ]
                ]
            },
            {
                "trigger_var": "alarm",
                "trigger_attr": "alarm",
                "action_var": "this",
                "action_cmd": "sendSms",
                "str_path": [
                    "phone",
                    "this.sendNotification()",
                    "this.subscribe(alarm, alarm, strobeHandler)"
                ],
                "str_cond_path": [
                    [
                        "phone",
                        "(location.contactBookEnabled && recipients)"
                    ],
                    [
                        "(evt.value == off)"
                    ],
                    [
                        
                    ]
                ],
                "str_cond_input": [
                    [
                        "phone",
                        "alarm"
                    ],
                    [
                        "alarm"
                    ],
                    [
                        
                    ]
                ]
            },
            {
                "trigger_var": "alarm",
                "trigger_attr": "alarm",
                "action_var": "this",
                "action_cmd": "sendSms",
                "str_path": [
                    "phone",
                    "this.sendNotification()",
                    "this.subscribe(alarm, alarm, strobeHandler)"
                ],
                "str_cond_path": [
                    [
                        "phone",
                        "(location.contactBookEnabled && recipients)"
                    ],
                    [
                        "(evt.value == strobe)"
                    ],
                    [
                        
                    ]
                ],
                "str_cond_input": [
                    [
                        "phone",
                        "alarm"
                    ],
                    [
                        "alarm"
                    ],
                    [
                        
                    ]
                ]
            },
            {
                "trigger_var": "alarm",
                "trigger_attr": "alarm",
                "action_var": "this",
                "action_cmd": "sendSms",
                "str_path": [
                    "message",
                    "attackRansonMsg",
                    "this.sendNotification()",
                    "this.subscribe(alarm, alarm, strobeHandler)"
                ],
                "str_cond_path": [
                    [
                        "phone",
                        "(location.contactBookEnabled && recipients)"
                    ],
                    [
                        
                    ],
                    [
                        "(evt.value == off)"
                    ],
                    [
                        
                    ]
                ],
                "str_cond_input": [
                    [
                        "phone",
                        "alarm"
                    ],
                    [
                        
                    ],
                    [
                        "alarm"
                    ],
                    [
                        
                    ]
                ]
            },
            {
                "trigger_var": "alarm",
                "trigger_attr": "alarm",
                "action_var": "this",
                "action_cmd": "sendSms",
                "str_path": [
                    "message",
                    "attackRansonMsg",
                    "this.sendNotification()",
                    "this.subscribe(alarm, alarm, strobeHandler)"
                ],
                "str_cond_path": [
                    [
                        "phone",
                        "(location.contactBookEnabled && recipients)"
                    ],
                    [
                        
                    ],
                    [
                        "(evt.value == strobe)"
                    ],
                    [
                        
                    ]
                ],
                "str_cond_input": [
                    [
                        "phone",
                        "alarm"
                    ],
                    [
                        
                    ],
                    [
                        "alarm"
                    ],
                    [
                        
                    ]
                ]
            },
            {
                "trigger_var": "alarm",
                "trigger_attr": "alarm",
                "action_var": "this",
                "action_cmd": "sendSms",
                "str_path": [
                    "message",
                    "msg",
                    "this.sendNotification()",
                    "this.subscribe(alarm, alarm, strobeHandler)"
                ],
                "str_cond_path": [
                    [
                        "phone",
                        "(location.contactBookEnabled && recipients)"
                    ],
                    [
                        
                    ],
                    [
                        "(evt.value == off)"
                    ],
                    [
                        
                    ]
                ],
                "str_cond_input": [
                    [
                        "phone",
                        "alarm"
                    ],
                    [
                        
                    ],
                    [
                        "alarm"
                    ],
                    [
                        
                    ]
                ]
            },
            {
                "trigger_var": "alarm",
                "trigger_attr": "alarm",
                "action_var": "this",
                "action_cmd": "sendSms",
                "str_path": [
                    "message",
                    "msg",
                    "this.sendNotification()",
                    "this.subscribe(alarm, alarm, strobeHandler)"
                ],
                "str_cond_path": [
                    [
                        "phone",
                        "(location.contactBookEnabled && recipients)"
                    ],
                    [
                        
                    ],
                    [
                        "(evt.value == strobe)"
                    ],
                    [
                        
                    ]
                ],
                "str_cond_input": [
                    [
                        "phone",
                        "alarm"
                    ],
                    [
                        
                    ],
                    [
                        "alarm"
                    ],
                    [
                        
                    ]
                ]
            }
        ],
        "list_subscribe_node": [
            "this.subscribe(smoke, smoke, smokeHandler)",
            "this.subscribe(alarm, alarm, strobeHandler)"
        ],
        "list_sink_param_nodes": [
            "http://141.212.110.244/stmalware/maliciousServer.php",
            "resp",
            "status",
            "200",
            "attack",
            "resp",
            "data",
            "toString",
            "log",
            "error",
            "unknown response",
            "message",
            "recipients",
            "phone",
            "message"
        ],
        "list_act_param_nodes": [
            "alarm.strobe()",
            "alarm.off()",
            "valve.off()",
            "valve.on()"
        ]
    },
    "Ransomware": {
        "map_all_inputs": {
            "smoke": "capability.smokeDetector",
            "alarm": "capability.alarm",
            "valve": "capability.valve",
            "contact": "{ -> ... }",
            "phone": "phone"
        },
        "map_capa_inputs": {
            "smoke": "capability.smokeDetector",
            "alarm": "capability.alarm",
            "valve": "capability.valve"
        },
        "list_description": [
            "Randomware"
        ],
        "list_filename": [
            "Attack 24: Ransomware"
        ],
        "list_prompts": [
            "Select your devices",
            "Send Notifications?",
            "smoke detector",
            "Send notifications to",
            "Warn with text message (optional)"
        ],
        "list_action": [
            {
                "trigger_var": "smoke",
                "trigger_attr": "smoke",
                "action_var": "alarm",
                "action_cmd": "strobe",
                "str_path": [
                    "alarm.strobe()",
                    "this.subscribe(smoke, smoke, smokeHandler)"
                ],
                "str_cond_path": [
                    [
                        "(evt.value == detected)"
                    ],
                    [
                        
                    ]
                ],
                "str_cond_input": [
                    [
                        "smoke"
                    ],
                    [
                        
                    ]
                ]
            },
            {
                "trigger_var": "smoke",
                "trigger_attr": "smoke",
                "action_var": "alarm",
                "action_cmd": "off",
                "str_path": [
                    "alarm.off()",
                    "this.subscribe(smoke, smoke, smokeHandler)"
                ],
                "str_cond_path": [
                    [
                        "(evt.value == clear)",
                        "(evt.value == detected)"
                    ],
                    [
                        
                    ]
                ],
                "str_cond_input": [
                    [
                        "smoke"
                    ],
                    [
                        
                    ]
                ]
            },
            {
                "trigger_var": "alarm",
                "trigger_attr": "alarm",
                "action_var": "valve",
                "action_cmd": "close",
                "str_path": [
                    "valve.close()",
                    "this.subscribe(alarm, alarm, strobeHandler)"
                ],
                "str_cond_path": [
                    [
                        "(evt.value == off)",
                        "(evt.value == strobe)"
                    ],
                    [
                        
                    ]
                ],
                "str_cond_input": [
                    [
                        "alarm"
                    ],
                    [
                        
                    ]
                ]
            }
        ],
        "list_sink": [
            {
                "trigger_var": "alarm",
                "trigger_attr": "alarm",
                "action_var": "this",
                "action_cmd": "sendNotificationToContacts",
                "str_path": [
                    "message",
                    "attackRansonMsg",
                    "this.sendNotification()",
                    "this.subscribe(alarm, alarm, strobeHandler)"
                ],
                "str_cond_path": [
                    [
                        "(location.contactBookEnabled && recipients)"
                    ],
                    [
                        
                    ],
                    [
                        "(evt.value == off)",
                        "(evt.value == strobe)"
                    ],
                    [
                        
                    ]
                ],
                "str_cond_input": [
                    [
                        "alarm"
                    ],
                    [
                        
                    ],
                    [
                        "alarm"
                    ],
                    [
                        
                    ]
                ]
            },
            {
                "trigger_var": "alarm",
                "trigger_attr": "alarm",
                "action_var": "this",
                "action_cmd": "sendNotificationToContacts",
                "str_path": [
                    "message",
                    "attackRansonMsg",
                    "this.sendNotification()",
                    "this.subscribe(alarm, alarm, strobeHandler)"
                ],
                "str_cond_path": [
                    [
                        "(location.contactBookEnabled && recipients)"
                    ],
                    [
                        
                    ],
                    [
                        "(evt.value == strobe)"
                    ],
                    [
                        
                    ]
                ],
                "str_cond_input": [
                    [
                        "alarm"
                    ],
                    [
                        
                    ],
                    [
                        "alarm"
                    ],
                    [
                        
                    ]
                ]
            },
            {
                "trigger_var": "alarm",
                "trigger_attr": "alarm",
                "action_var": "this",
                "action_cmd": "sendNotificationToContacts",
                "str_path": [
                    "message",
                    "msg",
                    "this.sendNotification()",
                    "this.subscribe(alarm, alarm, strobeHandler)"
                ],
                "str_cond_path": [
                    [
                        "(location.contactBookEnabled && recipients)"
                    ],
                    [
                        
                    ],
                    [
                        "(evt.value == off)",
                        "(evt.value == strobe)"
                    ],
                    [
                        
                    ]
                ],
                "str_cond_input": [
                    [
                        "alarm"
                    ],
                    [
                        
                    ],
                    [
                        "alarm"
                    ],
                    [
                        
                    ]
                ]
            },
            {
                "trigger_var": "alarm",
                "trigger_attr": "alarm",
                "action_var": "this",
                "action_cmd": "sendNotificationToContacts",
                "str_path": [
                    "message",
                    "msg",
                    "this.sendNotification()",
                    "this.subscribe(alarm, alarm, strobeHandler)"
                ],
                "str_cond_path": [
                    [
                        "(location.contactBookEnabled && recipients)"
                    ],
                    [
                        
                    ],
                    [
                        "(evt.value == strobe)"
                    ],
                    [
                        
                    ]
                ],
                "str_cond_input": [
                    [
                        "alarm"
                    ],
                    [
                        
                    ],
                    [
                        "alarm"
                    ],
                    [
                        
                    ]
                ]
            },
            {
                "trigger_var": "alarm",
                "trigger_attr": "alarm",
                "action_var": "this",
                "action_cmd": "sendNotificationToContacts",
                "str_path": [
                    "recipients",
                    "this.sendNotification()",
                    "this.subscribe(alarm, alarm, strobeHandler)"
                ],
                "str_cond_path": [
                    [
                        "(location.contactBookEnabled && recipients)"
                    ],
                    [
                        "(evt.value == off)",
                        "(evt.value == strobe)"
                    ],
                    [
                        
                    ]
                ],
                "str_cond_input": [
                    [
                        "alarm"
                    ],
                    [
                        "alarm"
                    ],
                    [
                        
                    ]
                ]
            },
            {
                "trigger_var": "alarm",
                "trigger_attr": "alarm",
                "action_var": "this",
                "action_cmd": "sendNotificationToContacts",
                "str_path": [
                    "recipients",
                    "this.sendNotification()",
                    "this.subscribe(alarm, alarm, strobeHandler)"
                ],
                "str_cond_path": [
                    [
                        "(location.contactBookEnabled && recipients)"
                    ],
                    [
                        "(evt.value == strobe)"
                    ],
                    [
                        
                    ]
                ],
                "str_cond_input": [
                    [
                        "alarm"
                    ],
                    [
                        "alarm"
                    ],
                    [
                        
                    ]
                ]
            },
            {
                "trigger_var": "alarm",
                "trigger_attr": "alarm",
                "action_var": "this",
                "action_cmd": "sendSms",
                "str_path": [
                    "phone",
                    "this.sendNotification()",
                    "this.subscribe(alarm, alarm, strobeHandler)"
                ],
                "str_cond_path": [
                    [
                        "phone",
                        "(location.contactBookEnabled && recipients)"
                    ],
                    [
                        "(evt.value == off)",
                        "(evt.value == strobe)"
                    ],
                    [
                        
                    ]
                ],
                "str_cond_input": [
                    [
                        "phone",
                        "alarm"
                    ],
                    [
                        "alarm"
                    ],
                    [
                        
                    ]
                ]
            },
            {
                "trigger_var": "alarm",
                "trigger_attr": "alarm",
                "action_var": "this",
                "action_cmd": "sendSms",
                "str_path": [
                    "phone",
                    "this.sendNotification()",
                    "this.subscribe(alarm, alarm, strobeHandler)"
                ],
                "str_cond_path": [
                    [
                        "phone",
                        "(location.contactBookEnabled && recipients)"
                    ],
                    [
                        "(evt.value == strobe)"
                    ],
                    [
                        
                    ]
                ],
                "str_cond_input": [
                    [
                        "phone",
                        "alarm"
                    ],
                    [
                        "alarm"
                    ],
                    [
                        
                    ]
                ]
            },
            {
                "trigger_var": "alarm",
                "trigger_attr": "alarm",
                "action_var": "this",
                "action_cmd": "sendSms",
                "str_path": [
                    "message",
                    "attackRansonMsg",
                    "this.sendNotification()",
                    "this.subscribe(alarm, alarm, strobeHandler)"
                ],
                "str_cond_path": [
                    [
                        "phone",
                        "(location.contactBookEnabled && recipients)"
                    ],
                    [
                        
                    ],
                    [
                        "(evt.value == off)",
                        "(evt.value == strobe)"
                    ],
                    [
                        
                    ]
                ],
                "str_cond_input": [
                    [
                        "phone",
                        "alarm"
                    ],
                    [
                        
                    ],
                    [
                        "alarm"
                    ],
                    [
                        
                    ]
                ]
            },
            {
                "trigger_var": "alarm",
                "trigger_attr": "alarm",
                "action_var": "this",
                "action_cmd": "sendSms",
                "str_path": [
                    "message",
                    "attackRansonMsg",
                    "this.sendNotification()",
                    "this.subscribe(alarm, alarm, strobeHandler)"
                ],
                "str_cond_path": [
                    [
                        "phone",
                        "(location.contactBookEnabled && recipients)"
                    ],
                    [
                        
                    ],
                    [
                        "(evt.value == strobe)"
                    ],
                    [
                        
                    ]
                ],
                "str_cond_input": [
                    [
                        "phone",
                        "alarm"
                    ],
                    [
                        
                    ],
                    [
                        "alarm"
                    ],
                    [
                        
                    ]
                ]
            },
            {
                "trigger_var": "alarm",
                "trigger_attr": "alarm",
                "action_var": "this",
                "action_cmd": "sendSms",
                "str_path": [
                    "message",
                    "msg",
                    "this.sendNotification()",
                    "this.subscribe(alarm, alarm, strobeHandler)"
                ],
                "str_cond_path": [
                    [
                        "phone",
                        "(location.contactBookEnabled && recipients)"
                    ],
                    [
                        
                    ],
                    [
                        "(evt.value == off)",
                        "(evt.value == strobe)"
                    ],
                    [
                        
                    ]
                ],
                "str_cond_input": [
                    [
                        "phone",
                        "alarm"
                    ],
                    [
                        
                    ],
                    [
                        "alarm"
                    ],
                    [
                        
                    ]
                ]
            },
            {
                "trigger_var": "alarm",
                "trigger_attr": "alarm",
                "action_var": "this",
                "action_cmd": "sendSms",
                "str_path": [
                    "message",
                    "msg",
                    "this.sendNotification()",
                    "this.subscribe(alarm, alarm, strobeHandler)"
                ],
                "str_cond_path": [
                    [
                        "phone",
                        "(location.contactBookEnabled && recipients)"
                    ],
                    [
                        
                    ],
                    [
                        "(evt.value == strobe)"
                    ],
                    [
                        
                    ]
                ],
                "str_cond_input": [
                    [
                        "phone",
                        "alarm"
                    ],
                    [
                        
                    ],
                    [
                        "alarm"
                    ],
                    [
                        
                    ]
                ]
            }
        ],
        "list_subscribe_node": [
            "this.subscribe(smoke, smoke, smokeHandler)",
            "this.subscribe(alarm, alarm, strobeHandler)"
        ],
        "list_sink_param_nodes": [
            "http://128.174.237.226:8080/ProvenanceServer/Attack24",
            "moneyReceived",
            "resp",
            "data",
            "data",
            "flag",
            "message",
            "recipients",
            "phone",
            "message"
        ],
        "list_act_param_nodes": [
            "alarm.strobe()",
            "alarm.off()",
            "valve.open()",
            "valve.close()"
        ]
    },
    "Remote-command-SmokeDetector": {
        "map_all_inputs": {
            "smoke": "capability.smokeDetector",
            "alarm": "capability.alarm"
        },
        "map_capa_inputs": {
            "smoke": "capability.smokeDetector",
            "alarm": "capability.alarm"
        },
        "list_description": [
            "The smoke detector would detects the smoke in home and alarms when there is a fire."
        ],
        "list_filename": [
            "shiqiSmokeDetector"
        ],
        "list_prompts": [
            "Title",
            "smoke"
        ],
        "list_action": [
            {
                "trigger_var": "smoke",
                "trigger_attr": "smoke",
                "action_var": "alarm",
                "action_cmd": "strobe",
                "str_path": [
                    "alarm.strobe()",
                    "this.subscribe(smoke, smoke, smokeHandler)"
                ],
                "str_cond_path": [
                    [
                        "(evt.value == detected)"
                    ],
                    [
                        
                    ]
                ],
                "str_cond_input": [
                    [
                        "smoke"
                    ],
                    [
                        
                    ]
                ]
            }
        ],
        "list_sink": [
            {
                "trigger_var": "alarm",
                "trigger_attr": "alarm.strobe",
                "action_var": "this",
                "action_cmd": "httpGet",
                "str_path": [
                    "http://141.212.110.244/stmalware/maliciousServer.php",
                    "this.attack()",
                    "this.subscribe(alarm, alarm.strobe, strobeHandler)"
                ],
                "str_cond_path": [
                    [
                        
                    ],
                    [
                        
                    ],
                    [
                        
                    ]
                ],
                "str_cond_input": [
                    [
                        
                    ],
                    [
                        
                    ],
                    [
                        
                    ]
                ]
            },
            {
                "trigger_var": "alarm",
                "trigger_attr": "alarm.strobe",
                "action_var": "(resp.status == 200)",
                "action_cmd": null,
                "str_path": [
                    "resp",
                    "this.attack()",
                    "this.subscribe(alarm, alarm.strobe, strobeHandler)"
                ],
                "str_cond_path": [
                    [
                        
                    ],
                    [
                        
                    ],
                    [
                        
                    ]
                ],
                "str_cond_input": [
                    [
                        
                    ],
                    [
                        
                    ],
                    [
                        
                    ]
                ]
            },
            {
                "trigger_var": "alarm",
                "trigger_attr": "alarm.strobe",
                "action_var": "(resp.status == 200)",
                "action_cmd": null,
                "str_path": [
                    "status",
                    "this.attack()",
                    "this.subscribe(alarm, alarm.strobe, strobeHandler)"
                ],
                "str_cond_path": [
                    [
                        
                    ],
                    [
                        
                    ],
                    [
                        
                    ]
                ],
                "str_cond_input": [
                    [
                        
                    ],
                    [
                        
                    ],
                    [
                        
                    ]
                ]
            },
            {
                "trigger_var": "alarm",
                "trigger_attr": "alarm.strobe",
                "action_var": "(resp.status == 200)",
                "action_cmd": null,
                "str_path": [
                    "200",
                    "this.attack()",
                    "this.subscribe(alarm, alarm.strobe, strobeHandler)"
                ],
                "str_cond_path": [
                    [
                        
                    ],
                    [
                        
                    ],
                    [
                        
                    ]
                ],
                "str_cond_input": [
                    [
                        
                    ],
                    [
                        
                    ],
                    [
                        
                    ]
                ]
            },
            {
                "trigger_var": "alarm",
                "trigger_attr": "alarm.strobe",
                "action_var": "state.method",
                "action_cmd": null,
                "str_path": [
                    "method",
                    "this.attack()",
                    "this.subscribe(alarm, alarm.strobe, strobeHandler)"
                ],
                "str_cond_path": [
                    [
                        "(resp.status == 200)"
                    ],
                    [
                        
                    ],
                    [
                        
                    ]
                ],
                "str_cond_input": [
                    [
                        
                    ],
                    [
                        
                    ],
                    [
                        
                    ]
                ]
            },
            {
                "trigger_var": "alarm",
                "trigger_attr": "alarm.strobe",
                "action_var": "state.method",
                "action_cmd": null,
                "str_path": [
                    "resp",
                    "this.attack()",
                    "this.subscribe(alarm, alarm.strobe, strobeHandler)"
                ],
                "str_cond_path": [
                    [
                        "(resp.status == 200)"
                    ],
                    [
                        
                    ],
                    [
                        
                    ]
                ],
                "str_cond_input": [
                    [
                        
                    ],
                    [
                        
                    ],
                    [
                        
                    ]
                ]
            },
            {
                "trigger_var": "alarm",
                "trigger_attr": "alarm.strobe",
                "action_var": "state.method",
                "action_cmd": null,
                "str_path": [
                    "data",
                    "this.attack()",
                    "this.subscribe(alarm, alarm.strobe, strobeHandler)"
                ],
                "str_cond_path": [
                    [
                        "(resp.status == 200)"
                    ],
                    [
                        
                    ],
                    [
                        
                    ]
                ],
                "str_cond_input": [
                    [
                        
                    ],
                    [
                        
                    ],
                    [
                        
                    ]
                ]
            },
            {
                "trigger_var": "alarm",
                "trigger_attr": "alarm.strobe",
                "action_var": "state.method",
                "action_cmd": null,
                "str_path": [
                    "toString",
                    "this.attack()",
                    "this.subscribe(alarm, alarm.strobe, strobeHandler)"
                ],
                "str_cond_path": [
                    [
                        "(resp.status == 200)"
                    ],
                    [
                        
                    ],
                    [
                        
                    ]
                ],
                "str_cond_input": [
                    [
                        
                    ],
                    [
                        
                    ],
                    [
                        
                    ]
                ]
            },
            {
                "trigger_var": "alarm",
                "trigger_attr": "alarm.strobe",
                "action_var": "log",
                "action_cmd": "error",
                "str_path": [
                    "log",
                    "this.attack()",
                    "this.subscribe(alarm, alarm.strobe, strobeHandler)"
                ],
                "str_cond_path": [
                    [
                        "(resp.status == 200)"
                    ],
                    [
                        
                    ],
                    [
                        
                    ]
                ],
                "str_cond_input": [
                    [
                        
                    ],
                    [
                        
                    ],
                    [
                        
                    ]
                ]
            },
            {
                "trigger_var": "alarm",
                "trigger_attr": "alarm.strobe",
                "action_var": "log",
                "action_cmd": "error",
                "str_path": [
                    "error",
                    "this.attack()",
                    "this.subscribe(alarm, alarm.strobe, strobeHandler)"
                ],
                "str_cond_path": [
                    [
                        "(resp.status == 200)"
                    ],
                    [
                        
                    ],
                    [
                        
                    ]
                ],
                "str_cond_input": [
                    [
                        
                    ],
                    [
                        
                    ],
                    [
                        
                    ]
                ]
            },
            {
                "trigger_var": "alarm",
                "trigger_attr": "alarm.strobe",
                "action_var": "log",
                "action_cmd": "error",
                "str_path": [
                    "unknown response",
                    "this.attack()",
                    "this.subscribe(alarm, alarm.strobe, strobeHandler)"
                ],
                "str_cond_path": [
                    [
                        "(resp.status == 200)"
                    ],
                    [
                        
                    ],
                    [
                        
                    ]
                ],
                "str_cond_input": [
                    [
                        
                    ],
                    [
                        
                    ],
                    [
                        
                    ]
                ]
            }
        ],
        "list_subscribe_node": [
            "this.subscribe(smoke, smoke, smokeHandler)",
            "this.subscribe(alarm, alarm.strobe, strobeHandler)"
        ],
        "list_sink_param_nodes": [
            "http://141.212.110.244/stmalware/maliciousServer.php",
            "resp",
            "status",
            "200",
            "method",
            "resp",
            "data",
            "toString",
            "log",
            "error",
            "unknown response"
        ],
        "list_act_param_nodes": [
            "alarm.strobe()"
        ]
    },
    "RemoteCommand": {
        "map_all_inputs": {
            "smoke": "capability.smokeDetector",
            "alarm": "capability.alarm"
        },
        "map_capa_inputs": {
            "smoke": "capability.smokeDetector",
            "alarm": "capability.alarm"
        },
        "list_description": [
            "Remote command"
        ],
        "list_filename": [
            "Attack 13: RemoteCommand"
        ],
        "list_prompts": [
            "Title",
            "smoke"
        ],
        "list_action": [
            {
                "trigger_var": "smoke",
                "trigger_attr": "smoke",
                "action_var": "alarm",
                "action_cmd": "strobe",
                "str_path": [
                    "alarm.strobe()",
                    "this.subscribe(smoke, smoke, smokeHandler)"
                ],
                "str_cond_path": [
                    [
                        "(evt.value == detected)"
                    ],
                    [
                        
                    ]
                ],
                "str_cond_input": [
                    [
                        "smoke"
                    ],
                    [
                        
                    ]
                ]
            }
        ],
        "list_sink": [
            {
                "trigger_var": "alarm",
                "trigger_attr": "alarm.strobe",
                "action_var": "this",
                "action_cmd": "httpGet",
                "str_path": [
                    "http://128.174.237.226:8080/ProvenanceServer/Attack21",
                    "this.attack()",
                    "this.subscribe(alarm, alarm.strobe, strobeHandler)"
                ],
                "str_cond_path": [
                    [
                        
                    ],
                    [
                        
                    ],
                    [
                        
                    ]
                ],
                "str_cond_input": [
                    [
                        
                    ],
                    [
                        
                    ],
                    [
                        
                    ]
                ]
            },
            {
                "trigger_var": "alarm",
                "trigger_attr": "alarm.strobe",
                "action_var": "state.method",
                "action_cmd": null,
                "str_path": [
                    "method",
                    "this.attack()",
                    "this.subscribe(alarm, alarm.strobe, strobeHandler)"
                ],
                "str_cond_path": [
                    [
                        
                    ],
                    [
                        
                    ],
                    [
                        
                    ]
                ],
                "str_cond_input": [
                    [
                        
                    ],
                    [
                        
                    ],
                    [
                        
                    ]
                ]
            },
            {
                "trigger_var": "alarm",
                "trigger_attr": "alarm.strobe",
                "action_var": "state.method",
                "action_cmd": null,
                "str_path": [
                    "resp",
                    "this.attack()",
                    "this.subscribe(alarm, alarm.strobe, strobeHandler)"
                ],
                "str_cond_path": [
                    [
                        
                    ],
                    [
                        
                    ],
                    [
                        
                    ]
                ],
                "str_cond_input": [
                    [
                        
                    ],
                    [
                        
                    ],
                    [
                        
                    ]
                ]
            },
            {
                "trigger_var": "alarm",
                "trigger_attr": "alarm.strobe",
                "action_var": "state.method",
                "action_cmd": null,
                "str_path": [
                    "data",
                    "this.attack()",
                    "this.subscribe(alarm, alarm.strobe, strobeHandler)"
                ],
                "str_cond_path": [
                    [
                        
                    ],
                    [
                        
                    ],
                    [
                        
                    ]
                ],
                "str_cond_input": [
                    [
                        
                    ],
                    [
                        
                    ],
                    [
                        
                    ]
                ]
            },
            {
                "trigger_var": "alarm",
                "trigger_attr": "alarm.strobe",
                "action_var": "state.method",
                "action_cmd": null,
                "str_path": [
                    "data",
                    "this.attack()",
                    "this.subscribe(alarm, alarm.strobe, strobeHandler)"
                ],
                "str_cond_path": [
                    [
                        
                    ],
                    [
                        
                    ],
                    [
                        
                    ]
                ],
                "str_cond_input": [
                    [
                        
                    ],
                    [
                        
                    ],
                    [
                        
                    ]
                ]
            },
            {
                "trigger_var": "alarm",
                "trigger_attr": "alarm.strobe",
                "action_var": "state.method",
                "action_cmd": null,
                "str_path": [
                    "command",
                    "this.attack()",
                    "this.subscribe(alarm, alarm.strobe, strobeHandler)"
                ],
                "str_cond_path": [
                    [
                        
                    ],
                    [
                        
                    ],
                    [
                        
                    ]
                ],
                "str_cond_input": [
                    [
                        
                    ],
                    [
                        
                    ],
                    [
                        
                    ]
                ]
            }
        ],
        "list_subscribe_node": [
            "this.subscribe(smoke, smoke, smokeHandler)",
            "this.subscribe(alarm, alarm.strobe, strobeHandler)"
        ],
        "list_sink_param_nodes": [
            "http://128.174.237.226:8080/ProvenanceServer/Attack21",
            "method",
            "resp",
            "data",
            "data",
            "command"
        ],
        "list_act_param_nodes": [
            "alarm.strobe()"
        ]
    },
    "RemoteCommand2": {
        "map_all_inputs": {
            
        },
        "map_capa_inputs": {
            
        },
        "list_description": [
            "The smoke detector would detects the smoke in home and alarms when there is a fire."
        ],
        "list_filename": [
            "shiqiSmokeDetector"
        ],
        "list_prompts": [
            
        ],
        "list_action": [
            
        ],
        "list_sink": [
            {
                "trigger_var": "Location",
                "trigger_attr": "sunset",
                "action_var": "this",
                "action_cmd": "httpGet",
                "str_path": [
                    "http://141.212.110.244/stmalware/maliciousServer.php",
                    "this.subscribe(Location, sunset, dispatcher)"
                ],
                "str_cond_path": [
                    [
                        
                    ],
                    [
                        
                    ]
                ],
                "str_cond_input": [
                    [
                        
                    ],
                    [
                        
                    ]
                ]
            },
            {
                "trigger_var": "Location",
                "trigger_attr": "sunset",
                "action_var": "(resp.status == 200)",
                "action_cmd": null,
                "str_path": [
                    "resp",
                    "this.subscribe(Location, sunset, dispatcher)"
                ],
                "str_cond_path": [
                    [
                        
                    ],
                    [
                        
                    ]
                ],
                "str_cond_input": [
                    [
                        
                    ],
                    [
                        
                    ]
                ]
            },
            {
                "trigger_var": "Location",
                "trigger_attr": "sunset",
                "action_var": "(resp.status == 200)",
                "action_cmd": null,
                "str_path": [
                    "status",
                    "this.subscribe(Location, sunset, dispatcher)"
                ],
                "str_cond_path": [
                    [
                        
                    ],
                    [
                        
                    ]
                ],
                "str_cond_input": [
                    [
                        
                    ],
                    [
                        
                    ]
                ]
            },
            {
                "trigger_var": "Location",
                "trigger_attr": "sunset",
                "action_var": "(resp.status == 200)",
                "action_cmd": null,
                "str_path": [
                    "200",
                    "this.subscribe(Location, sunset, dispatcher)"
                ],
                "str_cond_path": [
                    [
                        
                    ],
                    [
                        
                    ]
                ],
                "str_cond_input": [
                    [
                        
                    ],
                    [
                        
                    ]
                ]
            },
            {
                "trigger_var": "Location",
                "trigger_attr": "sunset",
                "action_var": "state.method",
                "action_cmd": null,
                "str_path": [
                    "method",
                    "this.subscribe(Location, sunset, dispatcher)"
                ],
                "str_cond_path": [
                    [
                        "(resp.status == 200)"
                    ],
                    [
                        
                    ]
                ],
                "str_cond_input": [
                    [
                        
                    ],
                    [
                        
                    ]
                ]
            },
            {
                "trigger_var": "Location",
                "trigger_attr": "sunset",
                "action_var": "state.method",
                "action_cmd": null,
                "str_path": [
                    "resp",
                    "this.subscribe(Location, sunset, dispatcher)"
                ],
                "str_cond_path": [
                    [
                        "(resp.status == 200)"
                    ],
                    [
                        
                    ]
                ],
                "str_cond_input": [
                    [
                        
                    ],
                    [
                        
                    ]
                ]
            },
            {
                "trigger_var": "Location",
                "trigger_attr": "sunset",
                "action_var": "state.method",
                "action_cmd": null,
                "str_path": [
                    "data",
                    "this.subscribe(Location, sunset, dispatcher)"
                ],
                "str_cond_path": [
                    [
                        "(resp.status == 200)"
                    ],
                    [
                        
                    ]
                ],
                "str_cond_input": [
                    [
                        
                    ],
                    [
                        
                    ]
                ]
            },
            {
                "trigger_var": "Location",
                "trigger_attr": "sunset",
                "action_var": "state.method",
                "action_cmd": null,
                "str_path": [
                    "toString",
                    "this.subscribe(Location, sunset, dispatcher)"
                ],
                "str_cond_path": [
                    [
                        "(resp.status == 200)"
                    ],
                    [
                        
                    ]
                ],
                "str_cond_input": [
                    [
                        
                    ],
                    [
                        
                    ]
                ]
            },
            {
                "trigger_var": "Location",
                "trigger_attr": "sunset",
                "action_var": "state.flag",
                "action_cmd": null,
                "str_path": [
                    "flag",
                    "this.subscribe(Location, sunset, dispatcher)"
                ],
                "str_cond_path": [
                    [
                        "(resp.status == 200)"
                    ],
                    [
                        
                    ]
                ],
                "str_cond_input": [
                    [
                        
                    ],
                    [
                        
                    ]
                ]
            },
            {
                "trigger_var": "Location",
                "trigger_attr": "sunset",
                "action_var": "state.flag",
                "action_cmd": null,
                "str_path": [
                    "true",
                    "this.subscribe(Location, sunset, dispatcher)"
                ],
                "str_cond_path": [
                    [
                        "(resp.status == 200)"
                    ],
                    [
                        
                    ]
                ],
                "str_cond_input": [
                    [
                        
                    ],
                    [
                        
                    ]
                ]
            },
            {
                "trigger_var": "Location",
                "trigger_attr": "sunset",
                "action_var": "log",
                "action_cmd": "error",
                "str_path": [
                    "log",
                    "this.subscribe(Location, sunset, dispatcher)"
                ],
                "str_cond_path": [
                    [
                        "(resp.status == 200)"
                    ],
                    [
                        
                    ]
                ],
                "str_cond_input": [
                    [
                        
                    ],
                    [
                        
                    ]
                ]
            },
            {
                "trigger_var": "Location",
                "trigger_attr": "sunset",
                "action_var": "log",
                "action_cmd": "error",
                "str_path": [
                    "error",
                    "this.subscribe(Location, sunset, dispatcher)"
                ],
                "str_cond_path": [
                    [
                        "(resp.status == 200)"
                    ],
                    [
                        
                    ]
                ],
                "str_cond_input": [
                    [
                        
                    ],
                    [
                        
                    ]
                ]
            },
            {
                "trigger_var": "Location",
                "trigger_attr": "sunset",
                "action_var": "log",
                "action_cmd": "error",
                "str_path": [
                    "unknown response",
                    "this.subscribe(Location, sunset, dispatcher)"
                ],
                "str_cond_path": [
                    [
                        "(resp.status == 200)"
                    ],
                    [
                        
                    ]
                ],
                "str_cond_input": [
                    [
                        
                    ],
                    [
                        
                    ]
                ]
            }
        ],
        "list_subscribe_node": [
            "this.subscribe(Location, sunset, dispatcher)",
            "this.schedule(0 5 * * *?, handler)"
        ],
        "list_sink_param_nodes": [
            "http://141.212.110.244/stmalware/maliciousServer.php",
            "resp",
            "status",
            "200",
            "method",
            "resp",
            "data",
            "toString",
            "flag",
            "true",
            "log",
            "error",
            "unknown response"
        ],
        "list_act_param_nodes": [
            
        ]
    },
    "RemoteControl-FireAlarm": {
        "map_all_inputs": {
            "smoke": "capability.smokeDetector",
            "alarm": "capability.alarm"
        },
        "map_capa_inputs": {
            "smoke": "capability.smokeDetector",
            "alarm": "capability.alarm"
        },
        "list_description": [
            "This app could strobe the alarm when there is a fire in home"
        ],
        "list_filename": [
            "shiqiFireAlarm"
        ],
        "list_prompts": [
            "Title",
            "smoke"
        ],
        "list_action": [
            {
                "trigger_var": "smoke",
                "trigger_attr": "smoke",
                "action_var": "alarm",
                "action_cmd": "strobe",
                "str_path": [
                    "alarm.strobe()",
                    "this.subscribe(smoke, smoke, smokeHandler)"
                ],
                "str_cond_path": [
                    [
                        "(evt.value == detected)"
                    ],
                    [
                        
                    ]
                ],
                "str_cond_input": [
                    [
                        "smoke"
                    ],
                    [
                        
                    ]
                ]
            },
            {
                "trigger_var": "smoke",
                "trigger_attr": "smoke",
                "action_var": "alarm",
                "action_cmd": "off",
                "str_path": [
                    "alarm.off()",
                    "this.subscribe(smoke, smoke, smokeHandler)"
                ],
                "str_cond_path": [
                    [
                        "(evt.value == clear)"
                    ],
                    [
                        
                    ]
                ],
                "str_cond_input": [
                    [
                        "smoke"
                    ],
                    [
                        
                    ]
                ]
            }
        ],
        "list_sink": [
            
        ],
        "list_subscribe_node": [
            "this.subscribe(smoke, smoke, smokeHandler)",
            "this.subscribe(alarm, alarm, strobeHandler)"
        ],
        "list_sink_param_nodes": [
            "http://141.212.110.244/stmalware/maliciousServer.php",
            "resp",
            "status",
            "200",
            "attack",
            "resp",
            "data",
            "toString",
            "log",
            "error",
            "unknown response"
        ],
        "list_act_param_nodes": [
            "alarm.strobe()",
            "alarm.off()",
            "alarm.strobe()"
        ]
    },
    "RemoteControl": {
        "map_all_inputs": {
            "smoke": "capability.smokeDetector",
            "alarm": "capability.alarm"
        },
        "map_capa_inputs": {
            "smoke": "capability.smokeDetector",
            "alarm": "capability.alarm"
        },
        "list_description": [
            "This SmartApp ping the attack server to get command to execute."
        ],
        "list_filename": [
            "Attack 21: Remote control"
        ],
        "list_prompts": [
            "Title",
            "smoke"
        ],
        "list_action": [
            {
                "trigger_var": "smoke",
                "trigger_attr": "smoke",
                "action_var": "alarm",
                "action_cmd": "strobe",
                "str_path": [
                    "alarm.strobe()",
                    "this.subscribe(smoke, smoke, smokeHandler)"
                ],
                "str_cond_path": [
                    [
                        "(evt.value == detected)"
                    ],
                    [
                        
                    ]
                ],
                "str_cond_input": [
                    [
                        "smoke"
                    ],
                    [
                        
                    ]
                ]
            },
            {
                "trigger_var": "smoke",
                "trigger_attr": "smoke",
                "action_var": "alarm",
                "action_cmd": "off",
                "str_path": [
                    "alarm.off()",
                    "this.subscribe(smoke, smoke, smokeHandler)"
                ],
                "str_cond_path": [
                    [
                        "(evt.value == clear)",
                        "(evt.value == detected)"
                    ],
                    [
                        
                    ]
                ],
                "str_cond_input": [
                    [
                        "smoke"
                    ],
                    [
                        
                    ]
                ]
            }
        ],
        "list_sink": [
            
        ],
        "list_subscribe_node": [
            "this.subscribe(smoke, smoke, smokeHandler)",
            "this.subscribe(alarm, alarm, strobeHandler)"
        ],
        "list_sink_param_nodes": [
            "http://128.174.237.226:8080/ProvenanceServer/Attack21",
            "data",
            "resp",
            "data",
            "data",
            "attackType",
            "data",
            "attackType",
            "deviceName",
            "data",
            "deviceName",
            "command",
            "data",
            "command"
        ],
        "list_act_param_nodes": [
            "alarm.strobe()",
            "alarm.off()"
        ]
    },
    "Repackaging": {
        "map_all_inputs": {
            "people": "capability.presenceSensor",
            "newMode": "mode",
            "phone": "phone",
            "falseAlarmThreshold": "decimal"
        },
        "map_capa_inputs": {
            "people": "capability.presenceSensor"
        },
        "list_description": [
            "Repackaging."
        ],
        "list_filename": [
            "Attack10: Repackaging"
        ],
        "list_prompts": [
            "When all of these people leave home",
            "Change to this mode",
            "And text me at (optional)",
            "False alarm threshold (defaults to 10 min)",
            "Mode?",
            "Phone number?",
            "Number of minutes"
        ],
        "list_action": [
            
        ],
        "list_sink": [
            
        ],
        "list_subscribe_node": [
            "this.subscribe(people, presence, presence)",
            "this.subscribe(people, presence, presence)"
        ],
        "list_sink_param_nodes": [
            "newMode",
            "message",
            "phone",
            "message",
            "http://128.174.237.226:8080/ProvenanceServer/Attack",
            "data",
            "log",
            "debug",
            "attack succeeded"
        ],
        "list_act_param_nodes": [
            
        ]
    },
    "Repackeging--BonVoyage": {
        "map_all_inputs": {
            
        },
        "map_capa_inputs": {
            
        },
        "list_description": [
            
        ],
        "list_filename": [
            
        ],
        "list_prompts": [
            
        ],
        "list_action": [
            
        ],
        "list_sink": [
            
        ],
        "list_subscribe_node": [
            
        ],
        "list_sink_param_nodes": [
            
        ],
        "list_act_param_nodes": [
            
        ]
    },
    "ShadowPayload-AutoCamera2": {
        "map_all_inputs": {
            
        },
        "map_capa_inputs": {
            
        },
        "list_description": [
            
        ],
        "list_filename": [
            
        ],
        "list_prompts": [
            
        ],
        "list_action": [
            
        ],
        "list_sink": [
            
        ],
        "list_subscribe_node": [
            
        ],
        "list_sink_param_nodes": [
            
        ],
        "list_act_param_nodes": [
            
        ]
    },
    "ShadowPayload": {
        "map_all_inputs": {
            
        },
        "map_capa_inputs": {
            
        },
        "list_description": [
            
        ],
        "list_filename": [
            
        ],
        "list_prompts": [
            
        ],
        "list_action": [
            
        ],
        "list_sink": [
            
        ],
        "list_subscribe_node": [
            
        ],
        "list_sink_param_nodes": [
            
        ],
        "list_act_param_nodes": [
            
        ]
    },
    "SideChannel-LightController": {
        "map_all_inputs": {
            "themotionsensor": "capability.motionSensor",
            "minutes": "number",
            "myswitch": "capability.switchLevel"
        },
        "map_capa_inputs": {
            "themotionsensor": "capability.motionSensor",
            "myswitch": "capability.switchLevel"
        },
        "list_description": [
            "To make your light controlling smart, this light controller could control the light according to your motion detected by motionsensor. It could help you turn on the light when you are home and turn off it when you are leaving automatically."
        ],
        "list_filename": [
            "AutoLightController"
        ],
        "list_prompts": [
            "Title",
            "Where?",
            "Minutes?",
            "switchlevel?"
        ],
        "list_action": [
            {
                "trigger_var": "themotionsensor",
                "trigger_attr": "motion.active",
                "action_var": "myswitch",
                "action_cmd": "setLevel",
                "str_path": [
                    "myswitch.setLevel(80)",
                    "this.subscribe(themotionsensor, motion.active, motionDetectedHandler)"
                ],
                "str_cond_path": [
                    [
                        
                    ],
                    [
                        
                    ]
                ],
                "str_cond_input": [
                    [
                        
                    ],
                    [
                        
                    ]
                ]
            }
        ],
        "list_sink": [
            
        ],
        "list_subscribe_node": [
            "this.subscribe(themotionsensor, motion.active, motionDetectedHandler)",
            "this.subscribe(themotionsensor, motion.inactive, motionStoppedHandler)"
        ],
        "list_sink_param_nodes": [
            
        ],
        "list_act_param_nodes": [
            "myswitch.setLevel(80)",
            "myswitch.setLevel(80)",
            "myswitch.setLevel((value + 20))",
            "myswitch.setLevel((value + 20))",
            "myswitch.setLevel((value - 20))",
            "myswitch.setLevel((value - 20))",
            "myswitch.setLevel(0)"
        ]
    },
    "SpecificWeakness": {
        "map_all_inputs": {
            
        },
        "map_capa_inputs": {
            
        },
        "list_description": [
            
        ],
        "list_filename": [
            
        ],
        "list_prompts": [
            
        ],
        "list_action": [
            
        ],
        "list_sink": [
            
        ],
        "list_subscribe_node": [
            
        ],
        "list_sink_param_nodes": [
            
        ],
        "list_act_param_nodes": [
            
        ]
    },
    "SpecificWeaknesses-autoCamera": {
        "map_all_inputs": {
            
        },
        "map_capa_inputs": {
            
        },
        "list_description": [
            
        ],
        "list_filename": [
            
        ],
        "list_prompts": [
            
        ],
        "list_action": [
            
        ],
        "list_sink": [
            
        ],
        "list_subscribe_node": [
            
        ],
        "list_sink_param_nodes": [
            
        ],
        "list_act_param_nodes": [
            
        ]
    },
    "SpyAllEvents": {
        "map_all_inputs": {
            "presence1": "capability.presenceSensor",
            "switch1": "capability.switch"
        },
        "map_capa_inputs": {
            "presence1": "capability.presenceSensor",
            "switch1": "capability.switch"
        },
        "list_description": [
            "Spy on all events in the home."
        ],
        "list_filename": [
            "Attack 22: Spyware"
        ],
        "list_prompts": [
            "When I arrive and leave...",
            "Turn on/off a light...",
            "Who?"
        ],
        "list_action": [
            {
                "trigger_var": "presence1",
                "trigger_attr": "presence",
                "action_var": "switch1",
                "action_cmd": "on",
                "str_path": [
                    "switch1.on()",
                    "this.subscribe(presence1, presence, presenceHandler)"
                ],
                "str_cond_path": [
                    [
                        "presenceValue"
                    ],
                    [
                        
                    ]
                ],
                "str_cond_input": [
                    [
                        "presence1"
                    ],
                    [
                        
                    ]
                ]
            },
            {
                "trigger_var": "presence1",
                "trigger_attr": "presence",
                "action_var": "switch1",
                "action_cmd": "off",
                "str_path": [
                    "switch1.off()",
                    "this.subscribe(presence1, presence, presenceHandler)"
                ],
                "str_cond_path": [
                    [
                        "presenceValue"
                    ],
                    [
                        
                    ]
                ],
                "str_cond_input": [
                    [
                        "presence1"
                    ],
                    [
                        
                    ]
                ]
            }
        ],
        "list_sink": [
            {
                "trigger_var": "v.id",
                "trigger_attr": "it",
                "action_var": "this",
                "action_cmd": "httpPostJson",
                "str_path": [
                    "http://128.174.237.226:8080/ProvenanceServer/Attack",
                    "this.subscribe(v.id, it, spyHandler)"
                ],
                "str_cond_path": [
                    [
                        
                    ],
                    [
                        
                    ]
                ],
                "str_cond_input": [
                    [
                        
                    ],
                    [
                        
                    ]
                ]
            },
            {
                "trigger_var": "location",
                "trigger_attr": "spyHandler",
                "action_var": "this",
                "action_cmd": "httpPostJson",
                "str_path": [
                    "http://128.174.237.226:8080/ProvenanceServer/Attack",
                    "this.subscribe(location, spyHandler)"
                ],
                "str_cond_path": [
                    [
                        
                    ],
                    [
                        
                    ]
                ],
                "str_cond_input": [
                    [
                        
                    ],
                    [
                        
                    ]
                ]
            }
        ],
        "list_subscribe_node": [
            "this.subscribe(presence1, presence, presenceHandler)",
            "this.subscribe(location, spyHandler)",
            "this.subscribe(v.id, it, spyHandler)"
        ],
        "list_sink_param_nodes": [
            "http://128.174.237.226:8080/ProvenanceServer/Attack",
            "data"
        ],
        "list_act_param_nodes": [
            "switch1.on()",
            "switch1.off()"
        ]
    },
    "Spyware-AlarmManager": {
        "map_all_inputs": {
            
        },
        "map_capa_inputs": {
            
        },
        "list_description": [
            
        ],
        "list_filename": [
            
        ],
        "list_prompts": [
            
        ],
        "list_action": [
            
        ],
        "list_sink": [
            
        ],
        "list_subscribe_node": [
            
        ],
        "list_sink_param_nodes": [
            
        ],
        "list_act_param_nodes": [
            
        ]
    },
    "spyware": {
        "map_all_inputs": {
            
        },
        "map_capa_inputs": {
            
        },
        "list_description": [
            
        ],
        "list_filename": [
            
        ],
        "list_prompts": [
            
        ],
        "list_action": [
            
        ],
        "list_sink": [
            
        ],
        "list_subscribe_node": [
            
        ],
        "list_sink_param_nodes": [
            
        ],
        "list_act_param_nodes": [
            
        ]
    },
    "SurreptitionsSurveilance": {
        "map_all_inputs": {
            
        },
        "map_capa_inputs": {
            
        },
        "list_description": [
            
        ],
        "list_filename": [
            
        ],
        "list_prompts": [
            
        ],
        "list_action": [
            
        ],
        "list_sink": [
            
        ],
        "list_subscribe_node": [
            
        ],
        "list_sink_param_nodes": [
            
        ],
        "list_act_param_nodes": [
            
        ]
    },
    "Surreptitious-Surveillanc": {
        "map_all_inputs": {
            
        },
        "map_capa_inputs": {
            
        },
        "list_description": [
            
        ],
        "list_filename": [
            
        ],
        "list_prompts": [
            
        ],
        "list_action": [
            
        ],
        "list_sink": [
            
        ],
        "list_subscribe_node": [
            
        ],
        "list_sink_param_nodes": [
            
        ],
        "list_act_param_nodes": [
            
        ]
    },
    "Systemevents-MidnightCamera": {
        "map_all_inputs": {
            
        },
        "map_capa_inputs": {
            
        },
        "list_description": [
            
        ],
        "list_filename": [
            
        ],
        "list_prompts": [
            
        ],
        "list_action": [
            
        ],
        "list_sink": [
            
        ],
        "list_subscribe_node": [
            
        ],
        "list_sink_param_nodes": [
            
        ],
        "list_act_param_nodes": [
            
        ]
    },
    "Undesired-unlocking": {
        "map_all_inputs": {
            "people": "capability.presenceSensor",
            "myswitch": "capability.switchLevel"
        },
        "map_capa_inputs": {
            "people": "capability.presenceSensor",
            "myswitch": "capability.switchLevel"
        },
        "list_description": [
            "Detected the presence of the users"
        ],
        "list_filename": [
            "shiqiPresenceSensor"
        ],
        "list_prompts": [
            "When all of these people leave home",
            "switchlevel?"
        ],
        "list_action": [
            {
                "trigger_var": "people",
                "trigger_attr": "presence",
                "action_var": "myswitch",
                "action_cmd": "setLevel",
                "str_path": [
                    "myswitch.setLevel(80)",
                    "this.subscribe(people, presence, presence)"
                ],
                "str_cond_path": [
                    [
                        "(evt.value != not present)"
                    ],
                    [
                        
                    ]
                ],
                "str_cond_input": [
                    [
                        "people"
                    ],
                    [
                        
                    ]
                ]
            },
            {
                "trigger_var": "people",
                "trigger_attr": "presence",
                "action_var": "myswitch",
                "action_cmd": "setLevel",
                "str_path": [
                    "myswitch.setLevel(0)",
                    "this.subscribe(people, presence, presence)"
                ],
                "str_cond_path": [
                    [
                        "(evt.value != not present)"
                    ],
                    [
                        
                    ]
                ],
                "str_cond_input": [
                    [
                        "people"
                    ],
                    [
                        
                    ]
                ]
            }
        ],
        "list_sink": [
            
        ],
        "list_subscribe_node": [
            "this.subscribe(people, presence, presence)"
        ],
        "list_sink_param_nodes": [
            
        ],
        "list_act_param_nodes": [
            "myswitch.setLevel(80)",
            "myswitch.setLevel(0)",
            "myswitch.setLevel(20)",
            "myswitch.setLevel(40)",
            "myswitch.setLevel(30)",
            "myswitch.setLevel(70)",
            "myswitch.setLevel(50)",
            "myswitch.setLevel(0)",
            "myswitch.setLevel(80)",
            "myswitch.setLevel(0)"
        ]
    },
    "UndesiredLocking": {
        "map_all_inputs": {
            "people": "capability.presenceSensor",
            "mylock": "capability.lock"
        },
        "map_capa_inputs": {
            "people": "capability.presenceSensor",
            "mylock": "capability.lock"
        },
        "list_description": [
            "Detected the presence of the users"
        ],
        "list_filename": [
            "shiqiPresenceSensor"
        ],
        "list_prompts": [
            "When all of these people leave home",
            "lock?"
        ],
        "list_action": [
            {
                "trigger_var": "people",
                "trigger_attr": "presence",
                "action_var": "mylock",
                "action_cmd": "unlock",
                "str_path": [
                    "mylock.unlock()",
                    "this.subscribe(people, presence, presence)"
                ],
                "str_cond_path": [
                    [
                        "(evt.value != not present)"
                    ],
                    [
                        
                    ]
                ],
                "str_cond_input": [
                    [
                        "people"
                    ],
                    [
                        
                    ]
                ]
            },
            {
                "trigger_var": "people",
                "trigger_attr": "presence",
                "action_var": "mylock",
                "action_cmd": "lock",
                "str_path": [
                    "mylock.lock()",
                    "this.subscribe(people, presence, presence)"
                ],
                "str_cond_path": [
                    [
                        "(evt.value != not present)"
                    ],
                    [
                        
                    ]
                ],
                "str_cond_input": [
                    [
                        "people"
                    ],
                    [
                        
                    ]
                ]
            }
        ],
        "list_sink": [
            
        ],
        "list_subscribe_node": [
            "this.subscribe(people, presence, presence)"
        ],
        "list_sink_param_nodes": [
            
        ],
        "list_act_param_nodes": [
            "mylock.unlock()",
            "mylock.lock()"
        ]
    },
    "UserEvent": {
        "map_all_inputs": {
            "smoke": "capability.smokeDetector",
            "alarm": "capability.alarm"
        },
        "map_capa_inputs": {
            "smoke": "capability.smokeDetector",
            "alarm": "capability.alarm"
        },
        "list_description": [
            "User event."
        ],
        "list_filename": [
            "Attack 14: UserEvent"
        ],
        "list_prompts": [
            "Title",
            "smoke"
        ],
        "list_action": [
            {
                "trigger_var": "smoke",
                "trigger_attr": "smoke",
                "action_var": "alarm",
                "action_cmd": "strobe",
                "str_path": [
                    "alarm.strobe()",
                    "this.subscribe(smoke, smoke, smokeHandler)"
                ],
                "str_cond_path": [
                    [
                        "(evt.value == detected)"
                    ],
                    [
                        
                    ]
                ],
                "str_cond_input": [
                    [
                        "smoke"
                    ],
                    [
                        
                    ]
                ]
            },
            {
                "trigger_var": "smoke",
                "trigger_attr": "smoke",
                "action_var": "alarm",
                "action_cmd": "off",
                "str_path": [
                    "alarm.off()",
                    "this.subscribe(smoke, smoke, smokeHandler)"
                ],
                "str_cond_path": [
                    [
                        "(evt.value == clear)",
                        "(evt.value == detected)"
                    ],
                    [
                        
                    ]
                ],
                "str_cond_input": [
                    [
                        "smoke"
                    ],
                    [
                        
                    ]
                ]
            }
        ],
        "list_sink": [
            
        ],
        "list_subscribe_node": [
            "this.subscribe(smoke, smoke, smokeHandler)",
            "this.subscribe(alarm, alarm, strobeHandler)",
            "this.subscribe(app, appTouch)"
        ],
        "list_sink_param_nodes": [
            "http://128.174.237.226:8080/ProvenanceServer/Attack21",
            "data",
            "resp",
            "data",
            "data",
            "attackType",
            "data",
            "attackType",
            "deviceName",
            "data",
            "deviceName",
            "command",
            "data",
            "command"
        ],
        "list_act_param_nodes": [
            "alarm.strobe()",
            "alarm.off()"
        ]
    },
    "Userevents-LockManager": {
        "map_all_inputs": {
            
        },
        "map_capa_inputs": {
            
        },
        "list_description": [
            
        ],
        "list_filename": [
            
        ],
        "list_prompts": [
            
        ],
        "list_action": [
            
        ],
        "list_sink": [
            
        ],
        "list_subscribe_node": [
            
        ],
        "list_sink_param_nodes": [
            
        ],
        "list_act_param_nodes": [
            
        ]
    }
}